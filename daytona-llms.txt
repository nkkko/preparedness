└── src
    └── content
        ├── docs
            ├── configuration.mdx
            ├── file-system-operations.mdx
            ├── getting-started.mdx
            ├── git-operations.mdx
            ├── images.mdx
            ├── index.mdx
            ├── language-server-protocol.mdx
            ├── organizations.mdx
            ├── process-code-execution.mdx
            ├── python-sdk
            │   ├── charts.mdx
            │   ├── code-run-params.mdx
            │   ├── daytona.mdx
            │   ├── errors.mdx
            │   ├── execute-response.mdx
            │   ├── file-system.mdx
            │   ├── git.mdx
            │   ├── index.mdx
            │   ├── lsp-server.mdx
            │   ├── process.mdx
            │   └── sandbox.mdx
            ├── sandbox-management.mdx
            ├── tools
            │   ├── api.mdx
            │   └── cli.mdx
            └── typescript-sdk
            │   ├── charts.mdx
            │   ├── daytona.mdx
            │   ├── errors.mdx
            │   ├── execute-response.mdx
            │   ├── file-system.mdx
            │   ├── git.mdx
            │   ├── index.mdx
            │   ├── lsp-server.mdx
            │   ├── process.mdx
            │   └── sandbox.mdx
        └── legacy-docs
            ├── about
                ├── architecture.mdx
                ├── getting-started.mdx
                └── what-is-daytona.mdx
            ├── configuration
                ├── api-keys.mdx
                ├── container-registries.mdx
                ├── git-providers.mdx
                ├── providers.mdx
                ├── server.mdx
                ├── target-config.mdx
                └── workspace-templates.mdx
            ├── index.mdx
            ├── installation
                ├── installation.mdx
                └── method
                │   ├── homebrew.mdx
                │   ├── nix.mdx
                │   ├── script-powershell.mdx
                │   ├── script-unix.mdx
                │   ├── uninstall-windows.mdx
                │   └── uninstall.mdx
            ├── misc
                ├── telemetry.mdx
                └── troubleshooting.mdx
            ├── sdk
                ├── file-system-operations.mdx
                ├── git-operations.mdx
                ├── language-server-protocol.mdx
                ├── process-code-execution.mdx
                └── sandbox-management.mdx
            ├── tools
                ├── api.mdx
                ├── cli.mdx
                └── docker-extension.mdx
            └── usage
                ├── agent-toolbox.mdx
                ├── builders.mdx
                ├── ide.mdx
                ├── prebuilds.mdx
                ├── runners.mdx
                ├── samples.mdx
                ├── targets.mdx
                └── workspaces.mdx


/src/content/docs/configuration.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Configuration
  3 | ---
  4 |
  5 | import { Tabs, TabItem } from '@astrojs/starlight/components';
  6 |
  7 | ## Set Up Your Environment Variables
  8 |
  9 | To authenticate with Daytona, you need an API key. You can obtain an API key from the Daytona platform.
 10 |
 11 | 1. Navigate to the [Daytona Dashboard](https://app.daytona.io/dashboard/).
 12 | 2. Go to API Keys.
 13 | 3. Click the **`Create Key`** button.
 14 | 4. Add your API key to your **`.env`** file by setting the **`DAYTONA_API_KEY`** environment variable.
 15 | 5. Define the Daytona server URL in your **`.env`** file by setting the **`DAYTONA_SERVER_URL`** environment variable.
 16 |
 17 | ## Configuration Options
 18 |
 19 | Daytona SDK provides an option to configure settings using the `DaytonaConfig` class in Python and TypeScript. The `DaytonaConfig` class accepts the following parameters:
 20 |
 21 | - `api_key`: Your Daytona API key
 22 | - `server_url`: URL of your Daytona server
 23 | - `target`: Daytona Target to create the Sandboxes on.
 24 |
 25 | <Tabs>
 26 | <TabItem label="Python" icon="seti:python">
 27 | ```python
 28 | from daytona_sdk import DaytonaConfig
 29 |
 30 | config = DaytonaConfig(
 31 |     api_key="your-api-key",
 32 |     server_url="your-server-url",
 33 |     target="us"
 34 | )
 35 |
 36 | ```
 37 | </TabItem>
 38 | <TabItem label="TypeScript" icon="seti:typescript">
 39 | ```typescript
 40 | import { DaytonaConfig } from '@daytonaio/sdk';
 41 |
 42 | const config: DaytonaConfig = {
 43 |     apiKey: "your-api-key",
 44 |     serverUrl: "your-server-url",
 45 |     target: "us"
 46 | };
 47 | ```
 48 |
 49 | </TabItem>
 50 | </Tabs>
 51 |
 52 | ## Environment Variables
 53 |
 54 | Daytona SDK supports environment variables for configuration. The SDK automatically looks for these environment variables:
 55 |
 56 | | Variable | Description | Optional |
 57 | |----------|-------------|---------|
 58 | | **`DAYTONA_API_KEY`** | Your Daytona API key. |  |
 59 | | **`DAYTONA_SERVER_URL`** | URL of your Daytona server. | Yes |
 60 | | **`DAYTONA_TARGET`** | Daytona Target to create the Sandboxes on. | Yes |
 61 |
 62 | ### Setting Environment Variables
 63 |
 64 | Daytona SDK can read configuration from environment variables. You can set these environment variables using the following methods:
 65 |
 66 | - [Using a **`.env`** file](#using-a-env-file)
 67 | - [Using Shell Environment](#using-shell-environment)
 68 |
 69 | #### Using a **`.env`** File
 70 |
 71 | Create a `.env` file in your project root directory:
 72 |
 73 | ```bash
 74 | DAYTONA_API_KEY=your-api-key
 75 | DAYTONA_SERVER_URL=https://your-server-url
 76 | DAYTONA_TARGET=us
 77 | ```
 78 |
 79 | - `DAYTONA_API_KEY`: Your Daytona API key.
 80 | - `DAYTONA_SERVER_URL`: URL of your Daytona server.
 81 | - `DAYTONA_TARGET`: Daytona Target to create the Sandboxes on.
 82 |
 83 | #### Using Shell Environment
 84 |
 85 | Set environment variables in your shell:
 86 |
 87 | <Tabs>
 88 | <TabItem label="Bash/Zsh" icon="seti:shell">
 89 | ```bash
 90 | export DAYTONA_API_KEY=your-api-key
 91 | export DAYTONA_SERVER_URL=https://your-server-url
 92 | ```
 93 | </TabItem>
 94 | <TabItem label="Windows PowerShell" icon="seti:powershell">
 95 | ```bash
 96 | $env:DAYTONA_API_KEY="your-api-key"
 97 | $env:DAYTONA_SERVER_URL="https://your-server-url"
 98 | ```
 99 | </TabItem>
100 | </Tabs>
101 |
102 | ## Configuration Precedence
103 |
104 | The SDK uses the following precedence order for configuration (highest to lowest):
105 |
106 | 1. Explicitly passed configuration in code.
107 | 2. Environment variables.
108 | 3. Configuration file.
109 | 4. Default values.
110 |


--------------------------------------------------------------------------------
/src/content/docs/file-system-operations.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: File System Operations
  3 | ---
  4 |
  5 | import { Tabs, TabItem } from '@astrojs/starlight/components';
  6 |
  7 | The Daytona SDK provides comprehensive file system operations through the `fs` module in Sandboxes. This guide covers all available file system operations and best practices.
  8 |
  9 | ## Basic Operations
 10 |
 11 | Daytona SDK provides an option to interact with the file system in Sandboxes. You can perform various operations like listing files, creating directories, reading and writing files, and more.
 12 |
 13 | ### Listing Files and Directories
 14 |
 15 | Daytona SDK provides an option to list files and directories in a Sandbox using Python and TypeScript.
 16 |
 17 | <Tabs>
 18 | <TabItem label="Python" icon="seti:python">
 19 | ```python
 20 | # List files in a directory
 21 | files = sandbox.fs.list_files("/workspace")
 22 | for file in files:
 23 |     print(f"Name: {file.name}")
 24 |     print(f"Is directory: {file.is_dir}")
 25 |     print(f"Size: {file.size}")
 26 |     print(f"Modified: {file.mod_time}")
 27 |
 28 | ```
 29 | </TabItem>
 30 | <TabItem label="TypeScript" icon="seti:typescript">
 31 | ```typescript
 32 | // List files in a directory
 33 | const files = await sandbox.fs.listFiles("/workspace");
 34 |
 35 | files.forEach(file => {
 36 |     console.log(`Name: ${file.name}`);
 37 |     console.log(`Is directory: ${file.isDir}`);
 38 |     console.log(`Size: ${file.size}`);
 39 |     console.log(`Modified: ${file.modTime}`);
 40 | });
 41 | ```
 42 |
 43 | </TabItem>
 44 | </Tabs>
 45 |
 46 | ### Creating Directories
 47 |
 48 | Daytona SDK provides an option to create directories with specific permissions using Python and TypeScript.
 49 |
 50 | <Tabs>
 51 | <TabItem label="Python" icon="seti:python">
 52 | ```python
 53 | # Create a directory
 54 | sandbox.fs.create_folder("/workspace/new-dir")
 55 |
 56 | # Create with specific permissions
 57 |
 58 | sandbox.fs.create_folder("/workspace/new-dir", "755")
 59 |
 60 | ```
 61 | </TabItem>
 62 | <TabItem label="TypeScript" icon="seti:typescript">
 63 | ```typescript
 64 | // Create a directory
 65 | await sandbox.fs.createFolder("/workspace/new-dir");
 66 |
 67 | // Create with specific permissions
 68 | await sandbox.fs.createFolder("/workspace/new-dir", "755");
 69 | ```
 70 |
 71 | </TabItem>
 72 | </Tabs>
 73 |
 74 | ### File Operations
 75 |
 76 | Daytona SDK provides options to read, write, upload, download, and delete files in Sandboxes using Python and TypeScript.
 77 |
 78 | <Tabs>
 79 | <TabItem label="Python" icon="seti:python">
 80 | ```python
 81 | # Upload a file
 82 | with open("local_file.txt", "rb") as f:
 83 |     content = f.read()
 84 | sandbox.fs.upload_file("/workspace/remote_file.txt", content)
 85 |
 86 | # Download a file
 87 |
 88 | content = sandbox.fs.download_file("/workspace/remote_file.txt")
 89 | with open("local_file.txt", "wb") as f:
 90 |     f.write(content)
 91 |
 92 | # Delete a file
 93 |
 94 | sandbox.fs.delete_file("/workspace/file.txt")
 95 |
 96 | ```
 97 | </TabItem>
 98 | <TabItem label="TypeScript" icon="seti:typescript">
 99 | ```typescript
100 | // Upload a file
101 | const fileContent = new File(
102 |     [Buffer.from('Hello, World!')],
103 |     'data.txt',
104 |     { type: 'text/plain' }
105 | );
106 | await sandbox.fs.uploadFile("/workspace/remote_file.txt", fileContent);
107 |
108 | // Download a file
109 | const downloadedFile = await sandbox.fs.downloadFile("/workspace/remote_file.txt");
110 | console.log('File content:', downloadedFile.toString())
111 |
112 | // Delete a file
113 | await sandbox.fs.deleteFile("/workspace/file.txt");
114 | ```
115 |
116 | </TabItem>
117 | </Tabs>
118 |
119 | ## Advanced Operations
120 |
121 | Daytona SDK provides advanced file system operations like file permissions, search and replace, and more.
122 |
123 | ### File Permissions
124 |
125 | Daytona SDK provides an option to set file permissions, get file permissions, and set directory permissions recursively using Python and TypeScript.
126 |
127 | <Tabs>
128 | <TabItem label="Python" icon="seti:python">
129 | ```python
130 | # Set file permissions
131 | sandbox.fs.set_file_permissions("/workspace/file.txt", "644")
132 |
133 | # Get file permissions
134 |
135 | file_info = sandbox.fs.get_file_info("/workspace/file.txt")
136 | print(f"Permissions: {file_info.permissions}")
137 |
138 | ```
139 | </TabItem>
140 | <TabItem label="TypeScript" icon="seti:typescript">
141 | ```typescript
142 | // Set file permissions
143 | await sandbox.fs.setFilePermissions("/workspace/file.txt", { mode: "644" });
144 |
145 | // Get file permissions
146 | const fileInfo = await sandbox.fs.getFileDetails("/workspace/file.txt");
147 | console.log(`Permissions: ${fileInfo.permissions}`);
148 | ```
149 |
150 | </TabItem>
151 | </Tabs>
152 |
153 | ### File Search and Replace
154 |
155 | Daytona SDK provides an option to search for text in files and replace text in files using Python and TypeScript.
156 |
157 | <Tabs>
158 | <TabItem label="Python" icon="seti:python">
159 | ```python
160 | # Search for text in files; if a folder is specified, the search is recursive
161 | results = sandbox.fs.find_files(
162 |     path="/workspace/src",
163 |     pattern="text-of-interest"
164 | )
165 | for match in results:
166 |     print(f"Absolute file path: {match.file}")
167 |     print(f"Line number: {match.line}")
168 |     print(f"Line content: {match.content}")
169 |     print("\n")
170 |
171 | # Replace text in files
172 |
173 | sandbox.fs.replace_in_files(
174 |     files=["/workspace/file1.txt", "/workspace/file2.txt"],
175 |     pattern="old_text",
176 |     new_value="new_text"
177 | )
178 |
179 | ```
180 | </TabItem>
181 | <TabItem label="TypeScript" icon="seti:typescript">
182 | ```typescript
183 | // Search for text in files; if a folder is specified, the search is recursive
184 | const results = await sandbox.fs.findFiles({
185 |     path="/workspace/src",
186 |     pattern: "text-of-interest"
187 | });
188 | results.forEach(match => {
189 |     console.log('Absolute file path:', match.file)
190 |     console.log('Line number:', match.line)
191 |     console.log('Line content:', match.content)
192 | });
193 |
194 | // Replace text in files
195 | await sandbox.fs.replaceInFiles(
196 |     ["/workspace/file1.txt", "/workspace/file2.txt"],
197 |     "old_text",
198 |     "new_text"
199 | );
200 | ```
201 |
202 | </TabItem>
203 | </Tabs>
204 |


--------------------------------------------------------------------------------
/src/content/docs/git-operations.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Git Operations
  3 | ---
  4 |
  5 | import { Tabs, TabItem } from '@astrojs/starlight/components';
  6 |
  7 | The Daytona SDK provides built-in Git support through the `git` module in Sandboxes. This guide covers all available Git operations and best practices.
  8 |
  9 | ## Basic Operations
 10 |
 11 | Daytona SDK provides an option to clone, check status, and manage Git repositories in Sandboxes. You can interact with Git repositories using the `git` module.
 12 |
 13 | ### Cloning Repositories
 14 |
 15 | Daytona SDK provides an option to clone Git repositories into Sandboxes using Python and TypeScript. You can clone public or private repositories, specific branches, and authenticate using personal access tokens.
 16 |
 17 | <Tabs>
 18 | <TabItem label="Python" icon="seti:python">
 19 | ```python
 20 | # Basic clone
 21 | sandbox.git.clone(
 22 |     url="https://github.com/user/repo.git",
 23 |     path="/workspace/repo"
 24 | )
 25 |
 26 | # Clone with authentication
 27 |
 28 | sandbox.git.clone(
 29 |     url="<https://github.com/user/repo.git>",
 30 |     path="/workspace/repo",
 31 |     username="git",
 32 |     password="personal_access_token"
 33 | )
 34 |
 35 | # Clone specific branch
 36 |
 37 | sandbox.git.clone(
 38 |     url="<https://github.com/user/repo.git>",
 39 |     path="/workspace/repo",
 40 |     branch="develop"
 41 | )
 42 |
 43 | ```
 44 | </TabItem>
 45 | <TabItem label="TypeScript" icon="seti:typescript">
 46 | ```typescript
 47 | // Basic clone
 48 | await sandbox.git.clone(
 49 |     "https://github.com/user/repo.git",
 50 |     "/workspace/repo"
 51 | );
 52 |
 53 | // Clone with authentication
 54 | await sandbox.git.clone(
 55 |     "https://github.com/user/repo.git",
 56 |     "/workspace/repo",
 57 |     undefined,
 58 |     undefined,
 59 |     "git",
 60 |     "personal_access_token"
 61 | );
 62 |
 63 | // Clone specific branch
 64 | await sandbox.git.clone(
 65 |     "https://github.com/user/repo.git",
 66 |     "/workspace/repo",
 67 |     "develop"
 68 | );
 69 | ```
 70 |
 71 | </TabItem>
 72 | </Tabs>
 73 |
 74 | ### Repository Status
 75 |
 76 | Daytona SDK provides an option to check the status of Git repositories in Sandboxes. You can get the current branch, modified files, number of commits ahead and behind main branch using Python and TypeScript.
 77 |
 78 | <Tabs>
 79 | <TabItem label="Python" icon="seti:python">
 80 | ```python
 81 | # Get repository status
 82 | status = sandbox.git.status("/workspace/repo")
 83 | print(f"Current branch: {status.current_branch}")
 84 | print(f"Commits ahead: {status.ahead}")
 85 | print(f"Commits behind: {status.behind}")
 86 | for file in status.file_status:
 87 |     print(f"File: {file.name}")
 88 |
 89 | # List branches
 90 |
 91 | response = sandbox.git.branches("/workspace/repo")
 92 | for branch in response.branches:
 93 |     print(f"Branch: {branch}")
 94 |
 95 | ```
 96 | </TabItem>
 97 | <TabItem label="TypeScript" icon="seti:typescript">
 98 | ```typescript
 99 | // Get repository status
100 | const status = await sandbox.git.status("/workspace/repo");
101 | console.log(`Current branch: ${status.currentBranch}`);
102 | console.log(`Commits ahead: ${status.ahead}`);
103 | console.log(`Commits behind: ${status.behind}`);
104 | status['FileStatus[]'].forEach(file => {
105 |     console.log(`File: ${file.name}`);
106 | });
107 |
108 | // List branches
109 | const response = await sandbox.git.branches("/workspace/repo");
110 | response.branches.forEach(branch => {
111 |     console.log(`Branch: ${branch}`);
112 | });
113 | ```
114 |
115 | </TabItem>
116 | </Tabs>
117 |
118 | ## Branch Operations
119 |
120 | Daytona SDK provides an option to manage branches in Git repositories. You can create, switch, and delete branches.
121 |
122 | ### Managing Branches
123 |
124 | Daytona SDK provides an option to create, switch, and delete branches in Git repositories using Python and TypeScript.
125 |
126 | <Tabs>
127 | <TabItem label="Python" icon="seti:python">
128 | ```python
129 | # Create new branch
130 | sandbox.git.create_branch("/workspace/repo", "feature/new-feature")
131 |
132 | # Switch branch
133 |
134 | sandbox.git.checkout("/workspace/repo", "feature/new-feature")
135 |
136 | # Delete branch
137 |
138 | sandbox.git.delete_branch("/workspace/repo", "feature/old-feature")
139 |
140 | ```
141 | </TabItem>
142 | <TabItem label="TypeScript" icon="seti:typescript">
143 | ```typescript
144 | // Create new branch
145 | await sandbox.git.createBranch("/workspace/repo", "feature/new-feature");
146 |
147 | // Switch branch
148 | await sandbox.git.checkout("/workspace/repo", "feature/new-feature");
149 |
150 | // Delete branch
151 | await sandbox.git.deleteBranch("/workspace/repo", "feature/old-feature");
152 | ```
153 |
154 | </TabItem>
155 | </Tabs>
156 |
157 | ## Staging and Committing
158 |
159 | Daytona SDK provides an option to stage and commit changes in Git repositories. You can stage specific files, all changes, and commit with a message using Python and TypeScript.
160 |
161 | ### Working with Changes
162 |
163 | <Tabs>
164 | <TabItem label="Python" icon="seti:python">
165 | ```python
166 | # Stage specific files
167 | sandbox.git.add("/workspace/repo", ["file1.txt", "file2.txt"])
168 |
169 | # Stage all changes
170 |
171 | sandbox.git.add("/workspace/repo", ["."])
172 |
173 | # Commit changes
174 |
175 | sandbox.git.commit("/workspace/repo", "feat: add new feature")
176 |
177 | # Get commit history
178 |
179 | commits = sandbox.git.log("/workspace/repo")
180 | for commit in commits:
181 |     print(f"Commit: {commit.hash}")
182 |     print(f"Author: {commit.author}")
183 |     print(f"Message: {commit.message}")
184 |
185 | ```
186 | </TabItem>
187 | <TabItem label="TypeScript" icon="seti:typescript">
188 | ```typescript
189 | // Stage specific files
190 | await sandbox.git.add("/workspace/repo", ["file1.txt", "file2.txt"]);
191 |
192 | // Stage all changes
193 | await sandbox.git.add("/workspace/repo", ["."]);
194 |
195 | // Commit changes
196 | await sandbox.git.commit("/workspace/repo", "feat: add new feature");
197 |
198 | // Get commit history
199 | const commits = await sandbox.git.log("/workspace/repo");
200 | commits.forEach(commit => {
201 |     console.log(`Commit: ${commit.hash}`);
202 |     console.log(`Author: ${commit.author}`);
203 |     console.log(`Message: ${commit.message}`);
204 | });
205 | ```
206 |
207 | </TabItem>
208 | </Tabs>
209 |
210 | ## Remote Operations
211 |
212 | Daytona SDK provides an option to work with remote repositories in Git. You can push changes, pull changes, and list remotes.
213 |
214 | ### Working with Remotes
215 |
216 | Daytona SDK provides an option to push, pull, and list remotes in Git repositories using Python and TypeScript.
217 |
218 | <Tabs>
219 | <TabItem label="Python" icon="seti:python">
220 | ```python
221 | # Push changes
222 | sandbox.git.push("/workspace/repo")
223 |
224 | # Pull changes
225 |
226 | sandbox.git.pull("/workspace/repo")
227 |
228 | # List remotes
229 |
230 | remotes = sandbox.git.list_remotes("/workspace/repo")
231 | for remote in remotes:
232 |     print(f"Remote: {remote.name} URL: {remote.url}")
233 |
234 | ```
235 | </TabItem>
236 | <TabItem label="TypeScript" icon="seti:typescript">
237 | ```typescript
238 | // Push changes
239 | await sandbox.git.push("/workspace/repo");
240 |
241 | // Push to specific remote and branch
242 | await sandbox.git.push("/workspace/repo", "origin", "feature/new-feature");
243 |
244 | // Pull changes
245 | await sandbox.git.pull("/workspace/repo");
246 |
247 | // Pull from specific remote and branch
248 | await sandbox.git.pull("/workspace/repo", "origin", "main");
249 | ```
250 |
251 | </TabItem>
252 | </Tabs>
253 |


--------------------------------------------------------------------------------
/src/content/docs/images.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Images
  3 | ---
  4 |
  5 | import Label from '@components/Label.astro'
  6 | import { Tabs, TabItem } from '@astrojs/starlight/components';
  7 |
  8 | By default, when spinning up a Sandbox, Daytona uses a simple image with some useful utilities pre-installed, such as `python`, `node`, `pip` as well as some common pip packages. More information [below](#default-sandbox-image).
  9 |
 10 | It is possible to use custom images by visiting the Dashboard, clicking on Images and on `Create Image`. If your image hasn't got a long-running entrypoint, Daytona will ensure sure that the resulting container won't exit immediately upon creation by adding its own `sleep infinity` entrypoint.
 11 |
 12 | :::note
 13 | Since images tagged `latest` get frequent updates, only specific tags (e.g. `0.1.0`) are supported. Same idea applies to tags such as `lts` or `stable` and we recommend avoiding those when defining an image.
 14 | :::
 15 |
 16 | Once the image is pulled, validated and has an `Active` state, it is ready to be used. Define the `CreateSandboxParams` object to specify the custom image to use:
 17 |
 18 | <Tabs>
 19 | <TabItem label="Python" icon="seti:python">
 20 | ```bash
 21 | params = CreateSandboxParams(image="alpine/3.21", language="python")
 22 | sandbox = daytona.create(params)
 23 | ```
 24 | </TabItem>
 25 | <TabItem label="TypeScript" icon="seti:typescript">
 26 | ```bash
 27 | const sandbox = await daytona.create({
 28 |   language: 'python',
 29 |   image: 'alpine/3.21',
 30 | })
 31 | ```
 32 | </TabItem>
 33 | </Tabs>
 34 |
 35 | Full example:
 36 |
 37 | <Tabs>
 38 | <TabItem label="Python" icon="seti:python">
 39 | ```python
 40 | from daytona_sdk import Daytona, CreateSandboxParams
 41 |
 42 | daytona = Daytona()
 43 |
 44 | sandbox = daytona.create(CreateSandboxParams(image="alpine/3.21", language="python"))
 45 |
 46 | response = sandbox.process.code_run('print("Sum of 3 and 4 is " + str(3 + 4))')
 47 | if response.exit_code != 0:
 48 |     print(f"Error running code: {response.exit_code} {response.result}")
 49 | else:
 50 |     print(response.result)
 51 |
 52 | daytona.remove(sandbox)
 53 |
 54 | ```
 55 |
 56 | </TabItem>
 57 | <TabItem label="TypeScript" icon="seti:typescript">
 58 | ```typescript
 59 | import { Daytona } from '@daytonaio/sdk'
 60 |
 61 | async function main() {
 62 |   // Initialize the Daytona client
 63 |   const daytona = new Daytona()
 64 |
 65 |   try {
 66 |     // Create the Sandbox instance
 67 |     const sandbox = await daytona.create({
 68 |       language: 'python',
 69 |       image: 'alpine/3.21',
 70 |     })
 71 |     // Run the code securely inside the Sandbox
 72 |     const response = await sandbox.process.codeRun(
 73 |       'print("Sum of 3 and 4 is " + str(3 + 4))',
 74 |     )
 75 |     if (response.exitCode !== 0) {
 76 |       console.error('Error running code:', response.exitCode, response.result)
 77 |     } else {
 78 |       console.log(response.result)
 79 |     }
 80 |   } catch (error) {
 81 |     console.error('Sandbox flow error:', error)
 82 |   } finally {
 83 |     // Clean up the Sandbox
 84 |     await daytona.remove(sandbox)
 85 |   }
 86 | }
 87 |
 88 | main()
 89 |
 90 | ```
 91 |
 92 | </TabItem>
 93 | </Tabs>
 94 |
 95 | ## Custom Container Registries
 96 |
 97 | If you want to use a private image, go to Dashboard -> Registries -> Add Registry and input the necessary fields. Once the Container Registry is created, you may go back to the Images page and add images from the newly created registry.
 98 |
 99 | The next step is the same; simply set the `CreateSandboxParams` field to use the full image name and no more authentication is needed.
100 |
101 | ## Using a Local Image
102 |
103 | In order to avoid having to manually set up a private container registry and push your image there, the [Daytona CLI](/docs/getting-started#setting-up-the-daytona-cli) allows you to push an image from your local device or from a local Dockerfile and use it in your Sandboxes.
104 |
105 | After running `docker images` and ensuring the image and tag you want to use is available use the `daytona image push` command to add the image to Daytona, e.g.:
106 |
107 | ```bash
108 | daytona image push custom-alpine:3.21
109 | ```
110 |
111 | If you haven't built the desired image yet, you can use the `--dockerfile` flag to pass the path to the Dockerfile you want to use and let the CLI do the rest:
112 |
113 | ```bash
114 | daytona image push --dockerfile ./Dockerfile
115 | ```
116 |
117 | ```text
118 | Building image from /Users/idagelic/docs/Dockerfile
119 | Step 1/5 : FROM alpine:latest
120 |
121 | ...
122 |
123 |  Successfully pushed dfile-try:0.1.0 to Daytona
124 |
125 |  ⡿  Waiting for the image be validated ...
126 |
127 |  ...
128 |
129 |  ✓  Use 'harbor-transient.internal.daytona.app/daytona/dfile-try:0.1.0' to create a new sandbox using this image
130 |
131 | ```
132 |
133 | This approach also ensures that the resulting image is for the AMD architecture which is the architecture we use when spinning up Daytona Sandboxes.
134 |
135 | ## Default Sandbox Image
136 |
137 | The default image used by Daytona contains `python`, `node` and their respective LSP's, as well as these pre-installed `pip` packages:
138 |
139 | - `beautifulsoup4` (v4.13.3)
140 | - `django` (v5.1.7)
141 | - `flask` (v3.1.0)
142 | - `keras` (v3.9.0)
143 | - `matplotlib` (v3.10.1)
144 | - `numpy` (v2.2.3)
145 | - `openai` (v1.65.4)
146 | - `opencv-python` (v4.11.0.86)
147 | - `pandas` (v2.2.3)
148 | - `pillow` (v11.1.0)
149 | - `pydantic-ai` (v0.0.35)
150 | - `requests` (v2.32.3)
151 | - `scikit-learn` (v1.6.1)
152 | - `scipy` (v1.15.2)
153 | - `seaborn` (v0.13.2)
154 | - `SQLAlchemy` (v2.0.38)
155 | - `transformers` (v4.49.0)
156 | - `anthropic` (v0.49.0)
157 | - `daytona_sdk` (v0.11.1)
158 | - `huggingface` (v0.0.1)
159 | - `instructor` (v1.7.3)
160 | - `langchain` (v0.3.20)
161 | - `llama-index` (v0.12.22)
162 | - `ollama` (v0.4.7)
163 |


--------------------------------------------------------------------------------
/src/content/docs/index.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Daytona Documentation
  3 | description: Start managing your Sandboxes with Daytona.
  4 | template: doc
  5 | head:
  6 |   - tag: title
  7 |     content: Documentation · Daytona
  8 |   - tag: meta
  9 |     attrs:
 10 |         property: og:title
 11 |         content: Documentation · Daytona
 12 |   - tag: meta
 13 |     attrs:
 14 |         name: twitter:title
 15 |         content: Documentation · Daytona
 16 | tableOfContents: false
 17 | ---
 18 |
 19 | import { Tabs, TabItem } from '@astrojs/starlight/components';
 20 | import ExploreMore from '@components/ExploreMore.astro';
 21 |
 22 | The Daytona SDK provides official Python and TypeScript interfaces for interacting with Daytona,
 23 | enabling you to programmatically manage development environments and execute code.
 24 |
 25 | ### Quick Start
 26 |
 27 | Run your first line of code in a Daytona Sandbox.
 28 |
 29 | #### 1. Get Your API Key
 30 |
 31 | 👉 Need an account? [Sign up for access](https://www.daytona.io/waitlist)
 32 |
 33 | - Go to the Daytona [Dashboard](https://app.daytona.io/dashboard).
 34 | - Create a new [API key](https://app.daytona.io/dashboard/keys). Make sure to save it securely,
 35 | as it won't be shown again.
 36 | - You'll need it in the next step.
 37 |
 38 | #### 2. Install the SDK
 39 |
 40 | <Tabs syncKey="language">
 41 |   <TabItem label="Python" icon="seti:python">
 42 |   ```bash
 43 |   pip install daytona_sdk
 44 |   ```
 45 |   </TabItem>
 46 |   <TabItem label="TypeScript" icon="seti:typescript">
 47 |   ```bash
 48 |   npm install @daytonaio/sdk
 49 |   ```
 50 |   </TabItem>
 51 | </Tabs>
 52 |
 53 | #### 3. Write Your Code
 54 |
 55 | <Tabs syncKey="language">
 56 |   <TabItem label="Python" icon="seti:python">
 57 |   Create a file named: `main.py`
 58 |   ```python
 59 |   from daytona_sdk import Daytona, DaytonaConfig
 60 |
 61 |   # Define the configuration
 62 |   config = DaytonaConfig(api_key="your-api-key")
 63 |
 64 |   # Initialize the Daytona client
 65 |   daytona = Daytona(config)
 66 |
 67 |   # Create the Sandbox instance
 68 |   sandbox = daytona.create()
 69 |
 70 |   # Run the code securely inside the Sandbox
 71 |   response = sandbox.process.code_run('print("Hello World from code!")')
 72 |   if response.exit_code != 0:
 73 |     print(f"Error: {response.exit_code} {response.result}")
 74 |   else:
 75 |       print(response.result)
 76 |
 77 |   # Clean up
 78 |   daytona.remove(sandbox)
 79 |   ```
 80 |   </TabItem>
 81 |   <TabItem label="TypeScript" icon="seti:typescript">
 82 |   Create a file named: `index.mts`
 83 |   ```typescript
 84 |   import { Daytona } from '@daytonaio/sdk';
 85 |
 86 |   // Initialize the Daytona client
 87 |   const daytona = new Daytona({ apiKey: 'your-api-key' });
 88 |
 89 |   // Create the Sandbox instance
 90 |   const sandbox = await daytona.create({
 91 |     language: 'typescript',
 92 |   });
 93 |
 94 |   // Run the code securely inside the Sandbox
 95 |   const response = await sandbox.process.codeRun('console.log("Hello World from code!")')
 96 |   console.log(response.result);
 97 |
 98 |   // Clean up
 99 |   await daytona.remove(sandbox)
100 |   ```
101 |
102 |   </TabItem>
103 | </Tabs>
104 |
105 | :::note
106 | Replace `your-api-key` with the value from your Daytona dashboard.
107 | :::
108 |
109 | #### 4. Run It
110 |
111 | <Tabs syncKey="language">
112 |   <TabItem label="Python" icon="seti:python">
113 |   ```bash
114 |   python main.py
115 |   ```
116 |   </TabItem>
117 |   <TabItem label="TypeScript" icon="seti:typescript">
118 |   ```bash
119 |   npx tsx index.mts
120 |   ```
121 |   </TabItem>
122 | </Tabs>
123 |
124 | #### ✅ What You Just Did
125 |
126 | - Installed the Daytona SDK.
127 | - Created a secure sandbox environment.
128 | - Executed code remotely inside that sandbox.
129 | - Retrieved and displayed the output locally.
130 |
131 | You're now ready to use Daytona for secure, isolated code execution.
132 |
133 | <ExploreMore />
134 |


--------------------------------------------------------------------------------
/src/content/docs/language-server-protocol.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Language Server Protocol
  3 | ---
  4 |
  5 | import { Tabs, TabItem } from '@astrojs/starlight/components';
  6 |
  7 | The Daytona SDK provides Language Server Protocol (LSP) support through Sandbox instances. This enables advanced language features like code completion, diagnostics, and more.
  8 |
  9 | ## Creating LSP Servers
 10 |
 11 | Daytona SDK provides an option to create LSP servers using Python and TypeScript.
 12 |
 13 | <Tabs>
 14 | <TabItem label="Python" icon="seti:python">
 15 | ```python
 16 | from daytona_sdk import Daytona, LspLanguageId
 17 |
 18 | # Create Sandbox
 19 |
 20 | daytona = Daytona()
 21 | sandbox = daytona.create()
 22 |
 23 | # Create LSP server for Python
 24 |
 25 | lsp_server = sandbox.create_lsp_server(
 26 |     language_id=LspLanguageId.PYTHON,
 27 |     path_to_project="/workspace/project"
 28 | )
 29 |
 30 | ```
 31 | </TabItem>
 32 | <TabItem label="TypeScript" icon="seti:typescript">
 33 | ```typescript
 34 | import { Daytona, LspLanguageId } from '@daytonaio/sdk'
 35 |
 36 | // Create sandbox
 37 | const daytona = new Daytona()
 38 | const sandbox = await daytona.create({
 39 |     language: 'typescript'
 40 | })
 41 |
 42 | // Create LSP server for TypeScript
 43 | const lspServer = sandbox.createLspServer(
 44 |     LspLanguageId.TYPESCRIPT,
 45 |     "/workspace/project"
 46 | )
 47 | ```
 48 |
 49 | </TabItem>
 50 | </Tabs>
 51 |
 52 | ## Supported Languages
 53 |
 54 | Daytona SDK provides an option to create LSP servers for various languages through the `LspLanguageId` enum in Python and TypeScript.
 55 |
 56 | <Tabs>
 57 | <TabItem label="Python" icon="seti:python">
 58 | ```python
 59 | from daytona_sdk import LspLanguageId
 60 |
 61 | # Available language IDs
 62 |
 63 | LspLanguageId.PYTHON
 64 | LspLanguageId.TYPESCRIPT
 65 |
 66 | ```
 67 | </TabItem>
 68 | <TabItem label="TypeScript" icon="seti:typescript">
 69 | ```typescript
 70 | import { LspLanguageId } from '@daytonaio/sdk'
 71 |
 72 | // Available language IDs
 73 | LspLanguageId.PYTHON
 74 | LspLanguageId.TYPESCRIPT
 75 | ```
 76 |
 77 | </TabItem>
 78 | </Tabs>
 79 |
 80 | - `LspLanguageId.PYTHON`: Python language server.
 81 | - `LspLanguageId.TYPESCRIPT`: TypeScript/JavaScript language server.
 82 |
 83 | ## LSP Features
 84 |
 85 | Daytona SDK provides various LSP features for code analysis and editing.
 86 |
 87 | ### Code Completion
 88 |
 89 | Daytona SDK provides an option to get code completions for a specific position in a file using Python and TypeScript.
 90 |
 91 | <Tabs>
 92 | <TabItem label="Python" icon="seti:python">
 93 | ```python
 94 | completions = lsp_server.completions(
 95 |     path="/workspace/project/main.py",
 96 |     position={"line": 10, "character": 15}
 97 | )
 98 | print(f"Completions: {completions}")
 99 | ```
100 | </TabItem>
101 | <TabItem label="TypeScript" icon="seti:typescript">
102 | ```typescript
103 | const completions = await lspServer.getCompletions({
104 |     path: "/workspace/project/main.ts",
105 |     position: { line: 10, character: 15 }
106 | })
107 | console.log('Completions:', completions)
108 | ```
109 | </TabItem>
110 | </Tabs>
111 |


--------------------------------------------------------------------------------
/src/content/docs/organizations.mdx:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: Organizations
 3 | ---
 4 |
 5 | import { Tabs, TabItem } from '@astrojs/starlight/components';
 6 |
 7 | Organizations in Daytona are a way to group resources and easily collaborate with other users.
 8 | Users in an Organization, depending on their permissions, view and manage the same set of key
 9 | resources such as Sandboxes, Images and Registries, as well as consume the same quotas for these resources.
10 |
11 | After signing up to Daytona, users are assigned a Personal Organization. This default Organization
12 | cannot take new members and cannot be deleted. It has separate billing and will most commonly be used
13 | as a testing playground or by solo developers. Switching between organizations is done by selecting
14 | an option from the dropdown menu on the top of the sidebar.
15 |
16 | ## Organization Roles
17 |
18 | Users within an Organization can have one of two different **Roles**: `Owner` and `Member`. `Owners` have full
19 | administrative access to the Organization and its resources. `Members` have no administrative access
20 | to the Organization, while their access to Organization resources is based on **Assignments**.
21 |
22 | ### Administrative Actions
23 |
24 | Organization `Owners` can perform administrative actions such as:
25 |
26 | - Invite new users to the Organization
27 | - Manage pending invitations
28 | - Change Role of a user in the Organization
29 | - Update Assignments for an Organization Member
30 | - Remove user from the Organization
31 | - Delete Organization
32 |
33 | ## Inviting New Users
34 |
35 | As an Organization `Owner`, to invite a new user to your Organization, navigate to the _Members page_,
36 | click on _Invite Member_, enter the email address of the user you want to invite, and choose a **Role**.
37 | If you select the `Member` role, you can also define their **Assignments**.
38 |
39 | ## Available Assignments
40 |
41 | The list of available **Assignments** includes:
42 |
43 | | Assignment | Description |
44 | |------------|-------------|
45 | | **`Viewer (required)`** | Grants read access to all resources in the organization |
46 | | **`Developer`** | Grants the ability to create sandboxes and keys in the organization |
47 | | **`Sandboxes Admin`** | Grants admin access to sandboxes in the organization |
48 | | **`Images Admin`** | Grants admin access to images in the organization |
49 | | **`Registries Admin`** | Grants admin access to registries in the organization |
50 | | **`Super Admin`** | Grants full access to all resources in the organization |
51 |
52 | ## Managing Invitations
53 |
54 | To view their pending invitations to join other Organizations, users can navigate to the _Invitations
55 | page_ by expanding the dropdown at the bottom of the sidebar, and clicking on _Invitations_. Once a user
56 | accepts an invitation to join an Organization, they get access to resource quotas assigned to that
57 | Organization and they may proceed by issuing a new API key and creating sandboxes.
58 |


--------------------------------------------------------------------------------
/src/content/docs/process-code-execution.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Process and Code Execution
  3 | ---
  4 |
  5 | import { Tabs, TabItem } from '@astrojs/starlight/components';
  6 |
  7 | The Daytona SDK provides powerful process and code execution capabilities through the `process` module in Sandboxes. This guide covers all available process operations and best practices.
  8 |
  9 | ## Code Execution
 10 |
 11 | Daytona SDK provides an option to execute code in Python and TypeScript.
 12 |
 13 | ### Running Code
 14 |
 15 | Daytona SDK provides an option to run code snippets in Python and TypeScript. You can execute code with input, timeout, and environment variables.
 16 |
 17 | <Tabs>
 18 | <TabItem label="Python" icon="seti:python">
 19 | ```python
 20 | # Run Python code
 21 | response = sandbox.process.code_run('''
 22 | def greet(name):
 23 |     return f"Hello, {name}!"
 24 |
 25 | print(greet("Daytona"))
 26 | ''')
 27 |
 28 | print(response.result)
 29 |
 30 | ```
 31 | </TabItem>
 32 | <TabItem label="TypeScript" icon="seti:typescript">
 33 | ```typescript
 34 | // Run TypeScript code
 35 | const response = await sandbox.process.codeRun(`
 36 | function greet(name: string): string {
 37 |     return \`Hello, \${name}!\`;
 38 | }
 39 |
 40 | console.log(greet("Daytona"));
 41 | `);
 42 | console.log(response.result);
 43 |
 44 | // Run code with input
 45 | const response = await sandbox.process.codeRun(
 46 |     'const name = prompt("Enter name: ");\nconsole.log(`Hello, ${name}!`);',
 47 |     { input: "Daytona" }
 48 | );
 49 | console.log(response.result);
 50 |
 51 | // Run code with timeout
 52 | const response = await sandbox.process.codeRun(
 53 |     'setTimeout(() => console.log("Done"), 2000);',
 54 |     { timeout: 5000 }
 55 | );
 56 | console.log(response.result);
 57 | ```
 58 |
 59 | </TabItem>
 60 | </Tabs>
 61 |
 62 | ## Process Execution
 63 |
 64 | Daytona SDK provides an option to execute shell commands and manage background processes in Sandboxes.
 65 |
 66 | ### Running Commands
 67 |
 68 | Daytona SDK provides an option to execute shell commands in Python and TypeScript. You can run commands with input, timeout, and environment variables.
 69 |
 70 | <Tabs>
 71 | <TabItem label="Python" icon="seti:python">
 72 | ```python
 73 | # Execute shell command
 74 | response = sandbox.process.exec("ls -la")
 75 | print(response.result)
 76 | ```
 77 | </TabItem>
 78 | <TabItem label="TypeScript" icon="seti:typescript">
 79 | ```typescript
 80 | // Execute shell command
 81 | const response = await sandbox.process.executeCommand("ls -la");
 82 | console.log(response.result);
 83 | ```
 84 | </TabItem>
 85 | </Tabs>
 86 |
 87 | ## Sessions (Background Processes)
 88 |
 89 | Daytona SDK provides an option to start, stop, and manage background process sessions in Sandboxes. You can run long-running commands, monitor process status, and list all running processes.
 90 |
 91 | ### Managing Long-Running Processes
 92 |
 93 | Daytona SDK provides an option to start and stop background processes. You can run long-running commands and monitor process status.
 94 |
 95 | <Tabs>
 96 | <TabItem label="Python" icon="seti:python">
 97 | ```python
 98 | # Check session's executed commands
 99 | session = sandbox.process.get_session(session_id)
100 | print(f"Session {process_id}:")
101 | for command in session.commands:
102 |     print(f"Command: {command.command}, Exit Code: {command.exit_code}")
103 |
104 | # List all running sessions
105 |
106 | sessions = sandbox.process.list_sessions()
107 | for session in sessions:
108 |     print(f"PID: {session.id}, Commands: {session.commands}")
109 |
110 | ```
111 | </TabItem>
112 | <TabItem label="TypeScript" icon="seti:typescript">
113 | ```typescript
114 | // Check session's executed commands
115 | const session = await sandbox.process.getSession(sessionId);
116 | console.log(`Session ${sessionId}:`);
117 | for (const command of session.commands) {
118 |     console.log(`Command: ${command.command}, Exit Code: ${command.exitCode}`);
119 | }
120 |
121 | // List all running sessions
122 | const sessions = await sandbox.process.listSessions();
123 | for (const session of sessions) {
124 |     console.log(`PID: ${session.id}, Commands: ${session.commands}`);
125 | }
126 |
127 | ```
128 |
129 | </TabItem>
130 | </Tabs>
131 |
132 | ## Best Practices
133 |
134 | Daytona SDK provides best practices for process and code execution in Sandboxes.
135 |
136 | 1. **Resource Management**
137 |
138 | - Use sessions for long-running operations
139 | - Clean up sessions after execution
140 | - Handle session exceptions properly
141 |
142 | <Tabs>
143 | <TabItem label="Python" icon="seti:python">
144 |    ```python
145 |    # Python - Clean up session
146 |    session_id = "long-running-cmd"
147 |    try:
148 |        sandbox.process.create_session(session_id)
149 |        session = sandbox.process.get_session(session_id)
150 |        # Do work...
151 |    finally:
152 |        sandbox.process.delete_session(session.session_id)
153 |    ```
154 | </TabItem>
155 | <TabItem label="TypeScript" icon="seti:typescript">
156 |    ```typescript
157 |    // TypeScript - Clean up session
158 |    const sessionId = "long-running-cmd";
159 |    try {
160 |        await sandbox.process.createSession(sessionId);
161 |        const session = await sandbox.process.getSession(sessionId);
162 |        // Do work...
163 |    } finally {
164 |        await sandbox.process.deleteSession(session.sessionId);
165 |    }
166 |    ```
167 | </TabItem>
168 | </Tabs>
169 |
170 | 2. **Error Handling**
171 |
172 | - Handle process exceptions properly
173 | - Log error details for debugging
174 | - Use try-catch blocks for error handling
175 |
176 | <Tabs>
177 | <TabItem label="Python" icon="seti:python">
178 | ```python
179 | try:
180 |     response = sandbox.process.code_run("invalid python code")
181 | except ProcessExecutionError as e:
182 |     print(f"Execution failed: {e}")
183 |     print(f"Exit code: {e.exit_code}")
184 |     print(f"Error output: {e.stderr}")
185 | ```
186 | </TabItem>
187 | <TabItem label="TypeScript" icon="seti:typescript">
188 | ```typescript
189 | try {
190 |     const response = await sandbox.process.codeRun("invalid typescript code");
191 | } catch (e) {
192 |     if (e instanceof ProcessExecutionError) {
193 |         console.error("Execution failed:", e);
194 |         console.error("Exit code:", e.exitCode);
195 |         console.error("Error output:", e.stderr);
196 |     }
197 | }
198 | ```
199 | </TabItem>
200 | </Tabs>
201 |
202 | ## Common Issues
203 |
204 | Daytona SDK provides an option to troubleshoot common issues related to process execution and code execution.
205 |
206 | ### Process Execution Failed
207 |
208 | - Check command syntax
209 | - Verify required dependencies
210 | - Ensure sufficient permissions
211 |
212 | ### Process Timeout
213 |
214 | - Adjust timeout settings
215 | - Optimize long-running operations
216 | - Consider using background processes
217 |
218 | ### Resource Limits
219 |
220 | - Monitor process memory usage
221 | - Handle process cleanup properly
222 | - Use appropriate resource constraints
223 |


--------------------------------------------------------------------------------
/src/content/docs/python-sdk/charts.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: ""
  3 | ---
  4 |
  5 | ## Chart
  6 |
  7 | ```python
  8 | class Chart()
  9 | ```
 10 |
 11 | Represents a chart with metadata from matplotlib.
 12 |
 13 | **Attributes**:
 14 |
 15 | - `type` _ChartType_ - The type of chart
 16 | - `title` _str_ - The title of the chart
 17 | - `elements` _List[Any]_ - The elements of the chart
 18 | - `png` _Optional[str]_ - The PNG representation of the chart encoded in base64
 19 |
 20 | ## ChartType
 21 |
 22 | ```python
 23 | class ChartType(str, Enum)
 24 | ```
 25 |
 26 | Chart types
 27 |
 28 | **Enum Members**:
 29 |     - `LINE` ("line")
 30 |     - `SCATTER` ("scatter")
 31 |     - `BAR` ("bar")
 32 |     - `PIE` ("pie")
 33 |     - `BOX_AND_WHISKER` ("box_and_whisker")
 34 |     - `COMPOSITE_CHART` ("composite_chart")
 35 |     - `UNKNOWN` ("unknown")
 36 |
 37 | ## Chart2D
 38 |
 39 | ```python
 40 | class Chart2D(Chart)
 41 | ```
 42 |
 43 | Represents a 2D chart with metadata.
 44 |
 45 | **Attributes**:
 46 |
 47 | - `x_label` _Optional[str]_ - The label of the x-axis
 48 | - `y_label` _Optional[str]_ - The label of the y-axis
 49 |
 50 | ## PointData
 51 |
 52 | ```python
 53 | class PointData()
 54 | ```
 55 |
 56 | Represents a point in a 2D chart.
 57 |
 58 | **Attributes**:
 59 |
 60 | - `label` _str_ - The label of the point
 61 | - `points` _List[Tuple[Union[str, float], Union[str, float]]]_ - The points of the chart
 62 |
 63 | ## PointChart
 64 |
 65 | ```python
 66 | class PointChart(Chart2D)
 67 | ```
 68 |
 69 | Represents a point chart with metadata.
 70 |
 71 | **Attributes**:
 72 |
 73 | - `x_ticks` _List[Union[str, float]]_ - The ticks of the x-axis
 74 | - `x_tick_labels` _List[str]_ - The labels of the x-axis
 75 | - `x_scale` _str_ - The scale of the x-axis
 76 | - `y_ticks` _List[Union[str, float]]_ - The ticks of the y-axis
 77 | - `y_tick_labels` _List[str]_ - The labels of the y-axis
 78 | - `y_scale` _str_ - The scale of the y-axis
 79 | - `elements` _List[PointData]_ - The points of the chart
 80 |
 81 | ## LineChart
 82 |
 83 | ```python
 84 | class LineChart(PointChart)
 85 | ```
 86 |
 87 | Represents a line chart with metadata.
 88 |
 89 | **Attributes**:
 90 |
 91 | - `type` _ChartType_ - The type of chart
 92 |
 93 | ## ScatterChart
 94 |
 95 | ```python
 96 | class ScatterChart(PointChart)
 97 | ```
 98 |
 99 | Represents a scatter chart with metadata.
100 |
101 | **Attributes**:
102 |
103 | - `type` _ChartType_ - The type of chart
104 |
105 | ## BarData
106 |
107 | ```python
108 | class BarData()
109 | ```
110 |
111 | Represents a bar in a bar chart.
112 |
113 | **Attributes**:
114 |
115 | - `label` _str_ - The label of the bar
116 | - `group` _str_ - The group of the bar
117 | - `value` _str_ - The value of the bar
118 |
119 | ## BarChart
120 |
121 | ```python
122 | class BarChart(Chart2D)
123 | ```
124 |
125 | Represents a bar chart with metadata.
126 |
127 | **Attributes**:
128 |
129 | - `type` _ChartType_ - The type of chart
130 | - `elements` _List[BarData]_ - The bars of the chart
131 |
132 | ## PieData
133 |
134 | ```python
135 | class PieData()
136 | ```
137 |
138 | Represents a pie slice in a pie chart.
139 |
140 | **Attributes**:
141 |
142 | - `label` _str_ - The label of the pie slice
143 | - `angle` _float_ - The angle of the pie slice
144 | - `radius` _float_ - The radius of the pie slice
145 | - `autopct` _float_ - The autopct value of the pie slice
146 |
147 | ## PieChart
148 |
149 | ```python
150 | class PieChart(Chart)
151 | ```
152 |
153 | Represents a pie chart with metadata.
154 |
155 | **Attributes**:
156 |
157 | - `type` _ChartType_ - The type of chart
158 | - `elements` _List[PieData]_ - The pie slices of the chart
159 |
160 | ## BoxAndWhiskerData
161 |
162 | ```python
163 | class BoxAndWhiskerData()
164 | ```
165 |
166 | Represents a box and whisker in a box and whisker chart.
167 |
168 | **Attributes**:
169 |
170 | - `label` _str_ - The label of the box and whisker
171 | - `min` _float_ - The minimum value of the box and whisker
172 | - `first_quartile` _float_ - The first quartile of the box and whisker
173 | - `median` _float_ - The median of the box and whisker
174 | - `third_quartile` _float_ - The third quartile of the box and whisker
175 | - `max` _float_ - The maximum value of the box and whisker
176 | - `outliers` _List[float]_ - The outliers of the box and whisker
177 |
178 | ## BoxAndWhiskerChart
179 |
180 | ```python
181 | class BoxAndWhiskerChart(Chart2D)
182 | ```
183 |
184 | Represents a box and whisker chart with metadata.
185 |
186 | **Attributes**:
187 |
188 | - `type` _ChartType_ - The type of chart
189 | - `elements` _List[BoxAndWhiskerData]_ - The box and whiskers of the chart
190 |
191 | ## CompositeChart
192 |
193 | ```python
194 | class CompositeChart(Chart)
195 | ```
196 |
197 | Represents a composite chart with metadata. A composite chart is a chart
198 | that contains multiple charts (subplots).
199 |
200 | **Attributes**:
201 |
202 | - `type` _ChartType_ - The type of chart
203 | - `elements` _List[Chart]_ - The charts (subplots) of the composite chart
204 |


--------------------------------------------------------------------------------
/src/content/docs/python-sdk/code-run-params.mdx:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: ""
 3 | ---
 4 |
 5 | ## CodeRunParams
 6 |
 7 | ```python
 8 | @dataclass
 9 | class CodeRunParams()
10 | ```
11 |
12 | Parameters for code execution.
13 |
14 | **Attributes**:
15 |
16 | - `argv` _Optional[List[str]]_ - Command line arguments
17 | - `env` _Optional[Dict[str, str]]_ - Environment variables
18 |


--------------------------------------------------------------------------------
/src/content/docs/python-sdk/errors.mdx:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: ""
 3 | ---
 4 |
 5 | ## DaytonaError
 6 |
 7 | ```python
 8 | class DaytonaError(Exception)
 9 | ```
10 |
11 | Base error for Daytona SDK.
12 |
13 |
14 |


--------------------------------------------------------------------------------
/src/content/docs/python-sdk/execute-response.mdx:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: ""
 3 | ---
 4 |
 5 | ## ExecuteResponse
 6 |
 7 | ```python
 8 | class ExecuteResponse(ClientExecuteResponse)
 9 | ```
10 |
11 | Response from the command execution.
12 |
13 | **Attributes**:
14 |
15 | - `exit_code` _int_ - The exit code from the command execution
16 | - `result` _str_ - The output from the command execution
17 | - `artifacts` _Optional[ExecutionArtifacts]_ - Artifacts from the command execution
18 |
19 | ## ExecutionArtifacts
20 |
21 | ```python
22 | class ExecutionArtifacts()
23 | ```
24 |
25 | Artifacts from the command execution.
26 |
27 | **Attributes**:
28 |
29 | - `stdout` _str_ - Standard output from the command, same as `result` in `ExecuteResponse`
30 | - `charts` _Optional[List[Chart]]_ - List of chart metadata from matplotlib
31 |


--------------------------------------------------------------------------------
/src/content/docs/python-sdk/git.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: ""
  3 | ---
  4 |
  5 | ## Git
  6 |
  7 | ```python
  8 | class Git()
  9 | ```
 10 |
 11 | Provides Git operations within a Sandbox.
 12 |
 13 | **Attributes**:
 14 |
 15 | - `sandbox` _Sandbox_ - The parent Sandbox instance.
 16 | - `instance` _SandboxInstance_ - The Sandbox instance this Git handler belongs to.
 17 |
 18 | **Example**:
 19 |
 20 | ```python
 21 | # Clone a repository
 22 | sandbox.git.clone(
 23 |     url="https://github.com/user/repo.git",
 24 |     path="/workspace/repo"
 25 | )
 26 |
 27 | # Check repository status
 28 | status = sandbox.git.status("/workspace/repo")
 29 | print(f"Modified files: {status.modified}")
 30 |
 31 | # Stage and commit changes
 32 | sandbox.git.add("/workspace/repo", ["file.txt"])
 33 | sandbox.git.commit(
 34 |     path="/workspace/repo",
 35 |     message="Update file",
 36 |     author="John Doe",
 37 |     email="john@example.com"
 38 | )
 39 | ```
 40 |
 41 | #### Git.\_\_init\_\_
 42 |
 43 | ```python
 44 | def __init__(sandbox: "Sandbox", toolbox_api: ToolboxApi,
 45 |              instance: SandboxInstance)
 46 | ```
 47 |
 48 | Initializes a new Git handler instance.
 49 |
 50 | **Arguments**:
 51 |
 52 | - `sandbox` _Sandbox_ - The parent Sandbox instance.
 53 | - `toolbox_api` _ToolboxApi_ - API client for Sandbox operations.
 54 | - `instance` _SandboxInstance_ - The Sandbox instance this Git handler belongs to.
 55 |
 56 | #### Git.add
 57 |
 58 | ```python
 59 | @intercept_errors(message_prefix="Failed to add files: ")
 60 | def add(path: str, files: List[str]) -> None
 61 | ```
 62 |
 63 | Stages the specified files for the next commit, similar to
 64 | running 'git add' on the command line.
 65 |
 66 | **Arguments**:
 67 |
 68 | - `path` _str_ - Absolute path to the Git repository root.
 69 | - `files` _List[str]_ - List of file paths or directories to stage, relative to the repository root.
 70 |
 71 | **Example**:
 72 |
 73 | ```python
 74 | # Stage a single file
 75 | sandbox.git.add("/workspace/repo", ["file.txt"])
 76 |
 77 | # Stage multiple files
 78 | sandbox.git.add("/workspace/repo", [
 79 |     "src/main.py",
 80 |     "tests/test_main.py",
 81 |     "README.md"
 82 | ])
 83 | ```
 84 |
 85 | #### Git.branches
 86 |
 87 | ```python
 88 | @intercept_errors(message_prefix="Failed to list branches: ")
 89 | def branches(path: str) -> ListBranchResponse
 90 | ```
 91 |
 92 | Lists branches in the repository.
 93 |
 94 | **Arguments**:
 95 |
 96 | - `path` _str_ - Absolute path to the Git repository root.
 97 |
 98 | **Returns**:
 99 |
100 | - `ListBranchResponse` - List of branches in the repository.
101 |
102 | **Example**:
103 |
104 | ```python
105 | response = sandbox.git.branches("/workspace/repo")
106 | print(f"Branches: {response.branches}")
107 | ```
108 |
109 | #### Git.clone
110 |
111 | ```python
112 | @intercept_errors(message_prefix="Failed to clone repository: ")
113 | def clone(url: str,
114 |           path: str,
115 |           branch: Optional[str] = None,
116 |           commit_id: Optional[str] = None,
117 |           username: Optional[str] = None,
118 |           password: Optional[str] = None) -> None
119 | ```
120 |
121 | Clones a Git repository into the specified path. It supports
122 | cloning specific branches or commits, and can authenticate with the remote
123 | repository if credentials are provided.
124 |
125 | **Arguments**:
126 |
127 | - `url` _str_ - Repository URL to clone from.
128 | - `path` _str_ - Absolute path where the repository should be cloned.
129 | - `branch` _Optional[str]_ - Specific branch to clone. If not specified,
130 |   clones the default branch.
131 | - `commit_id` _Optional[str]_ - Specific commit to clone. If specified,
132 |   the repository will be left in a detached HEAD state at this commit.
133 | - `username` _Optional[str]_ - Git username for authentication.
134 | - `password` _Optional[str]_ - Git password or token for authentication.
135 |
136 | **Example**:
137 |
138 | ```python
139 | # Clone the default branch
140 | sandbox.git.clone(
141 |     url="https://github.com/user/repo.git",
142 |     path="/workspace/repo"
143 | )
144 |
145 | # Clone a specific branch with authentication
146 | sandbox.git.clone(
147 |     url="https://github.com/user/private-repo.git",
148 |     path="/workspace/private",
149 |     branch="develop",
150 |     username="user",
151 |     password="token"
152 | )
153 |
154 | # Clone a specific commit
155 | sandbox.git.clone(
156 |     url="https://github.com/user/repo.git",
157 |     path="/workspace/repo-old",
158 |     commit_id="abc123"
159 | )
160 | ```
161 |
162 | #### Git.commit
163 |
164 | ```python
165 | @intercept_errors(message_prefix="Failed to commit changes: ")
166 | def commit(path: str, message: str, author: str,
167 |            email: str) -> GitCommitResponse
168 | ```
169 |
170 | Creates a new commit with the staged changes. Make sure to stage
171 | changes using the add() method before committing.
172 |
173 | **Arguments**:
174 |
175 | - `path` _str_ - Absolute path to the Git repository root.
176 | - `message` _str_ - Commit message describing the changes.
177 | - `author` _str_ - Name of the commit author.
178 | - `email` _str_ - Email address of the commit author.
179 |
180 | **Example**:
181 |
182 | ```python
183 | # Stage and commit changes
184 | sandbox.git.add("/workspace/repo", ["README.md"])
185 | sandbox.git.commit(
186 |     path="/workspace/repo",
187 |     message="Update documentation",
188 |     author="John Doe",
189 |     email="john@example.com"
190 | )
191 | ```
192 |
193 | #### Git.push
194 |
195 | ```python
196 | @intercept_errors(message_prefix="Failed to push changes: ")
197 | def push(path: str,
198 |          username: Optional[str] = None,
199 |          password: Optional[str] = None) -> None
200 | ```
201 |
202 | Pushes all local commits on the current branch to the remote
203 | repository. If the remote repository requires authentication, provide
204 | username and password/token.
205 |
206 | **Arguments**:
207 |
208 | - `path` _str_ - Absolute path to the Git repository root.
209 | - `username` _Optional[str]_ - Git username for authentication.
210 | - `password` _Optional[str]_ - Git password or token for authentication.
211 |
212 | **Example**:
213 |
214 | ```python
215 | # Push without authentication (for public repos or SSH)
216 | sandbox.git.push("/workspace/repo")
217 |
218 | # Push with authentication
219 | sandbox.git.push(
220 |     path="/workspace/repo",
221 |     username="user",
222 |     password="github_token"
223 | )
224 | ```
225 |
226 | #### Git.pull
227 |
228 | ```python
229 | @intercept_errors(message_prefix="Failed to pull changes: ")
230 | def pull(path: str,
231 |          username: Optional[str] = None,
232 |          password: Optional[str] = None) -> None
233 | ```
234 |
235 | Pulls changes from the remote repository. If the remote repository requires authentication,
236 | provide username and password/token.
237 |
238 | **Arguments**:
239 |
240 | - `path` _str_ - Absolute path to the Git repository root.
241 | - `username` _Optional[str]_ - Git username for authentication.
242 | - `password` _Optional[str]_ - Git password or token for authentication.
243 |
244 | **Example**:
245 |
246 | ```python
247 | # Pull without authentication
248 | sandbox.git.pull("/workspace/repo")
249 |
250 | # Pull with authentication
251 | sandbox.git.pull(
252 |     path="/workspace/repo",
253 |     username="user",
254 |     password="github_token"
255 | )
256 | ```
257 |
258 | #### Git.status
259 |
260 | ```python
261 | @intercept_errors(message_prefix="Failed to get status: ")
262 | def status(path: str) -> GitStatus
263 | ```
264 |
265 | Gets the current Git repository status.
266 |
267 | **Arguments**:
268 |
269 | - `path` _str_ - Absolute path to the Git repository root.
270 |
271 | **Returns**:
272 |
273 | - `GitStatus` - Repository status information including:
274 |   - current_branch: Current branch name
275 |   - file_status: List of file statuses
276 |   - ahead: Number of local commits not pushed to remote
277 |   - behind: Number of remote commits not pulled locally
278 |   - branch_published: Whether the branch has been published to the remote repository
279 |
280 | **Example**:
281 |
282 | ```python
283 | status = sandbox.git.status("/workspace/repo")
284 | print(f"On branch: {status.current_branch}")
285 | print(f"Commits ahead: {status.ahead}")
286 | print(f"Commits behind: {status.behind}")
287 | ```
288 |
289 | ## GitCommitResponse
290 |
291 | ```python
292 | class GitCommitResponse()
293 | ```
294 |
295 | Response from the git commit.
296 |
297 | **Attributes**:
298 |
299 | - `sha` _str_ - The SHA of the commit
300 |


--------------------------------------------------------------------------------
/src/content/docs/python-sdk/index.mdx:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: Python SDK Reference
 3 | description: Interact with Daytona Sandboxes using the Python SDK
 4 | next: /docs/python-sdk/daytona
 5 | ---
 6 |
 7 | The Daytona Python SDK provides a robust interface for programmatically interacting with Daytona Sandboxes.
 8 |
 9 | ## Installation
10 |
11 | Install the Daytona Python SDK using pip:
12 |
13 | ```bash
14 | pip install daytona_sdk
15 | ```
16 |
17 | Or using poetry:
18 |
19 | ```bash
20 | poetry add daytona_sdk
21 | ```
22 |
23 | ## Getting Started
24 |
25 | Here's a simple example to help you get started with the Daytona Python SDK:
26 |
27 | ```python
28 | from daytona_sdk import Daytona, CreateSandboxParams
29 |
30 | def main():
31 |     # Initialize the SDK (uses environment variables by default)
32 |     daytona = Daytona()
33 |
34 |     # Create a new sandbox
35 |     sandbox = daytona.create(CreateSandboxParams(
36 |         language="python",
37 |         env_vars={"PYTHON_ENV": "development"}
38 |     ))
39 |
40 |     # Execute a command
41 |     response = sandbox.process.exec("echo 'Hello, World!'")
42 |     print(response.result)
43 |
44 | if __name__ == "__main__":
45 |     main()
46 | ```
47 |
48 | ## Configuration
49 |
50 | The SDK can be configured using environment variables or by passing options to the constructor:
51 |
52 | ```python
53 | from daytona_sdk import Daytona, DaytonaConfig, SandboxTargetRegion
54 |
55 | # Using environment variables (DAYTONA_API_KEY, DAYTONA_SERVER_URL, DAYTONA_TARGET)
56 | daytona = Daytona()
57 |
58 | # Using explicit configuration
59 | config = DaytonaConfig(
60 |     api_key="your-api-key",
61 |     server_url="https://app.daytona.io/api",
62 |     target=SandboxTargetRegion.US
63 | )
64 | daytona = Daytona(config)
65 | ```
66 |


--------------------------------------------------------------------------------
/src/content/docs/python-sdk/lsp-server.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: ""
  3 | ---
  4 |
  5 | ## LspServer
  6 |
  7 | ```python
  8 | class LspServer()
  9 | ```
 10 |
 11 | Provides Language Server Protocol functionality for code intelligence to provide
 12 | IDE-like features such as code completion, symbol search, and more.
 13 |
 14 | **Attributes**:
 15 |
 16 | - `language_id` _LspLanguageId_ - The language server type (e.g., "python", "typescript").
 17 | - `path_to_project` _str_ - Absolute path to the project root directory.
 18 | - `instance` _SandboxInstance_ - The Sandbox instance this server belongs to.
 19 |
 20 | #### LspServer.\_\_init\_\_
 21 |
 22 | ```python
 23 | def __init__(language_id: LspLanguageId, path_to_project: str,
 24 |              toolbox_api: ToolboxApi, instance: SandboxInstance)
 25 | ```
 26 |
 27 | Initializes a new LSP server instance.
 28 |
 29 | **Arguments**:
 30 |
 31 | - `language_id` _LspLanguageId_ - The language server type (e.g., LspLanguageId.TYPESCRIPT).
 32 | - `path_to_project` _str_ - Absolute path to the project root directory.
 33 | - `toolbox_api` _ToolboxApi_ - API client for Sandbox operations.
 34 | - `instance` _SandboxInstance_ - The Sandbox instance this server belongs to.
 35 |
 36 | #### LspServer.start
 37 |
 38 | ```python
 39 | @intercept_errors(message_prefix="Failed to start LSP server: ")
 40 | def start() -> None
 41 | ```
 42 |
 43 | Starts the language server.
 44 |
 45 | This method must be called before using any other LSP functionality.
 46 | It initializes the language server for the specified language and project.
 47 |
 48 | **Example**:
 49 |
 50 | ```python
 51 | lsp = sandbox.create_lsp_server("typescript", "/workspace/project")
 52 | lsp.start()  # Initialize the server
 53 | # Now ready for LSP operations
 54 | ```
 55 |
 56 | #### LspServer.stop
 57 |
 58 | ```python
 59 | @intercept_errors(message_prefix="Failed to stop LSP server: ")
 60 | def stop() -> None
 61 | ```
 62 |
 63 | Stops the language server.
 64 |
 65 | This method should be called when the LSP server is no longer needed to
 66 | free up system resources.
 67 |
 68 | **Example**:
 69 |
 70 | ```python
 71 | # When done with LSP features
 72 | lsp.stop()  # Clean up resources
 73 | ```
 74 |
 75 | #### LspServer.did\_open
 76 |
 77 | ```python
 78 | @intercept_errors(message_prefix="Failed to open file: ")
 79 | def did_open(path: str) -> None
 80 | ```
 81 |
 82 | Notifies the language server that a file has been opened.
 83 |
 84 | This method should be called when a file is opened in the editor to enable
 85 | language features like diagnostics and completions for that file. The server
 86 | will begin tracking the file's contents and providing language features.
 87 |
 88 | **Arguments**:
 89 |
 90 | - `path` _str_ - Absolute path to the opened file.
 91 |
 92 |
 93 | **Example**:
 94 |
 95 | ```python
 96 | # When opening a file for editing
 97 | lsp.did_open("/workspace/project/src/index.ts")
 98 | # Now can get completions, symbols, etc. for this file
 99 | ```
100 |
101 | #### LspServer.did\_close
102 |
103 | ```python
104 | @intercept_errors(message_prefix="Failed to close file: ")
105 | def did_close(path: str) -> None
106 | ```
107 |
108 | Notify the language server that a file has been closed.
109 |
110 | This method should be called when a file is closed in the editor to allow
111 | the language server to clean up any resources associated with that file.
112 |
113 | **Arguments**:
114 |
115 | - `path` _str_ - Absolute path to the closed file.
116 |
117 |
118 | **Example**:
119 |
120 | ```python
121 | # When done editing a file
122 | lsp.did_close("/workspace/project/src/index.ts")
123 | ```
124 |
125 | #### LspServer.document\_symbols
126 |
127 | ```python
128 | @intercept_errors(message_prefix="Failed to get symbols from document: ")
129 | def document_symbols(path: str) -> List[LspSymbol]
130 | ```
131 |
132 | Gets symbol information (functions, classes, variables, etc.) from a document.
133 |
134 | **Arguments**:
135 |
136 | - `path` _str_ - Absolute path to the file to get symbols from.
137 |
138 |
139 | **Returns**:
140 |
141 | - `List[LspSymbol]` - List of symbols in the document. Each symbol includes:
142 |   - name: The symbol's name
143 |   - kind: The symbol's kind (function, class, variable, etc.)
144 |   - location: The location of the symbol in the file
145 |
146 |
147 | **Example**:
148 |
149 | ```python
150 | # Get all symbols in a file
151 | symbols = lsp.document_symbols("/workspace/project/src/index.ts")
152 | for symbol in symbols:
153 |     print(f"{symbol.kind} {symbol.name}: {symbol.location}")
154 | ```
155 |
156 | #### LspServer.workspace\_symbols
157 |
158 | ```python
159 | @deprecated(
160 |     reason=
161 |     "Method is deprecated. Use `sandbox_symbols` instead. This method will be removed in a future version."
162 | )
163 | def workspace_symbols(query: str) -> List[LspSymbol]
164 | ```
165 |
166 | Searches for symbols matching the query string across all files
167 | in the Sandbox.
168 |
169 | **Arguments**:
170 |
171 | - `query` _str_ - Search query to match against symbol names.
172 |
173 |
174 | **Returns**:
175 |
176 | - `List[LspSymbol]` - List of matching symbols from all files.
177 |
178 | #### LspServer.sandbox\_symbols
179 |
180 | ```python
181 | @intercept_errors(message_prefix="Failed to get symbols from sandbox: ")
182 | def sandbox_symbols(query: str) -> List[LspSymbol]
183 | ```
184 |
185 | Searches for symbols matching the query string across all files
186 | in the Sandbox.
187 |
188 | **Arguments**:
189 |
190 | - `query` _str_ - Search query to match against symbol names.
191 |
192 |
193 | **Returns**:
194 |
195 | - `List[LspSymbol]` - List of matching symbols from all files. Each symbol
196 |   includes:
197 |   - name: The symbol's name
198 |   - kind: The symbol's kind (function, class, variable, etc.)
199 |   - location: The location of the symbol in the file
200 |
201 |
202 | **Example**:
203 |
204 | ```python
205 | # Search for all symbols containing "User"
206 | symbols = lsp.sandbox_symbols("User")
207 | for symbol in symbols:
208 |     print(f"{symbol.name} in {symbol.location}")
209 | ```
210 |
211 | #### LspServer.completions
212 |
213 | ```python
214 | @intercept_errors(message_prefix="Failed to get completions: ")
215 | def completions(path: str, position: Position) -> CompletionList
216 | ```
217 |
218 | Gets completion suggestions at a position in a file.
219 |
220 | **Arguments**:
221 |
222 | - `path` _str_ - Absolute path to the file.
223 | - `position` _Position_ - Cursor position to get completions for.
224 |
225 |
226 | **Returns**:
227 |
228 | - `CompletionList` - List of completion suggestions. The list includes:
229 |   - isIncomplete: Whether more items might be available
230 |   - items: List of completion items, each containing:
231 |   - label: The text to insert
232 |   - kind: The kind of completion
233 |   - detail: Additional details about the item
234 |   - documentation: Documentation for the item
235 |   - sortText: Text used to sort the item in the list
236 |   - filterText: Text used to filter the item
237 |   - insertText: The actual text to insert (if different from label)
238 |
239 |
240 | **Example**:
241 |
242 | ```python
243 | # Get completions at a specific position
244 | pos = Position(line=10, character=15)
245 | completions = lsp.completions("/workspace/project/src/index.ts", pos)
246 | for item in completions.items:
247 |     print(f"{item.label} ({item.kind}): {item.detail}")
248 | ```
249 |
250 |
251 | ## LspLanguageId
252 |
253 | ```python
254 | class LspLanguageId(Enum)
255 | ```
256 |
257 | Language IDs for Language Server Protocol (LSP).
258 |
259 | **Enum Members**:
260 |     - `PYTHON` ("python")
261 |     - `TYPESCRIPT` ("typescript")
262 |     - `JAVASCRIPT` ("javascript")
263 |
264 | ## Position
265 |
266 | ```python
267 | class Position()
268 | ```
269 |
270 | Represents a zero-based position in a text document,
271 | specified by line number and character offset.
272 |
273 | **Attributes**:
274 |
275 | - `line` _int_ - Zero-based line number in the document.
276 | - `character` _int_ - Zero-based character offset on the line.
277 |
278 | #### Position.\_\_init\_\_
279 |
280 | ```python
281 | def __init__(line: int, character: int)
282 | ```
283 |
284 | Initialize a new Position instance.
285 |
286 | **Arguments**:
287 |
288 | - `line` _int_ - Zero-based line number in the document.
289 | - `character` _int_ - Zero-based character offset on the line.
290 |
291 |


--------------------------------------------------------------------------------
/src/content/docs/sandbox-management.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Sandbox Management
  3 | ---
  4 |
  5 | import { Tabs, TabItem } from '@astrojs/starlight/components';
  6 |
  7 | Sandboxes are isolated development environments managed by Daytona. This guide covers how to create, manage, and remove Sandboxes using the SDK.
  8 |
  9 | ## Creating Sandboxes
 10 |
 11 | Daytona SDK provides an option to create Sandboxes with default or custom configurations. You can specify the language, image, resources, environment variables, and volumes for the Sandbox.
 12 | By default, the sandboxes auto-stop after 15 minutes of inactivity. To overwrite this behavior, you can increase the auto-stop interval or set it to 0 to completely disable it.
 13 |
 14 | ### Basic Sandbox Creation
 15 |
 16 | Daytona SDK provides methods to create Sandboxes with default configurations, specific languages, or custom IDs using Python and TypeScript.
 17 |
 18 | <Tabs>
 19 | <TabItem label="Python" icon="seti:python">
 20 | ```python
 21 | from daytona_sdk import Daytona
 22 |
 23 | daytona = Daytona()
 24 |
 25 | # Create a basic Sandbox
 26 |
 27 | sandbox = daytona.create()
 28 |
 29 | # Create a Sandbox with specific language
 30 |
 31 | params = CreateSandboxParams(language="python")
 32 | sandbox = daytona.create(params)
 33 |
 34 | # Create a Sandbox with custom ID
 35 |
 36 | params = CreateSandboxParams(id="my-sandbox")
 37 | sandbox = daytona.create(params)
 38 |
 39 | ```
 40 | </TabItem>
 41 | <TabItem label="TypeScript" icon="seti:typescript">
 42 | ```typescript
 43 | import { Daytona } from '@daytonaio/sdk';
 44 |
 45 | const daytona = new Daytona();
 46 |
 47 | // Create a basic Sandbox
 48 | const sandbox = await daytona.create();
 49 |
 50 | // Create a Sandbox with specific language
 51 | const sandbox = await daytona.create({ language: 'typescript' });
 52 |
 53 | // Create a Sandbox with custom ID
 54 | const sandbox = await daytona.create({ id: 'my-sandbox' });
 55 | ```
 56 |
 57 | </TabItem>
 58 | </Tabs>
 59 |
 60 | :::note
 61 | Daytona keeps a pool of ready-to-go "warm" Sandboxes. When available, they are automatically used if a custom ID _isn't_ provided and the default image is used, reducing the creation time down to a fraction of a second.
 62 | :::
 63 |
 64 | ## Sandbox Information
 65 |
 66 | Daytona SDK provides methods to get information about a Sandbox, such as ID, root directory, and status using Python and TypeScript.
 67 |
 68 | <Tabs>
 69 | <TabItem label="Python" icon="seti:python">
 70 | ```python
 71 | # Get Sandbox ID
 72 | sandbox_id = sandbox.id
 73 |
 74 | # Get the root directory of tha Sandbox user
 75 |
 76 | root_dir = sandbox.get_user_root_dir()
 77 |
 78 | # Get the Sandbox name, image and state
 79 |
 80 | name = sandbox.instance.name
 81 | image = sandbox.instance.image
 82 | state = sandbox.instance.state
 83 |
 84 | # Get the preview link for an app running on port 3000
 85 |
 86 | preview_link = sandbox.get_preview_link(3000)
 87 |
 88 | ```
 89 | </TabItem>
 90 | <TabItem label="TypeScript" icon="seti:typescript">
 91 | ```typescript
 92 | // Get Sandbox ID
 93 | const sandboxId = sandbox.id;
 94 |
 95 | // Get the root directory of tha Sandbox user
 96 | const rootDir = await sandbox.getSandboxRootDir();
 97 |
 98 | // Get the Sandbox name, image and state
 99 | const name = sandbox.instance.name
100 | const image = sandbox.instance.image
101 | const state = sandbox.instance.state
102 |
103 | // Get the preview link for an app running on port 3000
104 | const previewLink = sandbox.getPreviewLink(3000)
105 |
106 | ```
107 |
108 | </TabItem>
109 | </Tabs>
110 |
111 | ## Remove Sandbox
112 |
113 | Daytona SDK provides methods to perform operations on Sandboxes, such as removing Sandboxes using Python and TypeScript.
114 |
115 | <Tabs>
116 | <TabItem label="Python" icon="seti:python">
117 | ```python
118 | # Remove Sandbox
119 | daytona.remove(sandbox)
120 | ```
121 | </TabItem>
122 | <TabItem label="TypeScript" icon="seti:typescript">
123 | ```typescript
124 | // Remove Sandbox
125 | await daytona.remove(sandbox);
126 | ```
127 | </TabItem>
128 | </Tabs>
129 |
130 | :::tip
131 | Check out the [Daytona CLI](/docs/getting-started#setting-up-the-daytona-cli) if you prefer managing Sandboxes through the terminal:
132 |
133 | ```bash
134 | daytona sandbox list
135 | ```
136 |
137 | ```text
138 |
139 |     Sandbox               State           Region        Class        Last Event
140 |     ────────────────────────────────────────────────────────────────────────────────────
141 |     ugliest_quokka        STARTED         us            small        1 hour ago
142 |
143 |     associated_yak        STARTED         us            small        14 hours ago
144 |
145 |     developed_lemur       STARTED         us            small        17 hours ago
146 |
147 | ```
148 |
149 | ```bash
150 | daytona sandbox start|stop|remove --all
151 | ```
152 |
153 | ```text
154 | All sandboxes have been deleted
155 | ```
156 |
157 | :::
158 |
159 | ## Sandbox Persistence
160 |
161 | Daytona keeps the filesystem in its entirety during the Sandbox lifecycle. The persistence functionality is built into the system, and nothing needs to be explicitly done from the user side.
162 |
163 | It is important to understand the Sandbox states to maintain cost-effectiveness. A Sandbox can have three states during its lifecycle:
164 |
165 | ### Running
166 |
167 | Running Sandboxes utilize CPU, memory, and disk storage. Every resource is charged per second of usage. When Sandboxes are not actively used, it is recommended that they be stopped. This can be done:
168 |
169 | - Manually using the stop command
170 | - Automatically by setting the autoStop interval
171 |
172 | ### Stopped
173 |
174 | Stopped Sandboxes only utilize disk storage. They can be instantly started when needed. The stopped state should be used when the Sandbox is expected to be started again soon. Otherwise, it is recommended to archive the Sandbox to eliminate disk usage costs.
175 |
176 | ### Archived
177 |
178 | When Sandboxes are archived, the entire filesystem state is moved to very cost-effective object storage, making it possible to keep Sandboxes available for an extended period.
179 |
180 | ### Performance Considerations
181 |
182 | The tradeoff between archived and stopped states is that starting an archived Sandbox takes more time, depending on its size.
183 |


--------------------------------------------------------------------------------
/src/content/docs/tools/cli.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: CLI
  3 | description: A reference of supported operations using the Daytona CLI.
  4 | sidebar:
  5 |   label: Daytona CLI Reference
  6 | ---
  7 | import Aside from "@components/Aside.astro";
  8 | import Label from "@components/Label.astro";
  9 |
 10 | The `daytona` command-line tool provides access to Daytona's core features including managing images and the lifecycle of Daytona Sandboxes. View the installation instructions by clicking [here](/docs/getting-started#setting-up-the-daytona-cli).
 11 |
 12 | This reference lists all commands supported by the `daytona` command-line tool complete with a description of their behaviour, and any supported flags.
 13 | You can access this documentation on a per-command basis by appending the `--help`/`-h` flag when invoking `daytona`.
 14 |
 15 | ## daytona version
 16 |
 17 | Print the version number
 18 |
 19 | ```shell
 20 | daytona version [flags]
 21 | ```
 22 |
 23 | __Flags__
 24 | | Long | Short | Description |
 25 | | :--- | :---- | :---------- |
 26 | | `--help` |  | help for daytona |
 27 |
 28 | ## daytona sandbox info
 29 |
 30 | Get sandbox info
 31 |
 32 | ```shell
 33 | daytona sandbox info [SANDBOX_ID] [flags]
 34 | ```
 35 |
 36 | __Flags__
 37 | | Long | Short | Description |
 38 | | :--- | :---- | :---------- |
 39 | | `--format` | `-f` | Output format. Must be one of (yaml, json) |
 40 | | `--verbose` | `-v` | Include verbose output |
 41 | | `--help` |  | help for daytona |
 42 |
 43 | ## daytona sandbox list
 44 |
 45 | List sandboxes
 46 |
 47 | ```shell
 48 | daytona sandbox list [flags]
 49 | ```
 50 |
 51 | __Flags__
 52 | | Long | Short | Description |
 53 | | :--- | :---- | :---------- |
 54 | | `--format` | `-f` | Output format. Must be one of (yaml, json) |
 55 | | `--verbose` | `-v` | Include verbose output |
 56 | | `--help` |  | help for daytona |
 57 |
 58 | ## daytona sandbox start
 59 |
 60 | Start a sandbox
 61 |
 62 | ```shell
 63 | daytona sandbox start [SANDBOX_ID] [flags]
 64 | ```
 65 |
 66 | __Flags__
 67 | | Long | Short | Description |
 68 | | :--- | :---- | :---------- |
 69 | | `--all` | `-a` | Start all sandboxes |
 70 | | `--help` |  | help for daytona |
 71 |
 72 | ## daytona sandbox stop
 73 |
 74 | Stop a sandbox
 75 |
 76 | ```shell
 77 | daytona sandbox stop [SANDBOX_ID] [flags]
 78 | ```
 79 |
 80 | __Flags__
 81 | | Long | Short | Description |
 82 | | :--- | :---- | :---------- |
 83 | | `--all` | `-a` | Stop all sandboxes |
 84 | | `--help` |  | help for daytona |
 85 |
 86 | ## daytona sandbox
 87 |
 88 | Manage Daytona sandboxes
 89 |
 90 | ```shell
 91 | daytona sandbox [flags]
 92 | ```
 93 |
 94 | __Flags__
 95 | | Long | Short | Description |
 96 | | :--- | :---- | :---------- |
 97 | | `--help` |  | help for daytona |
 98 |
 99 | ## daytona sandbox create
100 |
101 | Create a new sandbox
102 |
103 | ```shell
104 | daytona sandbox create [flags]
105 | ```
106 |
107 | __Flags__
108 | | Long | Short | Description |
109 | | :--- | :---- | :---------- |
110 | | `--auto-stop` |  | Auto-stop interval in minutes (0 means disabled) |
111 | | `--class` |  | Workspace class type (small, medium, large) |
112 | | `--cpu` |  | CPU cores allocated to the sandbox |
113 | | `--disk` |  | Disk space allocated to the sandbox in GB |
114 | | `--env` | `-e` | Environment variables (format: KEY=VALUE) |
115 | | `--gpu` |  | GPU units allocated to the sandbox |
116 | | `--image` |  | Image to use for the sandbox |
117 | | `--label` | `-l` | Labels (format: KEY=VALUE) |
118 | | `--memory` |  | Memory allocated to the sandbox in MB |
119 | | `--name` |  | Name of the sandbox |
120 | | `--public` |  | Make sandbox publicly accessible |
121 | | `--target` |  | Target region (eu, us, asia) |
122 | | `--user` |  | User associated with the sandbox |
123 | | `--help` |  | help for daytona |
124 |
125 | ## daytona sandbox delete
126 |
127 | Delete a sandbox
128 |
129 | ```shell
130 | daytona sandbox delete [SANDBOX_ID] [flags]
131 | ```
132 |
133 | __Flags__
134 | | Long | Short | Description |
135 | | :--- | :---- | :---------- |
136 | | `--all` | `-a` | Delete all sandboxes |
137 | | `--force` | `-f` | Force delete |
138 | | `--help` |  | help for daytona |
139 |
140 | ## daytona image push
141 |
142 | Push local image
143 |
144 | ```shell
145 | daytona image push [IMAGE] [flags]
146 | ```
147 |
148 | __Flags__
149 | | Long | Short | Description |
150 | | :--- | :---- | :---------- |
151 | | `--dockerfile` | `-f` | Path to Dockerfile to build before pushing |
152 | | `--entrypoint` | `-e` | The entrypoint command for the image |
153 | | `--help` |  | help for daytona |
154 |
155 | ## daytona login
156 |
157 | Log in to Daytona
158 |
159 | ```shell
160 | daytona login [flags]
161 | ```
162 |
163 | __Flags__
164 | | Long | Short | Description |
165 | | :--- | :---- | :---------- |
166 | | `--help` |  | help for daytona |
167 |
168 | ## daytona logout
169 |
170 | Logout from Daytona
171 |
172 | ```shell
173 | daytona logout [flags]
174 | ```
175 |
176 | __Flags__
177 | | Long | Short | Description |
178 | | :--- | :---- | :---------- |
179 | | `--help` |  | help for daytona |
180 |
181 | ## daytona image
182 |
183 | Manage Daytona images
184 |
185 | ```shell
186 | daytona image [flags]
187 | ```
188 |
189 | __Flags__
190 | | Long | Short | Description |
191 | | :--- | :---- | :---------- |
192 | | `--help` |  | help for daytona |
193 |
194 | ## daytona image create
195 |
196 | Create an image
197 |
198 | ```shell
199 | daytona image create [IMAGE] [flags]
200 | ```
201 |
202 | __Flags__
203 | | Long | Short | Description |
204 | | :--- | :---- | :---------- |
205 | | `--entrypoint` | `-e` | The entrypoint command for the image |
206 | | `--help` |  | help for daytona |
207 |
208 | ## daytona image delete
209 |
210 | Delete an image
211 |
212 | ```shell
213 | daytona image delete [IMAGE_ID] [flags]
214 | ```
215 |
216 | __Flags__
217 | | Long | Short | Description |
218 | | :--- | :---- | :---------- |
219 | | `--all` | `-a` | Delete all images |
220 | | `--help` |  | help for daytona |
221 |
222 | ## daytona image list
223 |
224 | List all images
225 |
226 | ```shell
227 | daytona image list [flags]
228 | ```
229 |
230 | __Flags__
231 | | Long | Short | Description |
232 | | :--- | :---- | :---------- |
233 | | `--format` | `-f` | Output format. Must be one of (yaml, json) |
234 | | `--help` |  | help for daytona |
235 |
236 | ## daytona
237 |
238 | Daytona CLI
239 |
240 | ```shell
241 | daytona [flags]
242 | ```
243 |
244 | __Flags__
245 | | Long | Short | Description |
246 | | :--- | :---- | :---------- |
247 | | `--help` |  | help for daytona |
248 | | `--version` | `-v` | Display the version of Daytona |
249 |
250 | ## daytona autocomplete
251 |
252 | Adds a completion script for your shell environment
253 |
254 | ```shell
255 | daytona autocomplete [bash|zsh|fish|powershell] [flags]
256 | ```
257 |
258 | __Flags__
259 | | Long | Short | Description |
260 | | :--- | :---- | :---------- |
261 | | `--help` |  | help for daytona |
262 |
263 | <Aside type="note">
264 | If using bash shell environment, make sure you have bash-completion installed in order to get full autocompletion functionality.
265 | Linux Installation: ```sudo apt-get install bash-completion```
266 | macOS Installation: ```brew install bash-completion```
267 | </Aside>
268 |
269 | ## daytona docs
270 |
271 | Opens the Daytona documentation in your default browser.
272 |
273 | ```shell
274 | daytona docs [flags]
275 | ```
276 |
277 | __Flags__
278 | | Long | Short | Description |
279 | | :--- | :---- | :---------- |
280 | | `--help` |  | help for daytona |
281 |


--------------------------------------------------------------------------------
/src/content/docs/typescript-sdk/charts.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: ""
  3 | ---
  4 |
  5 |
  6 | ## ChartType
  7 |
  8 | Chart types
  9 |
 10 | **Enum Members**:
 11 |
 12 | - `BAR` ("bar")
 13 | - `LINE` ("line")
 14 | - `PIE` ("pie")
 15 | - `SCATTER` ("scatter")
 16 | - `UNKNOWN` ("unknown")
 17 |
 18 | ## parseChart()
 19 |
 20 | ```ts
 21 | function parseChart(data: any): Chart
 22 | ```
 23 |
 24 | **Parameters**:
 25 |
 26 | - `data` _any_
 27 |
 28 | **Returns**:
 29 |
 30 | - `Chart`
 31 |
 32 | ***
 33 |
 34 | ## BarChart
 35 |
 36 | ```ts
 37 | type BarChart = Chart2D & {
 38 |   elements: BarData[];
 39 |   type: BAR;
 40 | };
 41 | ```
 42 |
 43 | Represents a bar chart with metadata.
 44 |
 45 | **Type declaration**:
 46 |
 47 | - `elements` _BarData\[\]_ - The bars of the chart
 48 | - `type` _BAR_ - The type of chart
 49 |
 50 | ## BarData
 51 |
 52 | ```ts
 53 | type BarData = {
 54 |   group: string;
 55 |   label: string;
 56 |   value: string;
 57 | };
 58 | ```
 59 |
 60 | Represents a bar in a bar chart.
 61 |
 62 | **Type declaration**:
 63 |
 64 | - `group` _string_ - The group of the bar
 65 | - `label` _string_ - The label of the bar
 66 | - `value` _string_ - The value of the bar
 67 |
 68 | ## BoxAndWhiskerChart
 69 |
 70 | ```ts
 71 | type BoxAndWhiskerChart = Chart2D & {
 72 |   elements: BoxAndWhiskerData[];
 73 |   type: BOX_AND_WHISKER;
 74 | };
 75 | ```
 76 |
 77 | Represents a box and whisker chart with metadata.
 78 |
 79 | **Type declaration**:
 80 |
 81 | - `elements` _BoxAndWhiskerData\[\]_ - The box and whiskers of the chart
 82 | - `type` _BOX\_AND\_WHISKER_ - The type of chart
 83 |
 84 | ## BoxAndWhiskerData
 85 |
 86 | ```ts
 87 | type BoxAndWhiskerData = {
 88 |   first_quartile: number;
 89 |   label: string;
 90 |   max: number;
 91 |   median: number;
 92 |   min: number;
 93 |   outliers: number[];
 94 | };
 95 | ```
 96 |
 97 | Represents a box and whisker in a box and whisker chart.
 98 |
 99 | **Type declaration**:
100 |
101 | - `first\_quartile` _number_ - The first quartile of the box and whisker
102 | - `label` _string_ - The label of the box and whisker
103 | - `max` _number_ - The third quartile of the box and whisker
104 | - `median` _number_ - The median of the box and whisker
105 | - `min` _number_ - The minimum value of the box and whisker
106 | - `outliers` _number\[\]_
107 |
108 | ## Chart
109 |
110 | ```ts
111 | type Chart = {
112 |   elements: any[];
113 |   png: string;
114 |   title: string;
115 |   type: ChartType;
116 | };
117 | ```
118 |
119 | Represents a chart with metadata from matplotlib.
120 |
121 | **Type declaration**:
122 |
123 | - `elements` _any\[\]_ - The elements of the chart
124 | - `png?` _string_ - The PNG representation of the chart encoded in base64
125 | - `title` _string_ - The title of the chart
126 | - `type` _ChartType_ - The type of chart
127 |
128 | ## Chart2D
129 |
130 | ```ts
131 | type Chart2D = Chart & {
132 |   x_label: string;
133 |   y_label: string;
134 | };
135 | ```
136 |
137 | Represents a 2D chart with metadata.
138 |
139 | **Type declaration**:
140 |
141 | - `x\_label?` _string_ - The label of the x-axis
142 | - `y\_label?` _string_ - The label of the y-axis
143 |
144 | ## CompositeChart
145 |
146 | ```ts
147 | type CompositeChart = Chart & {
148 |   elements: Chart[];
149 |   type: COMPOSITE_CHART;
150 | };
151 | ```
152 |
153 | Represents a composite chart with metadata.
154 |
155 | **Type declaration**:
156 |
157 | - `elements` _Chart\[\]_ - The charts of the composite chart
158 | - `type` _COMPOSITE\_CHART_ - The type of chart
159 |
160 | ## LineChart
161 |
162 | ```ts
163 | type LineChart = PointChart & {
164 |   type: LINE;
165 | };
166 | ```
167 |
168 | Represents a line chart with metadata.
169 |
170 | **Type declaration**:
171 |
172 | - `type` _LINE_ - The type of chart
173 |
174 | ## PieChart
175 |
176 | ```ts
177 | type PieChart = Chart & {
178 |   elements: PieData[];
179 |   type: PIE;
180 | };
181 | ```
182 |
183 | Represents a pie chart with metadata.
184 |
185 | **Type declaration**:
186 |
187 | - `elements` _PieData\[\]_ - The pie slices of the chart
188 | - `type` _PIE_ - The type of chart
189 |
190 | ## PieData
191 |
192 | ```ts
193 | type PieData = {
194 |   angle: number;
195 |   label: string;
196 |   radius: number;
197 | };
198 | ```
199 |
200 | Represents a pie slice in a pie chart.
201 |
202 | **Type declaration**:
203 |
204 | - `angle` _number_ - The angle of the pie slice
205 | - `label` _string_ - The label of the pie slice
206 | - `radius` _number_ - The radius of the pie slice
207 |
208 | ## PointChart
209 |
210 | ```ts
211 | type PointChart = Chart2D & {
212 |   elements: PointData[];
213 |   x_scale: string;
214 |   x_tick_labels: string[];
215 |   x_ticks: (number | string)[];
216 |   y_scale: string;
217 |   y_tick_labels: string[];
218 |   y_ticks: (number | string)[];
219 | };
220 | ```
221 |
222 | Represents a point chart with metadata.
223 |
224 | **Type declaration**:
225 |
226 | - `elements` _PointData\[\]_ - The points of the chart
227 | - `x\_scale` _string_ - The scale of the x-axis
228 | - `x\_tick\_labels` _string\[\]_ - The labels of the x-axis
229 | - `x\_ticks` _\(number \| string\)\[\]_ - The ticks of the x-axis
230 | - `y\_scale` _string_ - The scale of the y-axis
231 | - `y\_tick\_labels` _string\[\]_ - The labels of the y-axis
232 | - `y\_ticks` _\(number \| string\)\[\]_ - The ticks of the y-axis
233 |
234 | ## PointData
235 |
236 | ```ts
237 | type PointData = {
238 |   label: string;
239 |   points: [number | string, number | string][];
240 | };
241 | ```
242 |
243 | Represents a point in a 2D chart.
244 |
245 | **Type declaration**:
246 |
247 | - `label` _string_ - The label of the point
248 | - `points` _\[number \| string, number \| string\]\[\]_ - The points of the chart
249 |
250 | ## ScatterChart
251 |
252 | ```ts
253 | type ScatterChart = PointChart & {
254 |   type: SCATTER;
255 | };
256 | ```
257 |
258 | Represents a scatter chart with metadata.
259 |
260 | **Type declaration**:
261 |
262 | - `type` _SCATTER_ - The type of chart
263 |


--------------------------------------------------------------------------------
/src/content/docs/typescript-sdk/daytona.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: ""
  3 | ---
  4 |
  5 |
  6 | ## Daytona
  7 |
  8 | Main class for interacting with the Daytona API.
  9 |
 10 | Provides methods for creating, managing, and interacting with Daytona Sandboxes.
 11 | Can be initialized either with explicit configuration or using environment variables.
 12 |
 13 | **Examples:**
 14 |
 15 | ```ts
 16 | // Using environment variables
 17 | // Uses DAYTONA_API_KEY, DAYTONA_API_URL, DAYTONA_TARGET
 18 | const daytona = new Daytona();
 19 | const sandbox = await daytona.create();
 20 | ```
 21 |
 22 | ```ts
 23 | // Using explicit configuration
 24 | const config: DaytonaConfig = {
 25 |     apiKey: "your-api-key",
 26 |     apiUrl: "https://your-api.com",
 27 |     target: "us"
 28 | };
 29 | const daytona = new Daytona(config);
 30 |
 31 | @class
 32 | ```
 33 |
 34 | ### Constructors
 35 |
 36 | #### new Daytona()
 37 |
 38 | ```ts
 39 | new Daytona(config?: DaytonaConfig): Daytona
 40 | ```
 41 |
 42 | Creates a new Daytona client instance.
 43 |
 44 | **Parameters**:
 45 |
 46 | - `config?` _DaytonaConfig_ - Configuration options
 47 |
 48 |
 49 | **Returns**:
 50 |
 51 | - `Daytona`
 52 |
 53 | **Throws**:
 54 |
 55 | - `DaytonaError` - When API key is missing
 56 |
 57 | ### Methods
 58 |
 59 | #### create()
 60 |
 61 | ```ts
 62 | create(params?: CreateSandboxParams, timeout?: number): Promise<Sandbox>
 63 | ```
 64 |
 65 | Creates Sandboxes with default or custom configurations. You can specify various parameters,
 66 | including language, image, resources, environment variables, and volumes for the Sandbox.
 67 |
 68 | **Parameters**:
 69 |
 70 | - `params?` _CreateSandboxParams_ - Parameters for Sandbox creation
 71 | - `timeout?` _number = 60_ - Timeout in seconds (0 means no timeout, default is 60)
 72 |
 73 |
 74 | **Returns**:
 75 |
 76 | - `Promise<Sandbox>` - The created Sandbox instance
 77 |
 78 | **Examples:**
 79 |
 80 | ```ts
 81 | // Create a default sandbox
 82 | const sandbox = await daytona.create();
 83 | ```
 84 |
 85 | ```ts
 86 | // Create a custom sandbox
 87 | const params: CreateSandboxParams = {
 88 |     language: 'typescript',
 89 |     image: 'node:18',
 90 |     envVars: {
 91 |         NODE_ENV: 'development',
 92 |         DEBUG: 'true'
 93 |     },
 94 |     resources: {
 95 |         cpu: 2,
 96 |         memory: 4 // 4GB RAM
 97 |     },
 98 |     autoStopInterval: 60
 99 | };
100 | const sandbox = await daytona.create(params, 40);
101 | ```
102 |
103 | ***
104 |
105 | #### get()
106 |
107 | ```ts
108 | get(sandboxId: string): Promise<Sandbox>
109 | ```
110 |
111 | Gets a Sandbox by its ID.
112 |
113 | **Parameters**:
114 |
115 | - `sandboxId` _string_ - The ID of the Sandbox to retrieve
116 |
117 |
118 | **Returns**:
119 |
120 | - `Promise<Sandbox>` - The Sandbox
121 |
122 | **Example:**
123 |
124 | ```ts
125 | const sandbox = await daytona.get('my-sandbox-id');
126 | console.log(`Sandbox state: ${sandbox.instance.state}`);
127 | ```
128 |
129 | ***
130 |
131 | #### getCurrentSandbox()
132 |
133 | ```ts
134 | getCurrentSandbox(sandboxId: string): Promise<Sandbox>
135 | ```
136 |
137 | Gets the Sandbox by ID.
138 |
139 | **Parameters**:
140 |
141 | - `sandboxId` _string_ - The ID of the Sandbox to retrieve
142 |
143 |
144 | **Returns**:
145 |
146 | - `Promise<Sandbox>` - The Sandbox
147 |
148 | **Example:**
149 |
150 | ```ts
151 | const sandbox = await daytona.getCurrentSandbox('my-sandbox-id');
152 | console.log(`Current sandbox state: ${sandbox.instance.state}`);
153 | ```
154 |
155 | ***
156 |
157 | #### ~~getCurrentWorkspace()~~
158 |
159 | ```ts
160 | getCurrentWorkspace(workspaceId: string): Promise<Sandbox>
161 | ```
162 |
163 | Gets the Sandbox by ID.
164 |
165 | **Parameters**:
166 |
167 | - `workspaceId` _string_ - The ID of the Sandbox to retrieve
168 |
169 |
170 | **Returns**:
171 |
172 | - `Promise<Sandbox>` - The Sandbox
173 |
174 | ##### Deprecated
175 |
176 | Use `getCurrentSandbox` instead. This method will be removed in a future version.
177 |
178 | ***
179 |
180 | #### list()
181 |
182 | ```ts
183 | list(): Promise<Sandbox[]>
184 | ```
185 |
186 | Lists all Sandboxes.
187 |
188 | **Returns**:
189 |
190 | - `Promise<Sandbox[]>` - Array of Sandboxes
191 |
192 | **Example:**
193 |
194 | ```ts
195 | const sandboxes = await daytona.list();
196 | for (const sandbox of sandboxes) {
197 |     console.log(`${sandbox.id}: ${sandbox.instance.state}`);
198 | }
199 | ```
200 |
201 | ***
202 |
203 | #### remove()
204 |
205 | ```ts
206 | remove(sandbox: Sandbox, timeout: number): Promise<void>
207 | ```
208 |
209 | Removes a Sandbox.
210 |
211 | **Parameters**:
212 |
213 | - `sandbox` _Sandbox_ - The Sandbox to remove
214 | - `timeout` _number = 60_ - Timeout in seconds (0 means no timeout, default is 60)
215 |
216 |
217 | **Returns**:
218 |
219 | - `Promise<void>`
220 |
221 | **Example:**
222 |
223 | ```ts
224 | const sandbox = await daytona.get('my-sandbox-id');
225 | await daytona.remove(sandbox);
226 | ```
227 |
228 | ***
229 |
230 | #### start()
231 |
232 | ```ts
233 | start(sandbox: Sandbox, timeout?: number): Promise<void>
234 | ```
235 |
236 | Starts a Sandbox and waits for it to be ready.
237 |
238 | **Parameters**:
239 |
240 | - `sandbox` _Sandbox_ - The Sandbox to start
241 | - `timeout?` _number_ - Optional timeout in seconds (0 means no timeout)
242 |
243 |
244 | **Returns**:
245 |
246 | - `Promise<void>`
247 |
248 | **Example:**
249 |
250 | ```ts
251 | const sandbox = await daytona.get('my-sandbox-id');
252 | // Wait up to 60 seconds for the sandbox to start
253 | await daytona.start(sandbox, 60);
254 | ```
255 |
256 | ***
257 |
258 | #### stop()
259 |
260 | ```ts
261 | stop(sandbox: Sandbox): Promise<void>
262 | ```
263 |
264 | Stops a Sandbox.
265 |
266 | **Parameters**:
267 |
268 | - `sandbox` _Sandbox_ - The Sandbox to stop
269 |
270 |
271 | **Returns**:
272 |
273 | - `Promise<void>`
274 |
275 | **Example:**
276 |
277 | ```ts
278 | const sandbox = await daytona.get('my-sandbox-id');
279 | await daytona.stop(sandbox);
280 | ```
281 |
282 | ***
283 |
284 |
285 | ## CodeLanguage
286 |
287 | Supported programming languages for code execution
288 |
289 | **Enum Members**:
290 |
291 | - `JAVASCRIPT` ("javascript")
292 | - `PYTHON` ("python")
293 | - `TYPESCRIPT` ("typescript")
294 |
295 | ## CreateSandboxParams
296 |
297 | Parameters for creating a new Sandbox.
298 |
299 | **Properties**:
300 |
301 | - `async?` _boolean_ - If true, will not wait for the Sandbox to be ready before returning
302 | - `autoStopInterval?` _number_ - Auto-stop interval in minutes (0 means disabled)
303 | - `envVars?` _Record\<string, string\>_ - Optional environment variables to set in the Sandbox
304 | - `id?` _string_ - Optional Sandbox ID. If not provided, a random ID will be generated
305 | - `image?` _string_ - Optional Docker image to use for the Sandbox
306 | - `labels?` _Record\<string, string\>_ - Sandbox labels
307 | - `language?` _string_ - Programming language for direct code execution
308 | - `public?` _boolean_ - Is the Sandbox port preview public
309 | - `resources?` _SandboxResources_ - Resource allocation for the Sandbox
310 | - `target?` _string_ - Target location for the Sandbox
311 | - `timeout?` _number_ - Timeout in seconds for the Sandbox to be ready (0 means no timeout)
312 | - `user?` _string_ - Optional os user to use for the Sandbox
313 |
314 |
315 |
316 |
317 |
318 | **Example:**
319 |
320 | ```ts
321 | const params: CreateSandboxParams = {
322 |     language: 'typescript',
323 |     envVars: { NODE_ENV: 'development' },
324 |     resources: {
325 |         cpu: 2,
326 |         memory: 4 // 4GB RAM
327 |     },
328 |     autoStopInterval: 60  // Auto-stop after 1 hour of inactivity
329 | };
330 | const sandbox = await daytona.create(params, 50);
331 | ```
332 | ## DaytonaConfig
333 |
334 | Configuration options for initializing the Daytona client.
335 |
336 | **Properties**:
337 |
338 | - `apiKey?` _string_ - API key for authentication with the Daytona API
339 | - `apiUrl?` _string_ - URL of the Daytona API. Defaults to 'https://app.daytona.io/api'
340 |     if not set here and not set in environment variable DAYTONA_API_URL.
341 | - ~~`serverUrl?`~~ _string_ - **_Deprecated_** - Use `apiUrl` instead. This property will be removed in future versions.
342 | - `target?` _CreateWorkspaceTargetEnum_ - Target location for Sandboxes
343 |
344 |
345 |
346 |
347 |
348 | **Example:**
349 |
350 | ```ts
351 | const config: DaytonaConfig = {
352 |     apiKey: "your-api-key",
353 |     apiUrl: "https://your-api.com",
354 |     target: "us"
355 | };
356 | const daytona = new Daytona(config);
357 | ```
358 | ## SandboxResources
359 |
360 | Resource allocation for a Sandbox.
361 |
362 | **Properties**:
363 |
364 | - `cpu?` _number_ - CPU allocation for the Sandbox in cores
365 | - `disk?` _number_ - Disk space allocation for the Sandbox in GB
366 | - `gpu?` _number_ - GPU allocation for the Sandbox in units
367 | - `memory?` _number_ - Memory allocation for the Sandbox in GB
368 |
369 |
370 |
371 | **Example:**
372 |
373 | ```ts
374 | const resources: SandboxResources = {
375 |     cpu: 2,
376 |     memory: 4,  // 4GB RAM
377 |     disk: 20    // 20GB disk
378 | };
379 | ```


--------------------------------------------------------------------------------
/src/content/docs/typescript-sdk/errors.mdx:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: ""
 3 | ---
 4 |
 5 |
 6 | ## DaytonaError
 7 |
 8 | Base error for Daytona SDK.
 9 |
10 | **Extends:**
11 |
12 | - `Error`
13 |
14 | ### Constructors
15 |
16 | #### new DaytonaError()
17 |
18 | ```ts
19 | new DaytonaError(message?: string): DaytonaError
20 | ```
21 |
22 | **Parameters**:
23 |
24 | - `message?` _string_
25 |
26 |
27 | **Returns**:
28 |
29 | - `DaytonaError`
30 |
31 | ##### Inherited from
32 |
33 | ```ts
34 | Error.constructor
35 | ```
36 |


--------------------------------------------------------------------------------
/src/content/docs/typescript-sdk/execute-response.mdx:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: ""
 3 | ---
 4 |
 5 |
 6 | ## ExecuteResponse
 7 |
 8 | Response from the command execution.
 9 |
10 | **Properties**:
11 |
12 | - `artifacts?` _ExecutionArtifacts_ - Artifacts from the command execution
13 | - `exitCode` _number_ - The exit code from the command execution
14 |
15 | - `result` _string_ - The output from the command execution
16 |
17 | **Extends:**
18 |
19 | - `ExecuteResponse`
20 |
21 | ## ExecutionArtifacts
22 |
23 | Artifacts from the command execution.
24 |
25 | **Properties**:
26 |
27 | - `charts?` _Chart\[\]_ - List of chart metadata from matplotlib
28 | - `stdout` _string_ - Standard output from the command, same as `result` in `ExecuteResponse`
29 |


--------------------------------------------------------------------------------
/src/content/docs/typescript-sdk/file-system.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: ""
  3 | ---
  4 |
  5 |
  6 | ## FileSystem
  7 |
  8 | Provides file system operations within a Sandbox.
  9 |
 10 | ### Constructors
 11 |
 12 | #### new FileSystem()
 13 |
 14 | ```ts
 15 | new FileSystem(instance: SandboxInstance, toolboxApi: ToolboxApi): FileSystem
 16 | ```
 17 |
 18 | **Parameters**:
 19 |
 20 | - `instance` _SandboxInstance_
 21 | - `toolboxApi` _ToolboxApi_
 22 |
 23 |
 24 | **Returns**:
 25 |
 26 | - `FileSystem`
 27 |
 28 | ### Methods
 29 |
 30 | #### createFolder()
 31 |
 32 | ```ts
 33 | createFolder(path: string, mode: string): Promise<void>
 34 | ```
 35 |
 36 | Create a new directory in the Sandbox with specified permissions.
 37 |
 38 | **Parameters**:
 39 |
 40 | - `path` _string_ - Path where the directory should be created
 41 | - `mode` _string_ - Directory permissions in octal format (e.g. "755")
 42 |
 43 |
 44 | **Returns**:
 45 |
 46 | - `Promise<void>`
 47 |
 48 | **Example:**
 49 |
 50 | ```ts
 51 | // Create a directory with standard permissions
 52 | await fs.createFolder('/app/data', '755');
 53 | ```
 54 |
 55 | ***
 56 |
 57 | #### deleteFile()
 58 |
 59 | ```ts
 60 | deleteFile(path: string): Promise<void>
 61 | ```
 62 |
 63 | Deletes a file or directory from the Sandbox.
 64 |
 65 | **Parameters**:
 66 |
 67 | - `path` _string_ - Path to the file or directory to delete
 68 |
 69 |
 70 | **Returns**:
 71 |
 72 | - `Promise<void>`
 73 |
 74 | **Example:**
 75 |
 76 | ```ts
 77 | // Delete a file
 78 | await fs.deleteFile('/app/temp.log');
 79 | ```
 80 |
 81 | ***
 82 |
 83 | #### downloadFile()
 84 |
 85 | ```ts
 86 | downloadFile(path: string): Promise<Blob>
 87 | ```
 88 |
 89 | Downloads a file from the Sandbox.
 90 |
 91 | **Parameters**:
 92 |
 93 | - `path` _string_ - Path to the file to download
 94 |
 95 |
 96 | **Returns**:
 97 |
 98 | - `Promise<Blob>` - The file contents as a Blob
 99 |
100 | **Example:**
101 |
102 | ```ts
103 | // Download and process a file
104 | const fileBlob = await fs.downloadFile('/app/data.json');
105 | console.log('File content:', fileBlob.toString());
106 | ```
107 |
108 | ***
109 |
110 | #### findFiles()
111 |
112 | ```ts
113 | findFiles(path: string, pattern: string): Promise<Match[]>
114 | ```
115 |
116 | Searches for text patterns within files in the Sandbox.
117 |
118 | **Parameters**:
119 |
120 | - `path` _string_ - Directory to search in
121 | - `pattern` _string_ - Search pattern
122 |
123 |
124 | **Returns**:
125 |
126 | - `Promise<Match[]>` - Array of matches with file and line information
127 |
128 | **Example:**
129 |
130 | ```ts
131 | // Find all TODO comments in TypeScript files
132 | const matches = await fs.findFiles('/app/src', 'TODO:');
133 | matches.forEach(match => {
134 |   console.log(`${match.file}:${match.line}: ${match.content}`);
135 | });
136 | ```
137 |
138 | ***
139 |
140 | #### getFileDetails()
141 |
142 | ```ts
143 | getFileDetails(path: string): Promise<FileInfo>
144 | ```
145 |
146 | Retrieves detailed information about a file or directory.
147 |
148 | **Parameters**:
149 |
150 | - `path` _string_ - Path to the file or directory
151 |
152 |
153 | **Returns**:
154 |
155 | - `Promise<FileInfo>` - Detailed file information including size, permissions, modification time
156 |
157 | **Example:**
158 |
159 | ```ts
160 | // Get file details
161 | const info = await fs.getFileDetails('/app/config.json');
162 | console.log(`Size: ${info.size}, Modified: ${info.modTime}`);
163 | ```
164 |
165 | ***
166 |
167 | #### listFiles()
168 |
169 | ```ts
170 | listFiles(path: string): Promise<FileInfo[]>
171 | ```
172 |
173 | Lists contents of a directory in the Sandbox.
174 |
175 | **Parameters**:
176 |
177 | - `path` _string_ - Directory path to list
178 |
179 |
180 | **Returns**:
181 |
182 | - `Promise<FileInfo[]>` - Array of file and directory information
183 |
184 | **Example:**
185 |
186 | ```ts
187 | // List directory contents
188 | const files = await fs.listFiles('/app/src');
189 | files.forEach(file => {
190 |   console.log(`${file.name} (${file.size} bytes)`);
191 | });
192 | ```
193 |
194 | ***
195 |
196 | #### moveFiles()
197 |
198 | ```ts
199 | moveFiles(source: string, destination: string): Promise<void>
200 | ```
201 |
202 | Moves or renames a file or directory.
203 |
204 | **Parameters**:
205 |
206 | - `source` _string_ - Source path
207 | - `destination` _string_ - Destination path
208 |
209 |
210 | **Returns**:
211 |
212 | - `Promise<void>`
213 |
214 | **Example:**
215 |
216 | ```ts
217 | // Move a file to a new location
218 | await fs.moveFiles('/app/temp/data.json', '/app/data/data.json');
219 | ```
220 |
221 | ***
222 |
223 | #### replaceInFiles()
224 |
225 | ```ts
226 | replaceInFiles(
227 |    files: string[],
228 |    pattern: string,
229 | newValue: string): Promise<ReplaceResult[]>
230 | ```
231 |
232 | Replaces text content in multiple files.
233 |
234 | **Parameters**:
235 |
236 | - `files` _string\[\]_ - Array of file paths to process
237 | - `pattern` _string_ - Pattern to replace
238 | - `newValue` _string_ - Replacement text
239 |
240 |
241 | **Returns**:
242 |
243 | - `Promise<ReplaceResult[]>` - Results of the replace operation for each file
244 |
245 | **Example:**
246 |
247 | ```ts
248 | // Update version number across multiple files
249 | const results = await fs.replaceInFiles(
250 |   ['/app/package.json', '/app/version.ts'],
251 |   '"version": "1.0.0"',
252 |   '"version": "1.1.0"'
253 | );
254 | ```
255 |
256 | ***
257 |
258 | #### searchFiles()
259 |
260 | ```ts
261 | searchFiles(path: string, pattern: string): Promise<SearchFilesResponse>
262 | ```
263 |
264 | Searches for files and directories by name pattern in the Sandbox.
265 |
266 | **Parameters**:
267 |
268 | - `path` _string_ - Directory to search in
269 | - `pattern` _string_ - File name pattern (supports globs)
270 |
271 |
272 | **Returns**:
273 |
274 | - `Promise<SearchFilesResponse>` - Search results with matching files
275 |
276 | **Example:**
277 |
278 | ```ts
279 | // Find all TypeScript files
280 | const result = await fs.searchFiles('/app', '*.ts');
281 | result.files.forEach(file => console.log(file));
282 | ```
283 |
284 | ***
285 |
286 | #### setFilePermissions()
287 |
288 | ```ts
289 | setFilePermissions(path: string, permissions: FilePermissionsParams): Promise<void>
290 | ```
291 |
292 | Sets permissions and ownership for a file or directory.
293 |
294 | **Parameters**:
295 |
296 | - `path` _string_ - Path to the file or directory
297 | - `permissions` _FilePermissionsParams_ - Permission settings
298 |
299 |
300 | **Returns**:
301 |
302 | - `Promise<void>`
303 |
304 | **Example:**
305 |
306 | ```ts
307 | // Set file permissions and ownership
308 | await fs.setFilePermissions('/app/script.sh', {
309 |   owner: 'daytona',
310 |   group: 'users',
311 |   mode: '755'  // Execute permission for shell script
312 | });
313 | ```
314 |
315 | ***
316 |
317 | #### uploadFile()
318 |
319 | ```ts
320 | uploadFile(path: string, file: File): Promise<void>
321 | ```
322 |
323 | Uploads a file to the Sandbox.
324 |
325 | **Parameters**:
326 |
327 | - `path` _string_ - Destination path in the Sandbox
328 | - `file` _File_ - File to upload
329 |
330 |
331 | **Returns**:
332 |
333 | - `Promise<void>`
334 |
335 | **Example:**
336 |
337 | ```ts
338 | // Upload a configuration file
339 | const configFile = new File(['{"setting": "value"}'], 'config.json');
340 | await fs.uploadFile('/app/config.json', configFile);
341 | ```
342 |
343 | ***
344 |
345 |
346 | ## FilePermissionsParams
347 |
348 | Parameters for setting file permissions in the Sandbox.
349 |
350 | **Properties**:
351 |
352 | - `group?` _string_ - Group owner of the file
353 | - `mode?` _string_ - File mode/permissions in octal format (e.g. "644")
354 | - `owner?` _string_ - User owner of the file
355 |
356 |
357 |
358 | **Example:**
359 |
360 | ```ts
361 | const permissions: FilePermissionsParams = {
362 |   mode: '644',
363 |   owner: 'daytona',
364 |   group: 'users'
365 | };
366 | ```


--------------------------------------------------------------------------------
/src/content/docs/typescript-sdk/git.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: ""
  3 | ---
  4 |
  5 |
  6 | ## Git
  7 |
  8 | Provides Git operations within a Sandbox.
  9 |
 10 | ### Constructors
 11 |
 12 | #### new Git()
 13 |
 14 | ```ts
 15 | new Git(
 16 |    sandbox: Sandbox,
 17 |    toolboxApi: ToolboxApi,
 18 |    instance: SandboxInstance): Git
 19 | ```
 20 |
 21 | **Parameters**:
 22 |
 23 | - `sandbox` _Sandbox_
 24 | - `toolboxApi` _ToolboxApi_
 25 | - `instance` _SandboxInstance_
 26 |
 27 | **Returns**:
 28 |
 29 | - `Git`
 30 |
 31 | ### Methods
 32 |
 33 | #### add()
 34 |
 35 | ```ts
 36 | add(path: string, files: string[]): Promise<void>
 37 | ```
 38 |
 39 | Stages the specified files for the next commit, similar to
 40 | running 'git add' on the command line.
 41 |
 42 | **Parameters**:
 43 |
 44 | - `path` _string_ - Absolute path to the Git repository root
 45 | - `files` _string\[\]_ - List of file paths or directories to stage, relative to the repository root
 46 |
 47 | **Returns**:
 48 |
 49 | - `Promise<void>`
 50 |
 51 | **Examples:**
 52 |
 53 | ```ts
 54 | // Stage a single file
 55 | await git.add('/workspace/repo', ['file.txt']);
 56 | ```
 57 |
 58 | ```ts
 59 | // Stage whole repository
 60 | await git.add('/workspace/repo', ['.']);
 61 | ```
 62 |
 63 | ***
 64 |
 65 | #### branches()
 66 |
 67 | ```ts
 68 | branches(path: string): Promise<ListBranchResponse>
 69 | ```
 70 |
 71 | List branches in the repository.
 72 |
 73 | **Parameters**:
 74 |
 75 | - `path` _string_ - Absolute path to the Git repository root
 76 |
 77 | **Returns**:
 78 |
 79 | - `Promise<ListBranchResponse>` - List of branches in the repository
 80 |
 81 | **Example:**
 82 |
 83 | ```ts
 84 | const response = await git.branches('/workspace/repo');
 85 | console.log(`Branches: ${response.branches}`);
 86 | ```
 87 |
 88 | ***
 89 |
 90 | #### clone()
 91 |
 92 | ```ts
 93 | clone(
 94 |    url: string,
 95 |    path: string,
 96 |    branch?: string,
 97 |    commitId?: string,
 98 |    username?: string,
 99 | password?: string): Promise<void>
100 | ```
101 |
102 | Clones a Git repository into the specified path. It supports
103 | cloning specific branches or commits, and can authenticate with the remote
104 | repository if credentials are provided.
105 |
106 | **Parameters**:
107 |
108 | - `url` _string_ - Repository URL to clone from
109 | - `path` _string_ - Absolute path where the repository should be cloned
110 | - `branch?` _string_ - Specific branch to clone. If not specified, clones the default branch
111 | - `commitId?` _string_ - Specific commit to clone. If specified, the repository will be left in a detached HEAD state at this commit
112 | - `username?` _string_ - Git username for authentication
113 | - `password?` _string_ - Git password or token for authentication
114 |
115 | **Returns**:
116 |
117 | - `Promise<void>`
118 |
119 | **Examples:**
120 |
121 | ```ts
122 | // Clone the default branch
123 | await git.clone(
124 |   'https://github.com/user/repo.git',
125 |   '/workspace/repo'
126 | );
127 | ```
128 |
129 | ```ts
130 | // Clone a specific branch with authentication
131 | await git.clone(
132 |   'https://github.com/user/private-repo.git',
133 |   '/workspace/private',
134 |   branch='develop',
135 |   username='user',
136 |   password='token'
137 | );
138 | ```
139 |
140 | ```ts
141 | // Clone a specific commit
142 | await git.clone(
143 |   'https://github.com/user/repo.git',
144 |   '/workspace/repo-old',
145 |   commitId='abc123'
146 | );
147 | ```
148 |
149 | ***
150 |
151 | #### commit()
152 |
153 | ```ts
154 | commit(
155 |    path: string,
156 |    message: string,
157 |    author: string,
158 | email: string): Promise<GitCommitResponse>
159 | ```
160 |
161 | Commits staged changes.
162 |
163 | **Parameters**:
164 |
165 | - `path` _string_ - Absolute path to the Git repository root
166 | - `message` _string_ - Commit message describing the changes
167 | - `author` _string_ - Name of the commit author
168 | - `email` _string_ - Email address of the commit author
169 |
170 | **Returns**:
171 |
172 | - `Promise<GitCommitResponse>`
173 |
174 | **Example:**
175 |
176 | ```ts
177 | // Stage and commit changes
178 | await git.add('/workspace/repo', ['README.md']);
179 | await git.commit(
180 |   '/workspace/repo',
181 |   'Update documentation',
182 |   'John Doe',
183 |   'john@example.com'
184 | );
185 | ```
186 |
187 | ***
188 |
189 | #### pull()
190 |
191 | ```ts
192 | pull(
193 |    path: string,
194 |    username?: string,
195 | password?: string): Promise<void>
196 | ```
197 |
198 | Pulls changes from the remote repository.
199 |
200 | **Parameters**:
201 |
202 | - `path` _string_ - Absolute path to the Git repository root
203 | - `username?` _string_ - Git username for authentication
204 | - `password?` _string_ - Git password or token for authentication
205 |
206 | **Returns**:
207 |
208 | - `Promise<void>`
209 |
210 | **Examples:**
211 |
212 | ```ts
213 | // Pull from a public repository
214 | await git.pull('/workspace/repo');
215 | ```
216 |
217 | ```ts
218 | // Pull from a private repository
219 | await git.pull(
220 |   '/workspace/repo',
221 |   'user',
222 |   'token'
223 | );
224 | ```
225 |
226 | ***
227 |
228 | #### push()
229 |
230 | ```ts
231 | push(
232 |    path: string,
233 |    username?: string,
234 | password?: string): Promise<void>
235 | ```
236 |
237 | Push local changes to the remote repository.
238 |
239 | **Parameters**:
240 |
241 | - `path` _string_ - Absolute path to the Git repository root
242 | - `username?` _string_ - Git username for authentication
243 | - `password?` _string_ - Git password or token for authentication
244 |
245 | **Returns**:
246 |
247 | - `Promise<void>`
248 |
249 | **Examples:**
250 |
251 | ```ts
252 | // Push to a public repository
253 | await git.push('/workspace/repo');
254 | ```
255 |
256 | ```ts
257 | // Push to a private repository
258 | await git.push(
259 |   '/workspace/repo',
260 |   'user',
261 |   'token'
262 | );
263 | ```
264 |
265 | ***
266 |
267 | #### status()
268 |
269 | ```ts
270 | status(path: string): Promise<GitStatus>
271 | ```
272 |
273 | Gets the current status of the Git repository.
274 |
275 | **Parameters**:
276 |
277 | - `path` _string_ - Absolute path to the Git repository root
278 |
279 | **Returns**:
280 |
281 | - `Promise<GitStatus>` - Current repository status including:
282 |   - currentBranch: Name of the current branch
283 |   - ahead: Number of commits ahead of the remote branch
284 |   - behind: Number of commits behind the remote branch
285 |   - branchPublished: Whether the branch has been published to the remote repository
286 |   - fileStatus: List of file statuses
287 |
288 | **Example:**
289 |
290 | ```ts
291 | const status = await sandbox.git.status('/workspace/repo');
292 | console.log(`Current branch: ${status.currentBranch}`);
293 | console.log(`Commits ahead: ${status.ahead}`);
294 | console.log(`Commits behind: ${status.behind}`);
295 | ```
296 |
297 | ***
298 |
299 | ## GitCommitResponse
300 |
301 | **Properties**:
302 |
303 | - `sha` _string_ - The SHA of the commit
304 |
305 | Response from the git commit.
306 |


--------------------------------------------------------------------------------
/src/content/docs/typescript-sdk/index.mdx:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: TypeScript SDK Reference
 3 | description: Interact with Daytona Sandboxes using the TypeScript SDK
 4 | next: /docs/typescript-sdk/daytona
 5 | ---
 6 |
 7 | The Daytona TypeScript SDK provides a powerful interface for programmatically interacting with Daytona Sandboxes.
 8 |
 9 | ## Installation
10 |
11 | Install the Daytona TypeScript SDK using npm:
12 |
13 | ```bash
14 | npm install @daytonaio/sdk
15 | ```
16 |
17 | Or using yarn:
18 |
19 | ```bash
20 | yarn add @daytonaio/sdk
21 | ```
22 |
23 | ## Getting Started
24 |
25 | Here's a simple example to help you get started with the Daytona TypeScript SDK:
26 |
27 | ```typescript
28 | import { Daytona } from '@daytonaio/sdk';
29 |
30 | async function main() {
31 |   // Initialize the SDK (uses environment variables by default)
32 |   const daytona = new Daytona();
33 |
34 |   // Create a new sandbox
35 |   const sandbox = await daytona.create({
36 |     language: 'typescript',
37 |     envVars: { NODE_ENV: 'development' }
38 |   });
39 |
40 |   // Execute a command
41 |   const response = await sandbox.process.executeCommand('echo "Hello, World!"');
42 |   console.log(response.result);
43 | }
44 |
45 | main().catch(console.error);
46 | ```
47 |
48 | ## Configuration
49 |
50 | The SDK can be configured using environment variables or by passing options to the constructor:
51 |
52 | ```typescript
53 | import { Daytona, SandboxTargetRegion } from '@daytonaio/sdk';
54 |
55 | // Using environment variables (DAYTONA_API_KEY, DAYTONA_SERVER_URL, DAYTONA_TARGET)
56 | const daytona = new Daytona();
57 |
58 | // Using explicit configuration
59 | const daytona = new Daytona({
60 |   apiKey: 'your-api-key',
61 |   serverUrl: 'https://app.daytona.io/api',
62 |   target: SandboxTargetRegion.US
63 | });
64 | ```
65 |


--------------------------------------------------------------------------------
/src/content/docs/typescript-sdk/lsp-server.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: ""
  3 | ---
  4 |
  5 |
  6 | ## LspServer
  7 |
  8 | Provides Language Server Protocol functionality for code intelligence to provide
  9 | IDE-like features such as code completion, symbol search, and more.
 10 |
 11 | ### Constructors
 12 |
 13 | #### new LspServer()
 14 |
 15 | ```ts
 16 | new LspServer(
 17 |    languageId: LspLanguageId,
 18 |    pathToProject: string,
 19 |    toolboxApi: ToolboxApi,
 20 |    instance: SandboxInstance): LspServer
 21 | ```
 22 |
 23 | **Parameters**:
 24 |
 25 | - `languageId` _LspLanguageId_
 26 | - `pathToProject` _string_
 27 | - `toolboxApi` _ToolboxApi_
 28 | - `instance` _SandboxInstance_
 29 |
 30 |
 31 | **Returns**:
 32 |
 33 | - `LspServer`
 34 |
 35 | ### Methods
 36 |
 37 | #### completions()
 38 |
 39 | ```ts
 40 | completions(path: string, position: Position): Promise<CompletionList>
 41 | ```
 42 |
 43 | Gets completion suggestions at a position in a file.
 44 |
 45 | **Parameters**:
 46 |
 47 | - `path` _string_ - Absolute path to the file
 48 | - `position` _Position_ - The position in the file where completion was requested
 49 |
 50 |
 51 | **Returns**:
 52 |
 53 | - `Promise<CompletionList>` - List of completion suggestions. The list includes:
 54 |     - isIncomplete: Whether more items might be available
 55 |     - items: List of completion items, each containing:
 56 |     - label: The text to insert
 57 |     - kind: The kind of completion
 58 |     - detail: Additional details about the item
 59 |     - documentation: Documentation for the item
 60 |     - sortText: Text used to sort the item in the list
 61 |     - filterText: Text used to filter the item
 62 |     - insertText: The actual text to insert (if different from label)
 63 |
 64 | **Example:**
 65 |
 66 | ```ts
 67 | // Get completions at a specific position
 68 | const completions = await lsp.completions('/workspace/project/src/index.ts', {
 69 |   line: 10,
 70 |   character: 15
 71 | });
 72 | completions.items.forEach(item => {
 73 |   console.log(`${item.label} (${item.kind}): ${item.detail}`);
 74 | });
 75 | ```
 76 |
 77 | ***
 78 |
 79 | #### didClose()
 80 |
 81 | ```ts
 82 | didClose(path: string): Promise<void>
 83 | ```
 84 |
 85 | Notifies the language server that a file has been closed, should be called when a file is closed
 86 | in the editor to allow the language server to clean up any resources associated with that file.
 87 |
 88 | **Parameters**:
 89 |
 90 | - `path` _string_ - Absolute path to the closed file
 91 |
 92 |
 93 | **Returns**:
 94 |
 95 | - `Promise<void>`
 96 |
 97 | **Example:**
 98 |
 99 | ```ts
100 | // When done editing a file
101 | await lsp.didClose('/workspace/project/src/index.ts');
102 | ```
103 |
104 | ***
105 |
106 | #### didOpen()
107 |
108 | ```ts
109 | didOpen(path: string): Promise<void>
110 | ```
111 |
112 | Notifies the language server that a file has been opened, enabling
113 | language features like diagnostics and completions for that file. The server
114 | will begin tracking the file's contents and providing language features.
115 |
116 | **Parameters**:
117 |
118 | - `path` _string_ - Absolute path to the opened file
119 |
120 |
121 | **Returns**:
122 |
123 | - `Promise<void>`
124 |
125 | **Example:**
126 |
127 | ```ts
128 | // When opening a file for editing
129 | await lsp.didOpen('/workspace/project/src/index.ts');
130 | // Now can get completions, symbols, etc. for this file
131 | ```
132 |
133 | ***
134 |
135 | #### documentSymbols()
136 |
137 | ```ts
138 | documentSymbols(path: string): Promise<LspSymbol[]>
139 | ```
140 |
141 | Get symbol information (functions, classes, variables, etc.) from a document.
142 |
143 | **Parameters**:
144 |
145 | - `path` _string_ - Absolute path to the file to get symbols from
146 |
147 |
148 | **Returns**:
149 |
150 | - `Promise<LspSymbol[]>` - List of symbols in the document. Each symbol includes:
151 |     - name: The symbol's name
152 |     - kind: The symbol's kind (function, class, variable, etc.)
153 |     - location: The location of the symbol in the file
154 |
155 | **Example:**
156 |
157 | ```ts
158 | // Get all symbols in a file
159 | const symbols = await lsp.documentSymbols('/workspace/project/src/index.ts');
160 | symbols.forEach(symbol => {
161 |   console.log(`${symbol.kind} ${symbol.name}: ${symbol.location}`);
162 | });
163 | ```
164 |
165 | ***
166 |
167 | #### sandboxSymbols()
168 |
169 | ```ts
170 | sandboxSymbols(query: string): Promise<LspSymbol[]>
171 | ```
172 |
173 | Searches for symbols matching the query string across the entire Sandbox.
174 |
175 | **Parameters**:
176 |
177 | - `query` _string_ - Search query to match against symbol names
178 |
179 |
180 | **Returns**:
181 |
182 | - `Promise<LspSymbol[]>` - List of matching symbols from all files. Each symbol includes:
183 |     - name: The symbol's name
184 |     - kind: The symbol's kind (function, class, variable, etc.)
185 |     - location: The location of the symbol in the file
186 |
187 | **Example:**
188 |
189 | ```ts
190 | // Search for all symbols containing "User"
191 | const symbols = await lsp.sandboxSymbols('User');
192 | symbols.forEach(symbol => {
193 |   console.log(`${symbol.name} (${symbol.kind}) in ${symbol.location}`);
194 | });
195 | ```
196 |
197 | ***
198 |
199 | #### start()
200 |
201 | ```ts
202 | start(): Promise<void>
203 | ```
204 |
205 | Starts the language server, must be called before using any other LSP functionality.
206 | It initializes the language server for the specified language and project.
207 |
208 | **Returns**:
209 |
210 | - `Promise<void>`
211 |
212 | **Example:**
213 |
214 | ```ts
215 | const lsp = sandbox.createLspServer('typescript', '/workspace/project');
216 | await lsp.start();  // Initialize the server
217 | // Now ready for LSP operations
218 | ```
219 |
220 | ***
221 |
222 | #### stop()
223 |
224 | ```ts
225 | stop(): Promise<void>
226 | ```
227 |
228 | Stops the language server, should be called when the LSP server is no longer needed to
229 | free up system resources.
230 |
231 | **Returns**:
232 |
233 | - `Promise<void>`
234 |
235 | **Example:**
236 |
237 | ```ts
238 | // When done with LSP features
239 | await lsp.stop();  // Clean up resources
240 | ```
241 |
242 | ***
243 |
244 | #### ~~workspaceSymbols()~~
245 |
246 | ```ts
247 | workspaceSymbols(query: string): Promise<LspSymbol[]>
248 | ```
249 |
250 | Searches for symbols matching the query string across the entire Sandbox.
251 |
252 | **Parameters**:
253 |
254 | - `query` _string_ - Search query to match against symbol names
255 |
256 |
257 | **Returns**:
258 |
259 | - `Promise<LspSymbol[]>` - List of matching symbols from all files. Each symbol includes:
260 |     - name: The symbol's name
261 |     - kind: The symbol's kind (function, class, variable, etc.)
262 |     - location: The location of the symbol in the file
263 |
264 | ##### Deprecated
265 |
266 | Use `sandboxSymbols` instead. This method will be removed in a future version.
267 |
268 | ***
269 |
270 |
271 | ## LspLanguageId
272 |
273 | Supported language server types.
274 |
275 | **Enum Members**:
276 |
277 | - `JAVASCRIPT` ("javascript")
278 | - `PYTHON` ("python")
279 | - `TYPESCRIPT` ("typescript")
280 |
281 | ## Position
282 |
283 | Represents a zero-based position within a text document,
284 | specified by line number and character offset.
285 |
286 | **Properties**:
287 |
288 | - `character` _number_ - Zero-based character offset on the line
289 | - `line` _number_ - Zero-based line number in the document
290 |
291 |
292 |
293 | **Example:**
294 |
295 | ```ts
296 | const position: Position = {
297 |   line: 10,     // Line 11 (zero-based)
298 |   character: 15  // Character 16 on the line (zero-based)
299 | };
300 | ```


--------------------------------------------------------------------------------
/src/content/legacy-docs/about/what-is-daytona.mdx:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: What is Daytona?
 3 | description: Understand how Daytona can help you manage your development environments.
 4 | sidebar:
 5 |   label: What is Daytona?
 6 | ---
 7 |
 8 | Daytona is an open-source Development Environment Manager (DEM) licensed under the Apache License 2.0.
 9 | Daytona allows you to manage and deploy Workspaces — reproducible development environments based on standard OCI containers, with built-in support for the Dev Container standard.
10 | Daytona's architecture provides the future possibility to base Workspaces on other configuration standards, such as Dockerfiles, Docker Compose, Nix, and Devfile.
11 |
12 | By leveraging configuration in a project's remote Git repository, Daytona builds a Workspace and provisions a workspace to a platform of your choice.
13 | Once provisioned, you can develop and test the project using an IDE supported by Daytona, such as Visual Studio Code.
14 |
15 | Daytona's functionality is exposed through a command-line tool that runs on Linux, macOS, and Windows systems, on both x86-64 and AArch64 architectures.
16 |
17 | ## Features
18 |
19 | * __Security__
20 |
21 |     Daytona creates a secure VPN connection between the client machine and the remote machine.
22 |     All ports on the remote machine can be accessed securely without the need for manual port forwarding.
23 |
24 | * __Support for Visual Studio Code and JetBrains__
25 |
26 |     Daytona supports both Visual Studio Code and the JetBrains line of IDEs, making it easy to develop your project while feeling like everything's local.
27 |
28 | * __Connect with GitHub, GitLab, Bitbucket, and Gitea__
29 |
30 |     Daytona can create DEs by pulling repositories from your preferred SCM platform. Git operations can be executed within a workspace, allowing you to push your work without context switching.
31 |
32 | * __Support for Multi-Project Workspaces__
33 |
34 |     Daytona is capable of creating workspaces with multiple projects.
35 |     Large projects split into micro-services or multiple repositories can be worked on using a single workspace.
36 |
37 | * __Reverse Proxy Support__
38 |
39 |     Daytona integrates a reverse proxy allowing you to access a workspace on a public or restricted network.
40 |
41 | * __Extensible Core__
42 |
43 |     Daytona supports plugins developed in Go.
44 |     Third-party Providers can be added to Daytona, as well as extensions to core functionality.
45 |


--------------------------------------------------------------------------------
/src/content/legacy-docs/configuration/api-keys.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: API Keys
  3 | description: Learn how to create and manage Daytona API keys.
  4 | ---
  5 |
  6 | import Label from '@components/Label.astro'
  7 |
  8 | <Label>
  9 |   Distribution: **Open Source**
 10 | </Label>
 11 |
 12 | Daytona API keys are used to authenticate requests to the [Daytona API](/docs/tools/api). Daytona provides an option to generate an API key for managing your API requests, list all generated API keys, and revoke an API key.
 13 |
 14 | ## Generate an API Key
 15 |
 16 | Daytona provides an option to generate API keys.
 17 |
 18 | 1. Run the following command to generate an API key:
 19 |
 20 | ```bash
 21 | daytona api-key generate
 22 | ```
 23 |
 24 | Upon running this command, Daytona will prompt you to enter a name for the API key.
 25 |
 26 | ```text
 27 | Name
 28 | >
 29 | ```
 30 |
 31 | Upon successful generation of the API key, Daytona will display the following confirmation message:
 32 |
 33 | ```text
 34 | You have successfully generated a new API Key and Server URL, which you can find below:
 35 |
 36 | DAYTONA_API_KEY=your-api-key
 37 | DAYTONA_SERVER_URL=your-server-url
 38 | ```
 39 |
 40 | Daytona provides an option to connect to the Daytona Server instantly from a client machine by running the following command:
 41 |
 42 | ```bash
 43 | daytona profile add -a <your-server-url> -k <your-api-key>
 44 | ```
 45 |
 46 | ## List API Keys
 47 |
 48 | Daytona provides an option to list all generated API keys.
 49 |
 50 | 1. Run the following command to list all generated API keys:
 51 |
 52 | ```bash
 53 | daytona api-key list
 54 | ```
 55 |
 56 | Upon running this command, Daytona will display the list of all generated API keys.
 57 |
 58 | ```text
 59 | Name                                Type
 60 | ──────────────────────────────────────────
 61 | default                             client
 62 | ```
 63 |
 64 | :::tip
 65 | Daytona provides an option to view the existing Daytona Server API URL.
 66 |
 67 | <br />
 68 |
 69 | ```bash
 70 | daytona server config
 71 | ```
 72 |
 73 | ```text
 74 | API URL:  https://<server-id>.try-eu.daytona.app
 75 | ```
 76 |
 77 | :::
 78 |
 79 | ## Revoke an API Key
 80 |
 81 | Daytona provides an option to revoke API keys.
 82 |
 83 | 1. Run the following command to revoke an API key:
 84 |
 85 | ```bash
 86 | daytona api-key revoke
 87 | ```
 88 |
 89 | Upon running this command, Daytona will prompt you to enter the name of the API key that you want to revoke.
 90 |
 91 | ```text
 92 | Select an API key to revoke
 93 | 1 item
 94 | ===
 95 | MyAPIKey
 96 | client
 97 | ```
 98 |
 99 | 3. Press **`Enter`** on the selected API key to revoke it.
100 |
101 | 4. Confirm the revocation by selecting **`Yes`** or **`No`**.
102 |
103 | ```text
104 | Revoke API Key 'test'?
105 | Are you sure you want to revoke 'test'?
106 |
107 | [Yes]     [No]
108 | ```
109 |
110 | ```text
111 | API key revoked
112 | ```
113 |


--------------------------------------------------------------------------------
/src/content/legacy-docs/configuration/container-registries.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Container Registries
  3 | description: Configure container registries for your Workspace in Daytona
  4 | ---
  5 |
  6 | import Label from '@components/Label.astro'
  7 |
  8 | <Label>
  9 |   Distribution: **Open Source**
 10 | </Label>
 11 |
 12 | Container registries store credentials used to pull container images from specified registry servers. Adding container registry credentials is useful for users who want to create Workspaces from private images and those hosted on private registries.
 13 |
 14 | Container registries are managed through environment variables, enabling you to securely store and manage credentials. Daytona provides options to set, list, and delete container registries for your Workspaces.
 15 |
 16 | Daytona provides options to set global environment variables that apply to all Workspaces or set environment variables for a specific Workspace. To set environment variables for a specific Workspace, use the `--env` flag when creating a new Workspace, or configure the environment variables in the Workspace's template. For server-wide environment variables that apply to all new Workspaces, use the `daytona env` command.
 17 |
 18 | ## Set a Container Registry
 19 |
 20 | Daytona provides an option to set a container registry through environment variables for your Workspace.
 21 |
 22 | 1. Run the following command to set a container registry environment variable:
 23 |
 24 | ```shell
 25 | daytona env set
 26 | ```
 27 |
 28 | 2. Set the server environment variable key for the container registry:
 29 |
 30 | ```text
 31 | Set server environment variable
 32 | Key
 33 | >
 34 | ```
 35 |
 36 | :::tip
 37 | Add the following environment variables to configure your container registry:
 38 |
 39 | - **`<*>_CONTAINER_REGISTRY_SERVER`**
 40 |
 41 |   The URL of the container registry.
 42 |
 43 | - **`<*>_CONTAINER_REGISTRY_USERNAME`**
 44 |
 45 |   The username to authenticate with the container registry.
 46 |
 47 | - **`<*>_CONTAINER_REGISTRY_PASSWORD`**
 48 |
 49 |   The password to authenticate with the container registry.
 50 |
 51 | :::
 52 |
 53 | <br />
 54 |
 55 | 3. Set the server environment variable value for the container registry:
 56 |
 57 | ```text
 58 | Value
 59 | >
 60 | ```
 61 |
 62 | 4. Select whether to add another environment variable:
 63 |
 64 | ```text
 65 | Add another environment variable?
 66 |
 67 | [Yes]     [No]
 68 | ```
 69 |
 70 | Upon selecting, Daytona will set the container registry environment variables for your Workspace.
 71 |
 72 | ```text
 73 | Server environment variables have been set successfully
 74 | ```
 75 |
 76 | ## List Container Registries
 77 |
 78 | Daytona provides an option to list the container registries configured for your Workspaces.
 79 |
 80 | 1. Run the following command to list the container registries:
 81 |
 82 | ```shell
 83 | daytona env list
 84 | ```
 85 |
 86 | Upon running this command, Daytona will display a list of your configured container registries' environment variables.
 87 |
 88 | ```text
 89 | Key                         Value
 90 | ────────────────────────────────────
 91 | MyEnvVariable               ********
 92 | ```
 93 |
 94 | ## Delete a Container Registry
 95 |
 96 | Daytona provides an option to delete a container registry from your Workspace.
 97 |
 98 | 1. Run the following command to delete a container registry:
 99 |
100 | ```shell
101 | daytona env delete
102 | ```
103 |
104 | Upon running this command, you will be prompted to select the container registry you want to delete.
105 |
106 | ```text
107 | Select Server Environment Variables To Delete
108 | 1 item
109 | ===
110 | MyEnvVariable
111 | ********
112 | ```
113 |
114 | ```text
115 | Server environment variables have been successfully removed
116 | ```
117 |


--------------------------------------------------------------------------------
/src/content/legacy-docs/configuration/server.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Server
  3 | description: A reference for the Daytona server.
  4 | sidebar:
  5 |   label: Server
  6 | ---
  7 |
  8 | import Label from '@components/Label.astro'
  9 |
 10 | <Label>
 11 |   Distribution: **Open Source**
 12 | </Label>
 13 |
 14 | The Daytona Server is a daemon that runs on your machine and handles [Workspaces](/docs/usage/workspaces) related actions.
 15 | It provides capabilities for [starting](#start-the-server), [configuring](#configure-the-server), and [stopping](#stop-the-server) server operations.
 16 | The primary method of interacting with the server is through the Daytona CLI. Users can also interact with the Daytona Server using its HTTP interface.
 17 |
 18 | ## Start the Server
 19 |
 20 | Run the following command to start the Daytona Server:
 21 |
 22 | ```shell
 23 | daytona server start
 24 | ```
 25 |
 26 | Upon running this command, Daytona will start the The Daytona Server daemon.
 27 |
 28 | ```text
 29 | Starting the Daytona Server daemon...
 30 | ```
 31 |
 32 | ## Configure the Server
 33 |
 34 | The Daytona Server configuration is located in different directories depending on your operating system.
 35 |
 36 | - On macOS, the configuration file is located at:
 37 |
 38 |     `~/Library/Application\ Support/daytona/server/config.json`
 39 |
 40 | - On Linux, the configuration file is located at:
 41 |
 42 |     `~/.config/daytona/server/config.json`
 43 |
 44 | - On Windows, the configuration file is located at:
 45 |
 46 |     `C:\Users\YOUR_USERNAME\AppData\Roaming\daytona\server\config.json`
 47 |
 48 | The Daytona Server configuration can be viewed by using the following command across all operating systems:
 49 |
 50 | ```shell
 51 | daytona server config
 52 | ```
 53 |
 54 | The Daytona Server configuration contains the following properties:
 55 |
 56 | - **Server ID**
 57 |
 58 |     A unique identifier for the Daytona server instance.
 59 |
 60 |     Example: `12a34bc5-d67e-890f-1gh2-34i5jk6l7m89`
 61 |
 62 | - **API URL**
 63 |
 64 |     The URL endpoint for the Daytona API.
 65 |
 66 |     Example: `https://api-12a34bc5-d67e-890f-1gh2-34i5jk6l7m89.try-eu.daytona.app`
 67 |
 68 |     The API URL property cannot be manually edited, but you can use it to connect to Daytona with other clients.
 69 |
 70 | - **API Port**
 71 |
 72 |     The port number on which the Daytona API is accessible.
 73 |
 74 |     Example: `3986`
 75 |
 76 |     If you have something running on port 3986, you can change it to a port that you have available.
 77 |
 78 | - **Default Project Image**
 79 |
 80 |     The default Docker image used for projects.
 81 |
 82 |     Example: `daytonaio/workspace-project:latest`
 83 |
 84 |     The Default Project Image property can be manually edited to use a different default project image.
 85 |
 86 | - **Default Project User**
 87 |
 88 |     The default user for projects.
 89 |
 90 |     Example: `daytona`
 91 |
 92 |     The Default Project User property can be manually edited to use a different default project user.
 93 |
 94 | - **FRPS Domain**
 95 |
 96 |     The domain used by the FRP (Fast Reverse Proxy) server.
 97 |
 98 |     Example: `try-eu.daytona.app`
 99 |
100 |     The FRPS Domain property can be manually edited to use a different FRP domain.
101 |
102 | - **FRPS Port**
103 |
104 |     The port used by the FRP (Fast Reverse Proxy) server.
105 |
106 |     Example: `7000`
107 |
108 |     The FRPS Port property can be manually edited to use a different FRP port.
109 |
110 | - **FRPS Protocol**
111 |
112 |     The protocol used by the FRP (Fast Reverse Proxy) server.
113 |
114 |     Example: `https`
115 |
116 |     The FRPS Protocol property can be manually edited to use a different FRP protocol.
117 |
118 | - **Headscale Port**
119 |
120 |     The port number for the Headscale service.
121 |
122 |     Example: `3987`
123 |
124 |     The Headscale Port property can be manually edited to use a different Headscale port.
125 |
126 | - **Binaries Path**
127 |
128 |     The directory path where server binaries are stored.
129 |
130 |     Example: `/Users/Library/Application Support/daytona/server/binaries`
131 |
132 |     The Binaries Path directory will be created if it does not exist, and the property can be manually edited to use a different binaries path.
133 |
134 | - **Log File Path**
135 |
136 |     The directory path where server logs are stored.
137 |
138 |     Example: `/Users/Library/Application Support/daytona/server/daytona.log`
139 |
140 |     The Log File Path file will be created if it does not exist, and the property can be manually edited to use a different log file path.
141 |
142 | - **Builder Image**
143 |
144 |     The Docker image used by the local builder.
145 |
146 |     Example: `daytonaio/workspace-project:latest`
147 |
148 |     The Builder Image property can be manually edited to use a different builder image.
149 |
150 | - **Local Builder Registry Port**
151 |
152 |     The port number for the local builder registry.
153 |
154 |     Example: `3988`
155 |
156 |     The Local Builder Registry Port property is only displayed if the Builder Registry is set to local. It can be manually edited to use a different local builder registry port.
157 |
158 | - **Local Builder Registry Image**
159 |
160 |     The registry image used by the local builder registry.
161 |
162 |     Example: `registry:2.3.8`
163 |
164 |     The Local Builder Registry Image property is only displayed if the Builder Registry is set to local. It can be manually edited to use a different local builder registry image.
165 |
166 | - **Build Image Namespace**
167 |
168 |     The namespace for build images. This is used to organize and manage images within a specific scope.
169 |
170 |     Example: `daytona`
171 |
172 |     The Build Image Namespace property can be manually edited to use a different build image namespace.
173 |
174 | - **Providers Dir**
175 |
176 |     The directory path where provider configuration is stored.
177 |
178 |     Example: `/Users/Library/Application Support/daytona/providers`
179 |
180 | - **Registry URL**
181 |
182 |     The URL for the Daytona registry.
183 |
184 |     Example: `https://download.daytona.io/daytona`
185 |
186 | - **Server Download URL**
187 |
188 |     The URL for downloading the Daytona server.
189 |
190 |     Example: `https://download.daytona.io/daytona/install.sh`
191 |
192 | The Daytona Server configuration can be manually edited by using the following command:
193 |
194 | ```shell
195 | daytona server configure
196 | ```
197 |
198 | ```text
199 | Providers Directory
200 | Directory will be created if it does not exist
201 | > /Users/Library/Application Support/daytona/providers
202 |
203 | Providers Directory
204 | > /Users/Library/Application Support/daytona/providers
205 |
206 | Registry URL
207 | > https://download.daytona.io/daytona
208 |
209 | Server Download URL
210 | > https://download.daytona.io/daytona/install.sh
211 |
212 | Default Project Image
213 | > daytonaio/workspace-project:latest
214 |
215 | Default Project User
216 | > daytona
217 |
218 | Builder Image
219 | Image dependencies: docker, @devcontainers/cli (node package)
220 | > daytonaio/workspace-project:latest
221 |
222 | Builder Registry
223 | To add options, add a container registry with 'daytona cr set'
224 | > Local registry managed by Daytona
225 |
226 | Build Image Namespace
227 | Namespace to be used when tagging and pushing build images
228 | >
229 |
230 | Local Builder Registry Port
231 | > 3988
232 |
233 | Local Builder Registry Image
234 | > registry:0.0.0
235 |
236 | API Port
237 | > 3986
238 |
239 | Headscale Port
240 | > 3987
241 |
242 | Binaries Path
243 | Directory will be created if it does not exist
244 | > /Users/Library/Application Support/daytona/server/binaries
245 |
246 | Log File Path
247 | File will be created if it does not exist
248 | > /Users/Library/Application Support/daytona/server/daytona.log
249 |
250 | Frps Domain
251 | > try-eu.daytona.app
252 |
253 | Frps Port
254 | > 7000
255 |
256 | Frps Protocol
257 | > https
258 | ```
259 |
260 | Upon successful configuration, Daytona will validate the settings and ensure all specified directories and files are correctly set up, preparing the server for optimal operation.
261 |
262 | ```text
263 | Server configuration updated. You need to restart the server for the changes to take effect.
264 | ```
265 |
266 | Use the `daytona server restart` command to restart the server for the changes to take effect.
267 |
268 | ## Restart the Server
269 |
270 | Run the following command to restart the Daytona Server:
271 |
272 | ```shell
273 | daytona server restart
274 | ```
275 |
276 | Upon running this command, Daytona will automatically stop and start The Daytona Server daemon.
277 |
278 | ```text
279 | Stopping the Daytona Server daemon...
280 | Starting the Daytona Server daemon...
281 | Daytona Server daemon restarted successfully
282 | ```
283 |
284 | ## Stop the Server
285 |
286 | Run the following command to stop the Daytona Server:
287 |
288 | ```shell
289 | daytona server stop
290 | ```
291 |
292 | Upon running this command, Daytona will stop the Daytona Server daemon.
293 |
294 | ```text
295 | Stopping the Daytona Server daemon...
296 | ```
297 |


--------------------------------------------------------------------------------
/src/content/legacy-docs/index.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Documentation Home
  3 | description: Start managing your Workspaces with Daytona.
  4 | template: doc
  5 | head:
  6 |   - tag: title
  7 |     content: Documentation · Daytona
  8 |   - tag: meta
  9 |     attrs:
 10 |         property: og:title
 11 |         content: Documentation · Daytona
 12 |   - tag: meta
 13 |     attrs:
 14 |         name: twitter:title
 15 |         content: Documentation · Daytona
 16 | tableOfContents: false
 17 | ---
 18 |
 19 | // import DocumentList from "@components/DocumentList.astro";
 20 | // import DocumentListItem from "@components/DocumentListItem.astro";
 21 |
 22 | <DocumentList title="Start Here">
 23 |   <DocumentListItem
 24 |     title="What is Daytona?"
 25 |     subtitle="Learn about Daytona and how it can help you manage your development environments."
 26 |     href="about/what-is-daytona"
 27 |   />
 28 |   <DocumentListItem
 29 |     title="Architecture Overview"
 30 |     subtitle="Understand the architecture of Daytona and how it manages Workspaces."
 31 |     href="about/architecture"
 32 |   />
 33 |   <DocumentListItem
 34 |     title="Getting Started"
 35 |     subtitle="Get started with Daytona and learn how to use and configure your development environments."
 36 |     href="about/getting-started"
 37 |   />
 38 |   <DocumentListItem
 39 |     title="Install Daytona"
 40 |     subtitle="Install Daytona on Linux, macOS, or Windows operating system."
 41 |     href="installation/installation"
 42 |   />
 43 | </DocumentList>
 44 |
 45 | <DocumentList title="Configure">
 46 |   <DocumentListItem
 47 |     title="Add a Git Provider"
 48 |     subtitle="Create Workspaces from repositories hosted across GitHub, GitLab, Bitbucket, and others."
 49 |     href="configuration/git-providers#add-a-git-provider"
 50 |   />
 51 |   <DocumentListItem
 52 |     title="Install a Provider"
 53 |     subtitle="Install a new Provider to interface with the Daytona Server and manage your Workspaces."
 54 |     href="configuration/providers#managing-providers"
 55 |   />
 56 |   <DocumentListItem
 57 |     title="Set a Target Configuration"
 58 |     subtitle="Set a Target configuration that governs how Daytona manages and deploys Workspaces."
 59 |     href="configuration/target-config"
 60 |   />
 61 |   <DocumentListItem
 62 |     title="Set a Container Registry"
 63 |     subtitle="Set a Container Registry to store credentials used to pull container images from specified registry servers."
 64 |     href="configuration/container-registries"
 65 |   />
 66 |   <DocumentListItem
 67 |     title="Create Workspace Templates"
 68 |     subtitle="Manage and reuse Workspace Templates across multiple Workspaces."
 69 |     href="configuration/workspace-templates"
 70 |   />
 71 |   <DocumentListItem
 72 |     title="Configure Daytona Server"
 73 |     subtitle="Daytona Server runs on your machine and handles actions relating to Workspaces."
 74 |     href="configuration/server"
 75 |   />
 76 | </DocumentList>
 77 |
 78 | <DocumentList title="Use">
 79 |   <DocumentListItem
 80 |     title="Create a Workspace"
 81 |     subtitle="Create a development environment from a Git repository and start deploying."
 82 |     href="usage/workspaces"
 83 |   />
 84 |   <DocumentListItem
 85 |     title="Set a Target"
 86 |     subtitle="Learn how to set a Target for your Workspace and manage its configuration."
 87 |     href="usage/targets"
 88 |   />
 89 |   <DocumentListItem
 90 |     title="Interact with Agent Toolbox"
 91 |     subtitle="Learn how to use the Agent Toolbox to manage and interact with your Workspaces."
 92 |     href="usage/agent-toolbox"
 93 |   />
 94 |   <DocumentListItem
 95 |     title="Pre-build your Workspace"
 96 |     subtitle="Learn how to manage and reuse Prebuilds across Workspaces."
 97 |     href="usage/prebuilds"
 98 |   />
 99 |   <DocumentListItem
100 |     title="Set Default IDE"
101 |     subtitle="Automatically open your Workspace in your preferred IDE."
102 |     href="usage/ide#set-the-default-ide"
103 |   />
104 |   <DocumentListItem
105 |     title="Add Custom Samples"
106 |     subtitle="Use quick-start repositories with predefined development configurations and environments to create Workspaces."
107 |     href="usage/samples"
108 |   />
109 |   <DocumentListItem
110 |     title="Build a Container Image"
111 |     subtitle="Use Builders to create a development container image for your Workspace."
112 |     href="usage/builders"
113 |   />
114 |   <DocumentListItem
115 |     title="Deploy a Runner"
116 |     subtitle="Learn how to use and manage Runners in Daytona."
117 |     href="usage/runners"
118 |   />
119 | </DocumentList>
120 |
121 | <DocumentList title="Dive Deeper">
122 |   <DocumentListItem
123 |     title="CLI Reference"
124 |     subtitle="Learn about the Daytona CLI and how to interact with Daytona from the command line."
125 |     href="tools/cli"
126 |   />
127 |   <DocumentListItem
128 |     title="API Reference"
129 |     subtitle="Explore the Daytona API and learn how to interact with Daytona programmatically."
130 |     href="tools/api"
131 |   />
132 |   <DocumentListItem
133 |     title="Docker Extension"
134 |     subtitle="Use an embedded version of the Daytona client and server tools directly within Docker Desktop."
135 |     href="tools/docker-extension"
136 |   />
137 | </DocumentList>
138 |


--------------------------------------------------------------------------------
/src/content/legacy-docs/installation/installation.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Installation
  3 | description: Learn how to install Daytona on Linux, macOS, and Windows.
  4 | sidebar:
  5 |   label: Installation
  6 | ---
  7 |
  8 | import Aside from '@components/Aside.astro'
  9 | import { Tabs, TabItem } from '@astrojs/starlight/components';
 10 | import Homebrew from './method/homebrew.mdx'
 11 | import Nix from './method/nix.mdx'
 12 | import ScriptPowerShell from './method/script-powershell.mdx'
 13 | import ScriptUnix from './method/script-unix.mdx'
 14 | import Uninstall from './method/uninstall.mdx'
 15 | import UninstallWindows from './method/uninstall-windows.mdx'
 16 |
 17 | Install Daytona on Linux, macOS, and Windows systems.
 18 | Each operating system supports both `x86_64` and `ARM64` architectures.
 19 |
 20 | Daytona leverages [Docker](https://docs.docker.com/engine/install/) to create and manage isolated development environments.
 21 |
 22 | ## Installation
 23 |
 24 | <br />
 25 |
 26 | <Tabs>
 27 | <TabItem label="Linux" icon="linux">
 28 |
 29 | Install Daytona on Linux using the following installation script:
 30 |
 31 | ```shell
 32 | (curl -sf -L https://download.daytona.io/daytona/install.sh | sudo bash) && daytona server -y && daytona
 33 | ```
 34 |
 35 | :::note
 36 | You can install Daytona by manually downloading the binary and placing it in your `PATH`.
 37 |
 38 | ```shell
 39 | # x86-64
 40 | curl -sf -L https://download.daytona.io/daytona/v0.53/daytona-linux-amd64 -o daytona
 41 | # ARM64
 42 | curl -sf -L https://download.daytona.io/daytona/v0.53/daytona-linux-arm64 -o daytona
 43 | ```
 44 |
 45 | :::
 46 |
 47 | </TabItem>
 48 | <TabItem label="MacOS" icon="apple">
 49 |
 50 | Install Daytona on macOS using the following installation script:
 51 |
 52 | ```shell
 53 | (curl -sf -L https://download.daytona.io/daytona/install.sh | sudo bash) && daytona server -y && daytona
 54 | ```
 55 |
 56 | :::note
 57 | You can install Daytona by manually downloading the binary and placing it in your `PATH`.
 58 |
 59 | ```shell
 60 | # x86-64/Intel-based
 61 | curl -sf -L https://download.daytona.io/daytona/v0.53/daytona-darwin-amd64 -o daytona
 62 | # ARM64/Apple Silicon
 63 | curl -sf -L https://download.daytona.io/daytona/v0.53/daytona-darwin-arm64 -o daytona
 64 | ```
 65 |
 66 | :::
 67 |
 68 | </TabItem>
 69 | <TabItem label="Windows" icon="seti:windows">
 70 | Install Daytona on Windows using the following PowerShell script:
 71 |
 72 | ```powershell
 73 | $architecture = if ($env:PROCESSOR_ARCHITECTURE -eq "AMD64") { "amd64" } else { "arm64" }
 74 | md -Force "$Env:APPDATA\bin\daytona"; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]'Tls,Tls11,Tls12';
 75 | Invoke-WebRequest -URI "https://download.daytona.io/daytona/v0.53/daytona-windows-$architecture.exe" -OutFile "$Env:APPDATA\bin\daytona\daytona.exe";
 76 | $env:Path += ";" + $Env:APPDATA + "\bin\daytona"; [Environment]::SetEnvironmentVariable("Path", $env:Path, [System.EnvironmentVariableTarget]::User);
 77 | daytona serve;
 78 | ```
 79 |
 80 | :::note
 81 | You can install Daytona by manually downloading the binary and placing it in your `PATH`.
 82 |
 83 | ```sh
 84 | # x86-64
 85 | curl -sf -L https://download.daytona.io/daytona/v0.53/daytona-windows-amd64.exe -o daytona
 86 | # AArch64
 87 | curl -sf -L https://download.daytona.io/daytona/v0.53/daytona-windows-arm64.exe -o daytona
 88 | ```
 89 |
 90 | :::
 91 |
 92 | <br />
 93 |
 94 | :::tip
 95 | If you are using Windows Subsystem for Linux (WSL), you can follow the [instructions](https://github.com/daytonaio/daytona/issues/282) on how to run Daytona when using an IDE reliant on the SSH client.
 96 | :::
 97 | </TabItem>
 98 | <TabItem label="Homebrew" icon="homebrew">
 99 | <Homebrew />
100 | </TabItem>
101 | <TabItem label="Nix" icon="nix">
102 | <Nix />
103 | </TabItem>
104 | </Tabs>
105 |
106 | ## Uninstallation
107 |
108 | <Tabs>
109 | <TabItem label="Unix" icon="linux">
110 | <Uninstall />
111 | </TabItem>
112 | <TabItem label="Windows" icon="seti:windows">
113 | <UninstallWindows />
114 | </TabItem>
115 | </Tabs>
116 |


--------------------------------------------------------------------------------
/src/content/legacy-docs/installation/method/homebrew.mdx:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: Homebrew Installation
 3 | ---
 4 | import Aside from '@components/Aside.astro'
 5 | export const partial = true;
 6 |
 7 | Install Daytona via the Homebrew package manager using the following commands:
 8 |
 9 | ```shell
10 | brew tap daytonaio/tap
11 | brew install daytona
12 | ```
13 |
14 | ### Uninstall Daytona via Homebrew
15 |
16 | <Aside type="caution">
17 | This procedure is destructive and irreversible.
18 | Ensure you have a backup of any Workspace data and relevant configuration before proceeding.
19 | </Aside>
20 |
21 | <br />
22 |
23 | Run the following command to uninstall Daytona:
24 |
25 | ```shell
26 | brew uninstall daytona
27 | ```
28 |
29 | ### Update Daytona via Homebrew
30 |
31 | Run the following commands to update Daytona:
32 |
33 | ```shell
34 | brew update
35 | brew upgrade daytona
36 | ```
37 |


--------------------------------------------------------------------------------
/src/content/legacy-docs/installation/method/nix.mdx:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: Nix Installation
 3 | ---
 4 | import Aside from '@components/Aside.astro'
 5 | export const partial = true;
 6 |
 7 | Daytona is available on nixpkgs unstable as [**`daytona-bin`**](https://search.nixos.org/packages?channel=unstable&show=daytona-bin).
 8 |
 9 | <br />
10 |
11 | ### Ephemeral Usage
12 |
13 | Use **`nix-shell`** to try Daytona before permanently installing it on your system:
14 |
15 | ```shell
16 | nix-shell -p daytona-bin
17 | ```
18 |
19 | ### Install Globally
20 |
21 | To permanently install Daytona on your system, you can add it to the relevant configuration.
22 |
23 | - On NixOS systems, add **`daytona-bin`** as a system package in **`/etc/nixos/configuration.nix`**.
24 | - On other Linux systems, use [home-manager](https://github.com/nix-community/home-manager) and add **`daytona-bin`** as a local package.
25 |


--------------------------------------------------------------------------------
/src/content/legacy-docs/installation/method/script-powershell.mdx:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: PowerShell Installation
 3 | ---
 4 |
 5 | import Aside from '@components/Aside.astro'
 6 |
 7 | export const partial = true
 8 |
 9 | 1. Run the following command in PowerShell:
10 |
11 | ```powershell
12 | $architecture = if ($env:PROCESSOR_ARCHITECTURE -eq "AMD64") { "amd64" } else { "arm64" }
13 | md -Force "$Env:APPDATA\bin\daytona"; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]'Tls,Tls11,Tls12';
14 | Invoke-WebRequest -URI "https://download.daytona.io/daytona/v0.53/daytona-windows-$architecture.exe" -OutFile "$Env:APPDATA\bin\daytona\daytona.exe";
15 | $env:Path += ";" + $Env:APPDATA + "\bin\daytona"; [Environment]::SetEnvironmentVariable("Path", $env:Path, [System.EnvironmentVariableTarget]::User);
16 | daytona serve;
17 | ```
18 |
19 | <Aside type="note">
20 | You can install Daytona by manually downloading the binary and placing it in your `PATH`.
21 |
22 | ```powershell
23 | # x86-64
24 | curl -sf -L https://download.daytona.io/daytona/v0.53/daytona-windows-amd64.exe -o daytona
25 | # AArch64
26 | curl -sf -L https://download.daytona.io/daytona/v0.53/daytona-windows-arm64.exe -o daytona
27 | ```
28 |
29 | </Aside>
30 |


--------------------------------------------------------------------------------
/src/content/legacy-docs/installation/method/script-unix.mdx:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: Linux/macOS Installation
 3 | ---
 4 | import Aside from "@components/Aside.astro";
 5 | export const partial = true;
 6 |
 7 | You can install Daytona using the official installation script.
 8 |
 9 | 1. Run the following command in your shell:
10 |
11 | ```shell
12 | (curl -sf -L https://download.daytona.io/daytona/install.sh | sudo bash) && daytona server -y && daytona
13 | ```
14 |
15 | 2. Read and follow the instructions printed in your console.
16 |


--------------------------------------------------------------------------------
/src/content/legacy-docs/installation/method/uninstall-windows.mdx:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: Uninstallation Windows
 3 | ---
 4 | import Aside from "@components/Aside.astro";
 5 | export const partial = true;
 6 |
 7 | <br />
 8 |
 9 | :::caution
10 | This procedure is destructive and irreversible.
11 | Ensure you have a backup of any Workspace data and relevant configuration before proceeding.
12 | :::
13 |
14 | <br />
15 |
16 | Run the following commands to purge local Daytona data:
17 |
18 | ```shell
19 | rmdir /s /q "%LOCALAPPDATA%\daytona"
20 | ```
21 |
22 | Run the following command to remove the Daytona binary:
23 |
24 | ```shell
25 | where daytona > nul && del /f /q "$(where daytona)"
26 | ```
27 |
28 | Run the following command to remove the Daytona SSH configuration file:
29 |
30 | ```shell
31 | del /f /q "%USERPROFILE%\.ssh\daytona_config"
32 | ```
33 |
34 | Edit your `%USERPROFILE%\.ssh\config` file to remove the `Include daytona_config entry`. You can do this manually by opening the file in a text editor (e.g., Notepad):
35 |
36 | ```shell
37 | notepad "%USERPROFILE%\.ssh\config"
38 | ```
39 |
40 | Run the following command to remove the Daytona registry container:
41 |
42 | ```shell
43 | docker rm /daytona-registry
44 | ```
45 |
46 | If you have generated any autocomplete scripts for Daytona, you will need to remove them manually from your shell configuration files (e.g., `%USERPROFILE%\.bashrc`, `%USERPROFILE%\.zshrc`).
47 |
48 | To ensure all traces of Daytona are removed from your system, check and delete any related files or directories in `C:\Program Files\`, `C:\Program Files (x86)\`, and `C:\Users\%USERNAME%\AppData\Local\Temp\` directories.
49 |


--------------------------------------------------------------------------------
/src/content/legacy-docs/installation/method/uninstall.mdx:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: Uninstallation
 3 | ---
 4 | import Aside from "@components/Aside.astro";
 5 | export const partial = true;
 6 |
 7 | <br />
 8 |
 9 | :::caution
10 | This procedure is destructive and irreversible.
11 | Ensure you have a backup of any Workspace data and relevant configuration before proceeding.
12 | :::
13 |
14 | <br />
15 |
16 | Run the following commands to purge local Daytona data and remove the binary:
17 |
18 | ```shell
19 | daytona purge
20 | ```
21 |
22 | Run the following commands if the `daytona purge` command does not work, or if you want to manually purge local Daytona data and remove the binary:
23 |
24 | ```shell
25 | rm -rf ~/Library/Application\ Support/daytona
26 | sudo rm $(whereis daytona | awk '{print $2}')
27 | ```
28 |
29 | Additionally, to fully remove all Daytona-related configurations and components, run the following command:
30 |
31 | ```shell
32 | rm -f ~/.ssh/daytona_config
33 | ```
34 |
35 | Edit your `~/.ssh/config` file to remove the `Include daytona_config entry`. You can do this manually by running the following command:
36 |
37 | ```shell
38 | nano ~/.ssh/config
39 | ```
40 |
41 | Remove the local Daytona registry container by running the following command:
42 |
43 | ```shell
44 | docker rm /daytona-registry
45 | ```
46 |
47 | If you have generated any autocomplete scripts for Daytona, you will need to remove them manually from your shell configuration files (e.g., `.bashrc`, `.zshrc`).
48 |


--------------------------------------------------------------------------------
/src/content/legacy-docs/misc/telemetry.mdx:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: Telemetry
 3 | description: Information about telemetry data gathered by Daytona.
 4 | sidebar:
 5 |   label: Telemetry
 6 | ---
 7 |
 8 | import Label from '@components/Label.astro'
 9 |
10 | <Label>
11 |   Distribution: **Open Source**, **Self-Managed**
12 | </Label>
13 |
14 | All telemetry data is **completely anonymous** and **does not** include any personally identifiable information (PII) or user secrets.
15 | Participation is optional and you may opt-out at any time.
16 |
17 | ## The Goal
18 |
19 | The goal of gathering telemetry data in the CLI is exclusively for the purpose of improving the Daytona ecosystem.
20 | Data gathered from the CLI will allow us to gain more insights into the usage of the binary, help us track errors and improve user experience.
21 |
22 | The data **does** include:
23 |
24 | - **CLI command usage**
25 |
26 |   This includes the name of the command that was run, how it was called (e.g., was an alias used?),
27 |   the source (e.g., local CLI or inside of a project), the version of the binary, and the execution time.
28 |
29 | - **API server request and response data**
30 |
31 |   In the request and response payloads, only public data is included.
32 |   This data may include any public git repositories used to create workspaces and any public container images used to create workspaces.
33 |
34 |   The data also includes the path of the request, with URL parameters that might include PII stripped (e.g., URI: `/workspace/:workspaceId/:projectName/state` is provided as is,
35 |   with `workspaceId` and `projectName` not provided to the telemetry service).
36 |   Additionally, the request method, binary version, query, and source are gathered.
37 |
38 | - **Relevant server events**
39 |
40 |   Currently, only workspace lifecycle events are gathered (creation, stop, start, delete, etc.), but this might be expanded in the future.
41 |
42 | The data **does not** include:
43 |
44 | - **CLI command arguments**
45 |
46 |   Arguments might contain PII or user secrets, so they are left out.
47 |
48 | - **Full API request and response payloads**
49 |
50 |   Payloads may contain PII or user secrets, so only public data is shared with the telemetry collection service.
51 |
52 | - **Environment variables**
53 |
54 |   Any environment variables set on projects created by the user, including Daytona-set environment variables, are not included.
55 |
56 | - **Geolocation information and IP address**
57 |
58 |   No geolocation information about the user or their IP address is included.
59 |
60 | ## Gathering Policy
61 |
62 | Telemetry gathering in the CLI is **opt-out**. This means that telemetry data is gathered by default because it does not include any PII.
63 |
64 | - To disable telemetry, users can run `daytona telemetry disable`.
65 |
66 | - To enable telemetry, users can run `daytona telemetry enable`.
67 |
68 | ## CLI Identifier
69 |
70 | All telemetry events contain a unique identifier. The ID is set in the CLI configuration.
71 | The purpose of this identifier is to provide a way to aggregate telemetry data from the same CLI across different sessions and workspaces.
72 | This means that the CLI ID is shared between the CLI and any workspaces the user might create.
73 |
74 | ## Data Protection
75 |
76 | We use <a href="https://posthog.com/" target="_blank">Posthog</a> as our Telemetry service of choice.
77 | The data is stored in the EU under the Daytona organization account.
78 | The data is available only to a subset of Daytona maintainers and is only used for the purpose of improving the Daytona ecosystem.
79 | The telemetry data that we track has never and will never be sold or monetized in any form.
80 |
81 | ## Debugging
82 |
83 | Telemetry events can be debugged by setting `LOG_LEVEL=trace` which will output information about the telemetry event queue.
84 |


--------------------------------------------------------------------------------
/src/content/legacy-docs/misc/troubleshooting.mdx:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: Troubleshooting
 3 | description: Troubleshooting Daytona
 4 | sidebar:
 5 |   label: Troubleshooting
 6 | ---
 7 |
 8 | You can use the following troubleshooting tips to resolve common issues with Daytona.
 9 |
10 | ## Connectivity Issues
11 |
12 | ### VPNs and Firewalls
13 |
14 | If your VPN is configured to handle all IP traffic or if your Firewall is configured to block certain IP addresses, they may prevent Daytona from successfully connecting to the reverse proxy service.
15 | The issue can be manifested in different ways, including:
16 |
17 | - Unable to start the Daytona Server due to the `control not running` error.
18 | - Unable to successfully create Workspaces due to the `Failed to connect to server: Get "http://server/health": lookup server...` error.
19 | - Unable to enter a Workspace using `daytona code` or `daytona ssh` due to the timeout when establishing a Tailscale connection.
20 |
21 | To work around this issue, you may need to add the following IP address exceptions to your VPN or Firewall:
22 |
23 | - `35.198.165.62` - Europe-based reverse proxy
24 | - `34.133.75.4` - US-based reverse proxy
25 |
26 | ## WSL2 with Visual Studio Code
27 |
28 | ### Description
29 |
30 | Running Daytona on WSL2 does not work seamlessly with the Visual Studio Code IDE. This issue arises because Visual Studio Code relies on the native Windows SSH client, whereas Daytona modifies the Linux SSH configuration file to set up workspace-specific SSH connection configurations.
31 |
32 | Daytona uses a ProxyCommand that invokes `daytona ssh-proxy` as defined in the SSH configuration. This configuration assumes that the Daytona binary is located within the Linux filesystem, which creates a conflict with Visual Studio Code's reliance on the Windows environment.
33 |
34 | This issue is not specific to Daytona but rather stems from a limitation in the Visual Studio Code remote development plugin. The plugin does not currently support passing a custom "remote SSH path" flag when invoking the `code` CLI. Without this feature, Daytona's reliance on Linux-specific configurations conflicts with Visual Studio Code's dependency on Windows-native tools.
35 |
36 | ### Solution
37 |
38 | While awaiting official support for a "remote SSH path" flag in the Visual Studio Code plugin, the following workaround can address the issue. This solution involves creating a script and modifying configurations to align the Windows and Linux SSH clients for seamless operation.
39 |
40 | 1. Create a **`wsl_ssh.bat`** script with the following content:
41 |
42 | ```bash
43 | C:\Windows\system32\wsl.exe ssh %*
44 | ```
45 |
46 | 2. Save the **`wsl_ssh.bat`** script in the following directory:
47 |
48 | ```text
49 | C:\Users\<USERNAME>\AppData\Roaming\bin\wsl_ssh.bat
50 | ```
51 |
52 | 3. Update the Visual Studio Code **`settings.json`** file to use the **`wsl_ssh.bat`** script as the SSH path:
53 |
54 | ```sh
55 | "remote.SSH.path": "C:\\Users\\<USERNAME>\\AppData\\Roaming\\bin\\wsl_ssh.bat"
56 | ```
57 |
58 | :::tip
59 | The `settings.json` file is located in the following directory:
60 |
61 | `C:\Users\<USERNAME>\AppData\Roaming\Code\User\settings.json`
62 | :::
63 |
64 | <br />
65 |
66 | 4. Create a symlink to synchronize the native SSH configuration with the WSL2 SSH configuration:
67 |
68 | ```sh
69 | ln -s /mnt/c/Users/<USERNAME>/.ssh/config config
70 | ```
71 |
72 | This ensures the SSH configuration is consistent between environments.
73 |


--------------------------------------------------------------------------------
/src/content/legacy-docs/sdk/file-system-operations.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: File System Operations
  3 | ---
  4 |
  5 | import Label from '@components/Label.astro'
  6 | import { Tabs, TabItem } from '@astrojs/starlight/components';
  7 |
  8 | <Label>
  9 |   Distribution: **Open Source**
 10 | </Label>
 11 |
 12 | The Daytona SDK provides comprehensive file system operations through the `fs` module in Sandboxes. This guide covers all available file system operations and best practices.
 13 |
 14 | ## Basic Operations
 15 |
 16 | Daytona SDK provides an option to interact with the file system in Sandboxes. You can perform various operations like listing files, creating directories, reading and writing files, and more.
 17 |
 18 | ### Listing Files and Directories
 19 |
 20 | Daytona SDK provides an option to list files and directories in a Sandbox using Python and TypeScript.
 21 |
 22 | <Tabs>
 23 | <TabItem label="Python" icon="seti:python">
 24 | ```python
 25 | # List files in a directory
 26 | files = workspace.fs.list_files("/workspace")
 27 | for file in files:
 28 |     print(f"Name: {file.name}")
 29 |     print(f"Is directory: {file.is_dir}")
 30 |     print(f"Size: {file.size}")
 31 |     print(f"Modified: {file.mod_time}")
 32 |
 33 | ```
 34 | </TabItem>
 35 | <TabItem label="TypeScript" icon="seti:typescript">
 36 | ```typescript
 37 | // List files in a directory
 38 | const files = await workspace.fs.listFiles("/workspace");
 39 |
 40 | files.forEach(file => {
 41 |     console.log(`Name: ${file.name}`);
 42 |     console.log(`Is directory: ${file.isDir}`);
 43 |     console.log(`Size: ${file.size}`);
 44 |     console.log(`Modified: ${file.modTime}`);
 45 | });
 46 | ```
 47 |
 48 | </TabItem>
 49 | </Tabs>
 50 |
 51 | ### Creating Directories
 52 |
 53 | Daytona SDK provides an option to create directories with specific permissions using Python and TypeScript.
 54 |
 55 | <Tabs>
 56 | <TabItem label="Python" icon="seti:python">
 57 | ```python
 58 | # Create a directory
 59 | workspace.fs.create_folder("/workspace/new-dir")
 60 |
 61 | # Create with specific permissions
 62 |
 63 | workspace.fs.create_folder("/workspace/new-dir", "755")
 64 |
 65 | ```
 66 | </TabItem>
 67 | <TabItem label="TypeScript" icon="seti:typescript">
 68 | ```typescript
 69 | // Create a directory
 70 | await workspace.fs.createFolder("/workspace/new-dir");
 71 |
 72 | // Create with specific permissions
 73 | await workspace.fs.createFolder("/workspace/new-dir", "755");
 74 | ```
 75 |
 76 | </TabItem>
 77 | </Tabs>
 78 |
 79 | ### File Operations
 80 |
 81 | Daytona SDK provides options to read, write, upload, download, and delete files in Sandboxes using Python and TypeScript.
 82 |
 83 | <Tabs>
 84 | <TabItem label="Python" icon="seti:python">
 85 | ```python
 86 | # Upload a file
 87 | with open("local_file.txt", "rb") as f:
 88 |     content = f.read()
 89 | workspace.fs.upload_file("/workspace/remote_file.txt", content)
 90 |
 91 | # Download a file
 92 |
 93 | content = workspace.fs.download_file("/workspace/remote_file.txt")
 94 | with open("local_file.txt", "wb") as f:
 95 |     f.write(content)
 96 |
 97 | # Delete a file
 98 |
 99 | workspace.fs.delete_file("/workspace/file.txt")
100 |
101 | ```
102 | </TabItem>
103 | <TabItem label="TypeScript" icon="seti:typescript">
104 | ```typescript
105 | // Upload a file
106 | const fileContent = new File(
107 |     [Buffer.from('Hello, World!')],
108 |     'data.txt',
109 |     { type: 'text/plain' }
110 | );
111 | await workspace.fs.uploadFile("/workspace/remote_file.txt", fileContent);
112 |
113 | // Download a file
114 | const downloadedFile = await workspace.fs.downloadFile("/workspace/remote_file.txt");
115 | console.log('File content:', downloadedFile.toString())
116 |
117 | // Delete a file
118 | await workspace.fs.deleteFile("/workspace/file.txt");
119 | ```
120 |
121 | </TabItem>
122 | </Tabs>
123 |
124 | ## Advanced Operations
125 |
126 | Daytona SDK provides advanced file system operations like file permissions, search and replace, and more.
127 |
128 | ### File Permissions
129 |
130 | Daytona SDK provides an option to set file permissions, get file permissions, and set directory permissions recursively using Python and TypeScript.
131 |
132 | <Tabs>
133 | <TabItem label="Python" icon="seti:python">
134 | ```python
135 | # Set file permissions
136 | workspace.fs.set_file_permissions("/workspace/file.txt", "644")
137 |
138 | # Get file permissions
139 |
140 | file_info = workspace.fs.get_file_info("/workspace/file.txt")
141 | print(f"Permissions: {file_info.permissions}")
142 |
143 | ```
144 | </TabItem>
145 | <TabItem label="TypeScript" icon="seti:typescript">
146 | ```typescript
147 | // Set file permissions
148 | await workspace.fs.setFilePermissions("/workspace/file.txt", { mode: "644" });
149 |
150 | // Get file permissions
151 | const fileInfo = await workspace.fs.getFileDetails("/workspace/file.txt");
152 | console.log(`Permissions: ${fileInfo.permissions}`);
153 | ```
154 |
155 | </TabItem>
156 | </Tabs>
157 |
158 | ### File Search and Replace
159 |
160 | Daytona SDK provides an option to search for text in files and replace text in files using Python and TypeScript.
161 |
162 | <Tabs>
163 | <TabItem label="Python" icon="seti:python">
164 | ```python
165 | # Search for text in files; if a folder is specified, the search is recursive
166 | results = workspace.fs.find_files(
167 |     path="/workspace/src",
168 |     pattern="text-of-interest"
169 | )
170 | for match in results:
171 |     print(f"Absolute file path: {match.file}")
172 |     print(f"Line number: {match.line}")
173 |     print(f"Line content: {match.content}")
174 |     print("\n")
175 |
176 | # Replace text in files
177 |
178 | workspace.fs.replace_in_files(
179 |     files=["/workspace/file1.txt", "/workspace/file2.txt"],
180 |     pattern="old_text",
181 |     new_value="new_text"
182 | )
183 |
184 | ```
185 | </TabItem>
186 | <TabItem label="TypeScript" icon="seti:typescript">
187 | ```typescript
188 | // Search for text in files; if a folder is specified, the search is recursive
189 | const results = await workspace.fs.findFiles({
190 |     path="/workspace/src",
191 |     pattern: "text-of-interest"
192 | });
193 | results.forEach(match => {
194 |     console.log('Absolute file path:', match.file)
195 |     console.log('Line number:', match.line)
196 |     console.log('Line content:', match.content)
197 | });
198 |
199 | // Replace text in files
200 | await workspace.fs.replaceInFiles(
201 |     ["/workspace/file1.txt", "/workspace/file2.txt"],
202 |     "old_text",
203 |     "new_text"
204 | );
205 | ```
206 |
207 | </TabItem>
208 | </Tabs>
209 |


--------------------------------------------------------------------------------
/src/content/legacy-docs/sdk/git-operations.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Git Operations
  3 | ---
  4 |
  5 | import Label from '@components/Label.astro'
  6 | import { Tabs, TabItem } from '@astrojs/starlight/components';
  7 |
  8 | <Label>
  9 |   Distribution: **Open Source**
 10 | </Label>
 11 |
 12 | The Daytona SDK provides built-in Git support through the `git` module in Sandboxes. This guide covers all available Git operations and best practices.
 13 |
 14 | ## Basic Operations
 15 |
 16 | Daytona SDK provides an option to clone, check status, and manage Git repositories in Sandboxes. You can interact with Git repositories using the `git` module.
 17 |
 18 | ### Cloning Repositories
 19 |
 20 | Daytona SDK provides an option to clone Git repositories into Sandboxes using Python and TypeScript. You can clone public or private repositories, specific branches, and authenticate using personal access tokens.
 21 |
 22 | <Tabs>
 23 | <TabItem label="Python" icon="seti:python">
 24 | ```python
 25 | # Basic clone
 26 | workspace.git.clone(
 27 |     url="https://github.com/user/repo.git",
 28 |     path="/workspace/repo"
 29 | )
 30 |
 31 | # Clone with authentication
 32 |
 33 | workspace.git.clone(
 34 |     url="<https://github.com/user/repo.git>",
 35 |     path="/workspace/repo",
 36 |     username="git",
 37 |     password="personal_access_token"
 38 | )
 39 |
 40 | # Clone specific branch
 41 |
 42 | workspace.git.clone(
 43 |     url="<https://github.com/user/repo.git>",
 44 |     path="/workspace/repo",
 45 |     branch="develop"
 46 | )
 47 |
 48 | ```
 49 | </TabItem>
 50 | <TabItem label="TypeScript" icon="seti:typescript">
 51 | ```typescript
 52 | // Basic clone
 53 | await workspace.git.clone(
 54 |     "https://github.com/user/repo.git",
 55 |     "/workspace/repo"
 56 | );
 57 |
 58 | // Clone with authentication
 59 | await workspace.git.clone(
 60 |     "https://github.com/user/repo.git",
 61 |     "/workspace/repo",
 62 |     undefined,
 63 |     undefined,
 64 |     "git",
 65 |     "personal_access_token"
 66 | );
 67 |
 68 | // Clone specific branch
 69 | await workspace.git.clone(
 70 |     "https://github.com/user/repo.git",
 71 |     "/workspace/repo",
 72 |     "develop"
 73 | );
 74 | ```
 75 |
 76 | </TabItem>
 77 | </Tabs>
 78 |
 79 | ### Repository Status
 80 |
 81 | Daytona SDK provides an option to check the status of Git repositories in Sandboxes. You can get the current branch, modified files, number of commits ahead and behind main branch using Python and TypeScript.
 82 |
 83 | <Tabs>
 84 | <TabItem label="Python" icon="seti:python">
 85 | ```python
 86 | # Get repository status
 87 | status = workspace.git.status("/workspace/repo")
 88 | print(f"Current branch: {status.current_branch}")
 89 | print(f"Commits ahead: {status.ahead}")
 90 | print(f"Commits behind: {status.behind}")
 91 | for file in status.file_status:
 92 |     print(f"File: {file.name}")
 93 |
 94 | # List branches
 95 |
 96 | response = workspace.git.branches("/workspace/repo")
 97 | for branch in response.branches:
 98 |     print(f"Branch: {branch}")
 99 |
100 | ```
101 | </TabItem>
102 | <TabItem label="TypeScript" icon="seti:typescript">
103 | ```typescript
104 | // Get repository status
105 | const status = await workspace.git.status("/workspace/repo");
106 | console.log(`Current branch: ${status.currentBranch}`);
107 | console.log(`Commits ahead: ${status.ahead}`);
108 | console.log(`Commits behind: ${status.behind}`);
109 | status['FileStatus[]'].forEach(file => {
110 |     console.log(`File: ${file.name}`);
111 | });
112 |
113 | // List branches
114 | const response = await workspace.git.branches("/workspace/repo");
115 | response.branches.forEach(branch => {
116 |     console.log(`Branch: ${branch}`);
117 | });
118 | ```
119 |
120 | </TabItem>
121 | </Tabs>
122 |
123 | ## Branch Operations
124 |
125 | Daytona SDK provides an option to manage branches in Git repositories. You can create, switch, and delete branches.
126 |
127 | ### Managing Branches
128 |
129 | Daytona SDK provides an option to create, switch, and delete branches in Git repositories using Python and TypeScript.
130 |
131 | <Tabs>
132 | <TabItem label="Python" icon="seti:python">
133 | ```python
134 | # Create new branch
135 | workspace.git.create_branch("/workspace/repo", "feature/new-feature")
136 |
137 | # Switch branch
138 |
139 | workspace.git.checkout("/workspace/repo", "feature/new-feature")
140 |
141 | # Delete branch
142 |
143 | workspace.git.delete_branch("/workspace/repo", "feature/old-feature")
144 |
145 | ```
146 | </TabItem>
147 | <TabItem label="TypeScript" icon="seti:typescript">
148 | ```typescript
149 | // Create new branch
150 | await workspace.git.createBranch("/workspace/repo", "feature/new-feature");
151 |
152 | // Switch branch
153 | await workspace.git.checkout("/workspace/repo", "feature/new-feature");
154 |
155 | // Delete branch
156 | await workspace.git.deleteBranch("/workspace/repo", "feature/old-feature");
157 | ```
158 |
159 | </TabItem>
160 | </Tabs>
161 |
162 | ## Staging and Committing
163 |
164 | Daytona SDK provides an option to stage and commit changes in Git repositories. You can stage specific files, all changes, and commit with a message using Python and TypeScript.
165 |
166 | ### Working with Changes
167 |
168 | <Tabs>
169 | <TabItem label="Python" icon="seti:python">
170 | ```python
171 | # Stage specific files
172 | workspace.git.add("/workspace/repo", ["file1.txt", "file2.txt"])
173 |
174 | # Stage all changes
175 |
176 | workspace.git.add("/workspace/repo", ["."])
177 |
178 | # Commit changes
179 |
180 | workspace.git.commit("/workspace/repo", "feat: add new feature")
181 |
182 | # Get commit history
183 |
184 | commits = workspace.git.log("/workspace/repo")
185 | for commit in commits:
186 |     print(f"Commit: {commit.hash}")
187 |     print(f"Author: {commit.author}")
188 |     print(f"Message: {commit.message}")
189 |
190 | ```
191 | </TabItem>
192 | <TabItem label="TypeScript" icon="seti:typescript">
193 | ```typescript
194 | // Stage specific files
195 | await workspace.git.add("/workspace/repo", ["file1.txt", "file2.txt"]);
196 |
197 | // Stage all changes
198 | await workspace.git.add("/workspace/repo", ["."]);
199 |
200 | // Commit changes
201 | await workspace.git.commit("/workspace/repo", "feat: add new feature");
202 |
203 | // Get commit history
204 | const commits = await workspace.git.log("/workspace/repo");
205 | commits.forEach(commit => {
206 |     console.log(`Commit: ${commit.hash}`);
207 |     console.log(`Author: ${commit.author}`);
208 |     console.log(`Message: ${commit.message}`);
209 | });
210 | ```
211 |
212 | </TabItem>
213 | </Tabs>
214 |
215 | ## Remote Operations
216 |
217 | Daytona SDK provides an option to work with remote repositories in Git. You can push changes, pull changes, and list remotes.
218 |
219 | ### Working with Remotes
220 |
221 | Daytona SDK provides an option to push, pull, and list remotes in Git repositories using Python and TypeScript.
222 |
223 | <Tabs>
224 | <TabItem label="Python" icon="seti:python">
225 | ```python
226 | # Push changes
227 | workspace.git.push("/workspace/repo")
228 |
229 | # Pull changes
230 |
231 | workspace.git.pull("/workspace/repo")
232 |
233 | # List remotes
234 |
235 | remotes = workspace.git.list_remotes("/workspace/repo")
236 | for remote in remotes:
237 |     print(f"Remote: {remote.name} URL: {remote.url}")
238 |
239 | ```
240 | </TabItem>
241 | <TabItem label="TypeScript" icon="seti:typescript">
242 | ```typescript
243 | // Push changes
244 | await workspace.git.push("/workspace/repo");
245 |
246 | // Push to specific remote and branch
247 | await workspace.git.push("/workspace/repo", "origin", "feature/new-feature");
248 |
249 | // Pull changes
250 | await workspace.git.pull("/workspace/repo");
251 |
252 | // Pull from specific remote and branch
253 | await workspace.git.pull("/workspace/repo", "origin", "main");
254 | ```
255 |
256 | </TabItem>
257 | </Tabs>
258 |


--------------------------------------------------------------------------------
/src/content/legacy-docs/sdk/language-server-protocol.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Language Server Protocol
  3 | ---
  4 |
  5 | import Label from '@components/Label.astro'
  6 | import { Tabs, TabItem } from '@astrojs/starlight/components';
  7 |
  8 | <Label>
  9 |   Distribution: **Open Source**
 10 | </Label>
 11 |
 12 | The Daytona SDK provides Language Server Protocol (LSP) support through Sandbox instances. This enables advanced language features like code completion, diagnostics, and more.
 13 |
 14 | ## Creating LSP Servers
 15 |
 16 | Daytona SDK provides an option to create LSP servers using Python and TypeScript.
 17 |
 18 | <Tabs>
 19 | <TabItem label="Python" icon="seti:python">
 20 | ```python
 21 | from daytona_sdk import Daytona, LspLanguageId
 22 |
 23 | # Create Sandbox
 24 |
 25 | daytona = Daytona()
 26 | workspace = daytona.create()
 27 |
 28 | # Create LSP server for Python
 29 |
 30 | lsp_server = workspace.create_lsp_server(
 31 |     language_id=LspLanguageId.PYTHON,
 32 |     path_to_project="/workspace/project"
 33 | )
 34 |
 35 | ```
 36 | </TabItem>
 37 | <TabItem label="TypeScript" icon="seti:typescript">
 38 | ```typescript
 39 | import { Daytona, LspLanguageId } from '@daytonaio/sdk'
 40 |
 41 | // Create workspace
 42 | const daytona = new Daytona()
 43 | const workspace = await daytona.create({
 44 |     language: 'typescript'
 45 | })
 46 |
 47 | // Create LSP server for TypeScript
 48 | const lspServer = workspace.createLspServer(
 49 |     LspLanguageId.TYPESCRIPT,
 50 |     "/workspace/project"
 51 | )
 52 | ```
 53 |
 54 | </TabItem>
 55 | </Tabs>
 56 |
 57 | ## Supported Languages
 58 |
 59 | Daytona SDK provides an option to create LSP servers for various languages through the `LspLanguageId` enum in Python and TypeScript.
 60 |
 61 | <Tabs>
 62 | <TabItem label="Python" icon="seti:python">
 63 | ```python
 64 | from daytona_sdk import LspLanguageId
 65 |
 66 | # Available language IDs
 67 |
 68 | LspLanguageId.PYTHON
 69 | LspLanguageId.TYPESCRIPT
 70 |
 71 | ```
 72 | </TabItem>
 73 | <TabItem label="TypeScript" icon="seti:typescript">
 74 | ```typescript
 75 | import { LspLanguageId } from '@daytonaio/sdk'
 76 |
 77 | // Available language IDs
 78 | LspLanguageId.PYTHON
 79 | LspLanguageId.TYPESCRIPT
 80 | ```
 81 |
 82 | </TabItem>
 83 | </Tabs>
 84 |
 85 | - `LspLanguageId.PYTHON`: Python language server.
 86 | - `LspLanguageId.TYPESCRIPT`: TypeScript/JavaScript language server.
 87 |
 88 | ## LSP Features
 89 |
 90 | Daytona SDK provides various LSP features for code analysis and editing.
 91 |
 92 | ### Code Completion
 93 |
 94 | Daytona SDK provides an option to get code completions for a specific position in a file using Python and TypeScript.
 95 |
 96 | <Tabs>
 97 | <TabItem label="Python" icon="seti:python">
 98 | ```python
 99 | completions = lsp_server.completions(
100 |     path="/workspace/project/main.py",
101 |     position={"line": 10, "character": 15}
102 | )
103 | print(f"Completions: {completions}")
104 | ```
105 | </TabItem>
106 | <TabItem label="TypeScript" icon="seti:typescript">
107 | ```typescript
108 | const completions = await lspServer.getCompletions({
109 |     path: "/workspace/project/main.ts",
110 |     position: { line: 10, character: 15 }
111 | })
112 | console.log('Completions:', completions)
113 | ```
114 | </TabItem>
115 | </Tabs>
116 |


--------------------------------------------------------------------------------
/src/content/legacy-docs/sdk/process-code-execution.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Process and Code Execution
  3 | ---
  4 |
  5 | import Label from '@components/Label.astro'
  6 | import { Tabs, TabItem } from '@astrojs/starlight/components';
  7 |
  8 | <Label>
  9 |   Distribution: **Open Source**
 10 | </Label>
 11 |
 12 | The Daytona SDK provides powerful process and code execution capabilities through the `process` module in Sandboxes. This guide covers all available process operations and best practices.
 13 |
 14 | ## Code Execution
 15 |
 16 | Daytona SDK provides an option to execute code in Python and TypeScript.
 17 |
 18 | ### Running Code
 19 |
 20 | Daytona SDK provides an option to run code snippets in Python and TypeScript. You can execute code with input, timeout, and environment variables.
 21 |
 22 | <Tabs>
 23 | <TabItem label="Python" icon="seti:python">
 24 | ```python
 25 | # Run Python code
 26 | response = workspace.process.code_run('''
 27 | def greet(name):
 28 |     return f"Hello, {name}!"
 29 |
 30 | print(greet("Daytona"))
 31 | ''')
 32 |
 33 | print(response.result)
 34 |
 35 | ```
 36 | </TabItem>
 37 | <TabItem label="TypeScript" icon="seti:typescript">
 38 | ```typescript
 39 | // Run TypeScript code
 40 | const response = await workspace.process.codeRun(`
 41 | function greet(name: string): string {
 42 |     return \`Hello, \${name}!\`;
 43 | }
 44 |
 45 | console.log(greet("Daytona"));
 46 | `);
 47 | console.log(response.result);
 48 |
 49 | // Run code with input
 50 | const response = await workspace.process.codeRun(
 51 |     'const name = prompt("Enter name: ");\nconsole.log(`Hello, ${name}!`);',
 52 |     { input: "Daytona" }
 53 | );
 54 | console.log(response.result);
 55 |
 56 | // Run code with timeout
 57 | const response = await workspace.process.codeRun(
 58 |     'setTimeout(() => console.log("Done"), 2000);',
 59 |     { timeout: 5000 }
 60 | );
 61 | console.log(response.result);
 62 | ```
 63 |
 64 | </TabItem>
 65 | </Tabs>
 66 |
 67 | ## Process Execution
 68 |
 69 | Daytona SDK provides an option to execute shell commands and manage background processes in Sandboxes.
 70 |
 71 | ### Running Commands
 72 |
 73 | Daytona SDK provides an option to execute shell commands in Python and TypeScript. You can run commands with input, timeout, and environment variables.
 74 |
 75 | <Tabs>
 76 | <TabItem label="Python" icon="seti:python">
 77 | ```python
 78 | # Execute shell command
 79 | response = workspace.process.exec("ls -la")
 80 | print(response.output)
 81 | ```
 82 | </TabItem>
 83 | <TabItem label="TypeScript" icon="seti:typescript">
 84 | ```typescript
 85 | // Execute shell command
 86 | const response = await workspace.process.executeCommand("ls -la");
 87 | console.log(response.output);
 88 | ```
 89 | </TabItem>
 90 | </Tabs>
 91 |
 92 | ## Sessions (Background Processes)
 93 |
 94 | Daytona SDK provides an option to start, stop, and manage background process sessions in Sandboxes. You can run long-running commands, monitor process status, and list all running processes.
 95 |
 96 | ### Managing Long-Running Processes
 97 |
 98 | Daytona SDK provides an option to start and stop background processes. You can run long-running commands and monitor process status.
 99 |
100 | <Tabs>
101 | <TabItem label="Python" icon="seti:python">
102 | ```python
103 | # Check session's executed commands
104 | session = workspace.process.get_session(session_id)
105 | print(f"Session {process_id}:")
106 | for command in session.commands:
107 |     print(f"Command: {command.command}, Exit Code: {command.exit_code}")
108 |
109 | # List all running sessions
110 |
111 | sessions = workspace.process.list_sessions()
112 | for session in sessions:
113 |     print(f"PID: {session.id}, Commands: {session.commands}")
114 |
115 | ```
116 | </TabItem>
117 | <TabItem label="TypeScript" icon="seti:typescript">
118 | ```typescript
119 | // Check session's executed commands
120 | const session = await workspace.process.getSession(sessionId);
121 | console.log(`Session ${sessionId}:`);
122 | for (const command of session.commands) {
123 |     console.log(`Command: ${command.command}, Exit Code: ${command.exitCode}`);
124 | }
125 |
126 | // List all running sessions
127 | const sessions = await workspace.process.listSessions();
128 | for (const session of sessions) {
129 |     console.log(`PID: ${session.id}, Commands: ${session.commands}`);
130 | }
131 |
132 | ```
133 |
134 | </TabItem>
135 | </Tabs>
136 |
137 | ## Best Practices
138 |
139 | Daytona SDK provides best practices for process and code execution in Sandboxes.
140 |
141 | 1. **Resource Management**
142 |
143 | - Use sessions for long-running operations
144 | - Clean up sessions after execution
145 | - Handle session exceptions properly
146 |
147 | <Tabs>
148 | <TabItem label="Python" icon="seti:python">
149 |    ```python
150 |    # Python - Clean up session
151 |    session_id = "long-running-cmd"
152 |    try:
153 |        workspace.process.create_session(session_id)
154 |        session = workspace.process.get_session(session_id)
155 |        # Do work...
156 |    finally:
157 |        workspace.process.delete_session(session.session_id)
158 |    ```
159 | </TabItem>
160 | <TabItem label="TypeScript" icon="seti:typescript">
161 |    ```typescript
162 |    // TypeScript - Clean up session
163 |    const sessionId = "long-running-cmd";
164 |    try {
165 |        await workspace.process.createSession(sessionId);
166 |        const session = await workspace.process.getSession(sessionId);
167 |        // Do work...
168 |    } finally {
169 |        await workspace.process.deleteSession(session.sessionId);
170 |    }
171 |    ```
172 | </TabItem>
173 | </Tabs>
174 |
175 | 2. **Error Handling**
176 |
177 | - Handle process exceptions properly
178 | - Log error details for debugging
179 | - Use try-catch blocks for error handling
180 |
181 | <Tabs>
182 | <TabItem label="Python" icon="seti:python">
183 | ```python
184 | try:
185 |     response = workspace.process.code_run("invalid python code")
186 | except ProcessExecutionError as e:
187 |     print(f"Execution failed: {e}")
188 |     print(f"Exit code: {e.exit_code}")
189 |     print(f"Error output: {e.stderr}")
190 | ```
191 | </TabItem>
192 | <TabItem label="TypeScript" icon="seti:typescript">
193 | ```typescript
194 | try {
195 |     const response = await workspace.process.codeRun("invalid typescript code");
196 | } catch (e) {
197 |     if (e instanceof ProcessExecutionError) {
198 |         console.error("Execution failed:", e);
199 |         console.error("Exit code:", e.exitCode);
200 |         console.error("Error output:", e.stderr);
201 |     }
202 | }
203 | ```
204 | </TabItem>
205 | </Tabs>
206 |
207 | ## Common Issues
208 |
209 | Daytona SDK provides an option to troubleshoot common issues related to process execution and code execution.
210 |
211 | ### Process Execution Failed
212 |
213 | - Check command syntax
214 | - Verify required dependencies
215 | - Ensure sufficient permissions
216 |
217 | ### Process Timeout
218 |
219 | - Adjust timeout settings
220 | - Optimize long-running operations
221 | - Consider using background processes
222 |
223 | ### Resource Limits
224 |
225 | - Monitor process memory usage
226 | - Handle process cleanup properly
227 | - Use appropriate resource constraints
228 |


--------------------------------------------------------------------------------
/src/content/legacy-docs/sdk/sandbox-management.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Sandbox Management
  3 | ---
  4 |
  5 | import Label from '@components/Label.astro'
  6 | import { Tabs, TabItem } from '@astrojs/starlight/components';
  7 |
  8 | <Label>
  9 |   Distribution: **Open Source**
 10 | </Label>
 11 |
 12 | Sandboxes are isolated development environments managed by Daytona. This guide covers how to create, manage, and remove Sandboxes using the SDK.
 13 |
 14 | ## Creating Sandboxes
 15 |
 16 | Daytona SDK provides an option to create Sandboxes with default or custom configurations. You can specify the language, image, resources, environment variables, and volumes for the Sandbox.
 17 |
 18 | ### Basic Sandbox Creation
 19 |
 20 | Daytona SDK provides methods to create Sandboxes with default configurations, specific languages, or custom IDs using Python and TypeScript.
 21 |
 22 | <Tabs>
 23 | <TabItem label="Python" icon="seti:python">
 24 | ```python
 25 | from daytona_sdk import Daytona
 26 |
 27 | daytona = Daytona()
 28 |
 29 | # Create a basic Sandbox
 30 |
 31 | workspace = daytona.create()
 32 |
 33 | # Create a Sandbox with specific language
 34 |
 35 | params = CreateWorkspaceParams(language="python")
 36 | workspace = daytona.create(params)
 37 |
 38 | # Create a Sandbox with custom ID
 39 |
 40 | params = CreateWorkspaceParams(id="my-workspace")
 41 | workspace = daytona.create(params)
 42 |
 43 | ```
 44 | </TabItem>
 45 | <TabItem label="TypeScript" icon="seti:typescript">
 46 | ```typescript
 47 | import { Daytona } from '@daytonaio/sdk';
 48 |
 49 | const daytona = new Daytona();
 50 |
 51 | // Create a basic workspace
 52 | const workspace = await daytona.create();
 53 |
 54 | // Create a workspace with specific language
 55 | const workspace = await daytona.create({ language: 'typescript' });
 56 |
 57 | // Create a workspace with custom ID
 58 | const workspace = await daytona.create({ id: 'my-workspace' });
 59 | ```
 60 |
 61 | </TabItem>
 62 | </Tabs>
 63 |
 64 | ## Sandbox Information
 65 |
 66 | Daytona SDK provides methods to get information about a Sandbox, such as ID, root directory, and status using Python and TypeScript.
 67 |
 68 | <Tabs>
 69 | <TabItem label="Python" icon="seti:python">
 70 | ```python
 71 | # Get Sandbox ID
 72 | workspace_id = workspace.id
 73 |
 74 | # Get Sandbox root directory
 75 |
 76 | root_dir = workspace.get_workspace_root_dir()
 77 |
 78 | ```
 79 | </TabItem>
 80 | <TabItem label="TypeScript" icon="seti:typescript">
 81 | ```typescript
 82 | // Get workspace ID
 83 | const workspaceId = workspace.id;
 84 |
 85 | // Get workspace root directory
 86 | const rootDir = await workspace.getWorkspaceRootDir();
 87 | ```
 88 |
 89 | </TabItem>
 90 | </Tabs>
 91 |
 92 | ## Remove Sandbox
 93 |
 94 | Daytona SDK provides methods to perform operations on Sandboxes, such as removing Sandboxes using Python and TypeScript.
 95 |
 96 | <Tabs>
 97 | <TabItem label="Python" icon="seti:python">
 98 | ```python
 99 | # Remove Sandbox
100 | daytona.remove(workspace)
101 | ```
102 | </TabItem>
103 | <TabItem label="TypeScript" icon="seti:typescript">
104 | ```typescript
105 | // Remove workspace
106 | await daytona.remove(workspace);
107 | ```
108 | </TabItem>
109 | </Tabs>
110 |


--------------------------------------------------------------------------------
/src/content/legacy-docs/tools/docker-extension.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Docker Extension
  3 | description: Learn how to use the Daytona Docker extension to create, open, list, and delete Workspaces.
  4 | ---
  5 |
  6 | import Label from '@components/Label.astro'
  7 |
  8 | <Label>
  9 |   Distribution: **Open Source**, **Self-Managed**
 10 | </Label>
 11 |
 12 | Daytona provides a Docker Extension for using an embedded version of the Daytona client and server tools directly within Docker Desktop.
 13 |
 14 | The Docker Extension provides options to create, open, list, and delete [Workspaces](/docs/usage/workspaces).
 15 |
 16 | View the Daytona Docker Extension in the [Docker Desktop Extensions Marketplace](https://open.docker.com/extensions/marketplace?extensionId=daytonaio/docker-extension&tag=0.44.0) or [GitHub repository](https://open.docker.com/extensions/marketplace?extensionId=daytonaio/docker-extension&tag=0.44.0).
 17 |
 18 | ## Prerequisites
 19 |
 20 | - [Docker Desktop](https://www.docker.com/products/docker-desktop) installed on your machine.
 21 |
 22 | ## Installation
 23 |
 24 | {/* Install the Daytona Docker Extension from the [Docker Desktop Extensions Marketplace](https://open.docker.com/extensions/marketplace?extensionId=daytonaio/docker-extension&tag=0.44.0).
 25 |
 26 | ### Manual */}
 27 |
 28 | 1. Run the following command to install the Daytona Docker Extension
 29 |
 30 | ```sh
 31 | docker extension install daytonaio/docker-extension
 32 | ```
 33 |
 34 | :::note
 35 | Allow non-marketplace extensions in the Docker desktop settings to install the Daytona Docker extension.
 36 | :::
 37 |
 38 | Wait while Daytona Docker Extension sets up your Workspace. It handles all the initialization and configuration of your environment.
 39 |
 40 | ## Create a Workspace
 41 |
 42 | Create a new Workspace using the Daytona Docker Extension within the Docker Desktop.
 43 |
 44 | 1. Click **`Create Workspace`** to start creating a new Workspace.
 45 | 2. Select the Workspace resource. You can choose from the following options:
 46 |
 47 | - Browse your Git repositories.
 48 | - Select a predefined sample.
 49 | - Find with URL.
 50 |
 51 | 3. Select the **`IDE`** from the dropdown list.
 52 | 4. Select the **`Target`** from the dropdown list.
 53 | 5. Click **`Next`** to proceed.
 54 |
 55 | ```text
 56 | Opening the project <project> from workspace <workspace> in <IDE>
 57 |
 58 | Setting up IDE customizations...
 59 | Waiting for code server to install...
 60 | Installing extensions...
 61 | Setting up IDE settings...
 62 | ...
 63 | ```
 64 |
 65 | Daytona Docker Extension will create a new Workspace with the selected settings. You can now [open the Workspace](#open-an-existing-workspace) and start working on your project.
 66 |
 67 | ## Open an Existing Workspace
 68 |
 69 | Daytona Docker Extension provides an option to open an existing Workspace in your IDE. This enables you to quickly access and work on your projects in your preferred development environment. With Daytona Docker Extension, you can effortlessly switch between different Workspaces and maintain an efficient workflow.
 70 |
 71 | 1. Click the IDE button of the Workspace you want to open.
 72 |
 73 |     This will automatically launch your Workspace in the selected IDE.
 74 |
 75 | ## Manage a Workspace
 76 |
 77 | Daytona Docker Extension provides an option to access and manage your Workspace, providing a detailed overview of the Workspace configuration.
 78 |
 79 | Once a Workspace is created, you will be presented with the following options and information:
 80 |
 81 | - **Name**
 82 |
 83 |     The name of the Workspace, and the GitHub repository it is associated with.
 84 |
 85 | - **Status**
 86 |
 87 |     The current status of the Workspace, such as `Running` or `Stopped`.
 88 |
 89 | - **Target**
 90 |
 91 |     The target environment for the Workspace.
 92 |
 93 | - **IDE**
 94 |
 95 |     The IDE used to open the Workspace.
 96 |
 97 | - [**Delete**](#delete-a-workspace)
 98 |
 99 |     Click the bin icon to delete the Workspace from the Daytona Docker Extension.
100 |
101 | ## Delete a Workspace
102 |
103 | Daytona Docker Extension provides an option to delete one or more Workspaces, helping you manage your development environments by removing those that are no longer needed.
104 |
105 | 1. Click the bin icon to delete your Workspace.
106 |


--------------------------------------------------------------------------------
/src/content/legacy-docs/usage/builders.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Builders
  3 | description: A reference detailing how to use Dev Containers and custom images as the base for your project.
  4 | sidebar:
  5 |   label: Builders
  6 | ---
  7 |
  8 | import Label from '@components/Label.astro'
  9 |
 10 | <Label>
 11 |   Distribution: **Open Source**
 12 | </Label>
 13 |
 14 | import Aside from '@components/Aside.astro'
 15 | import Keyboard from '@components/Keyboard.astro'
 16 |
 17 | Builders are responsible for creating a container image with the necessary tools and configurations for your [Project](/docs/usage/projects).
 18 | Daytona provides control over how the resulting Project environment is created, allowing you to choose your preferred method to build the Project image.
 19 |
 20 | You can choose between the following Builders while [creating a Workspace](/docs/usage/workspaces#create-a-workspace):
 21 |
 22 | - [**Automatic**](#automatic)
 23 |
 24 |    Daytona builds the Project image after auto-detecting the most appropriate Builder.
 25 |
 26 | - [**Dev Container**](#dev-container)
 27 |
 28 |    Daytona builds the Project image according to the Dev Container configuration located in the project.
 29 |
 30 | - [**Custom Image**](#custom-image)
 31 |
 32 |    Daytona builds the Project image using an image you specify.
 33 |
 34 | - [**None**](#none)
 35 |
 36 |    Daytona creates the Project using the default base image.
 37 |
 38 | ## Automatic
 39 |
 40 | Daytona can auto-detect the most appropriate Builder for your Project. Daytona uses the following logic to determine which Builder to use:
 41 |
 42 | 1. Check if a Dev Container configuration is present in **`.devcontainer.json`** or **`.devcontainer/devcontainer.json`**, relative to the repository root.
 43 | 2. If present, use the [Dev Container](#dev-container) Builder. If not present, use the [None](#none) Builder.
 44 |
 45 | To use the Automatic Builder, set the `--builder` flag value to `auto` during the [Workspace creation](/docs/usage/workspaces#create-a-workspace). This flag only applies when creating Workspaces with a single Project.
 46 |
 47 | ```shell
 48 | daytona create <REPO_URL> --builder=auto
 49 | ```
 50 |
 51 | ## Dev Container
 52 |
 53 | Development Containers (Dev Containers) provide a consistent and fully featured development environments for your [Projects](/docs/usage/projects). A Dev Container defines all the necessary tools, runtime, and environment configurations required to build and run your Projects.
 54 |
 55 | The Dev Container specification is designed to define a development environment that can be replicated across different platforms and CI/CD systems. The specification is defined within a `devcontainer.json` file in the project repository.
 56 |
 57 | The `devcontainer.json` file is a JSON file that consists of components that define the development environment. The file includes objects with properties containing metadata and settings required to configurate a development container. View the [dev container specification](https://containers.dev/implementors/json_reference/) for more information.
 58 |
 59 | Use [devcontainer.ai](https://devcontainer.ai/) to generate a `devcontainer.json` file for your Project.
 60 |
 61 | Example `devcontainer.json` file:
 62 |
 63 | ```sh
 64 | {
 65 |     "name": "Example Python & PostgreSQL Dev Container",
 66 |     "build": {
 67 |         "dockerfile": "Dockerfile",
 68 |         "args": {
 69 |             "VARIANT": "3.8",
 70 |             "INSTALL_NODE": "false"
 71 |         }
 72 |     },
 73 |     "settings": {
 74 |         "terminal.integrated.shell.linux": "/bin/bash"
 75 |     },
 76 |     "extensions": [
 77 |         "ms-python.python",
 78 |         "ms-azuretools.vscode-docker"
 79 |     ],
 80 |     "postCreateCommand": "pip install -r requirements.txt",
 81 |     "remoteUser": "vscode"
 82 | }
 83 | ```
 84 |
 85 | - `name`: The name of the development container.
 86 | - `build`: The build configuration for the development container.
 87 | - `settings`: The settings for the development container.
 88 | - `extensions`: The extensions to install in the development container.
 89 | - `postCreateCommand`: The command to run after creating the development container.
 90 | - `remoteUser`: The user to execute commands as during the image build process.
 91 |
 92 | Daytona provides the option to build the Project image using the Dev Container standard. Use the following option available when using the Dev Container Builder:
 93 |
 94 | - **Devcontainer file path**
 95 |
 96 |    The path where the Dev Container configuration is located, relative to the repository root.
 97 |    The default value is `.devcontainer/devcontainer.json`.
 98 |
 99 | To use the Dev Container Builder, set the `--devcontainer-path` flag to the Dev Container configuration path within the repository during the [Workspace creation](/docs/usage/workspaces#create-a-workspace). This flag only applies when creating Workspaces with a single Project.
100 |
101 | ```shell showLineNumbers
102 | daytona create <REPO_URL> --devcontainer-path=.devcontainer/devcontainer.json
103 | ```
104 |
105 | :::note
106 | For more information on the Dev Container standard, refer to the official documentation at [containers.dev](https://containers.dev/).
107 | :::
108 |
109 | ## Custom Image
110 |
111 | You can build the Project image by specifying a custom base container.
112 | The following options are accepted when using this Builder:
113 |
114 | - **Custom container image**
115 |
116 |    The name of the base container image for the Project.
117 |
118 | - **Container user**
119 |
120 |    The user to execute commands as during the image build process.
121 |
122 | - **Environment variables**
123 |
124 |    A list of environment variables in the format `KEY=VALUE`.
125 |
126 | To use the Custom Image Builder, set both `--custom-image` and `--custom-image-user` flags while [creating a Workspace](/docs/usage/workspaces#create-a-workspace). These flags only apply when creating Workspaces with a single Project.
127 |
128 | ```shell
129 | daytona create <REPO_URL> --custom-image=daytona-workspace:latest --custom-image-user=daytona
130 | ```
131 |
132 | ## None
133 |
134 | Daytona can build a Project using the default base image.
135 |
136 | Unless otherwise configured using `daytona server configure`, the default base image is set to `daytonaio/workspace-project`.
137 |
138 | ## Custom Build Registry
139 |
140 | You can set a custom build registry for images built by a Daytona Builder.
141 | After an image is built, it will be uploaded to the configured container registry to speed up future Workspace creation for the same Project.
142 |
143 | **Prerequisite**
144 |
145 | - An account on an accessible container registry with permission to push/pull images.
146 |
147 | 1. Execute the following command to configure the custom build registry:
148 |
149 | ```shell
150 | daytona container-registry set
151 | ```
152 |
153 | 2. Set the required options:
154 |
155 | - **Server URL**
156 |
157 |    The full URL to your custom container registry.
158 |
159 | - **Username**
160 |
161 |    The username Daytona should use to log in to the container registry.
162 |
163 | - **Password**
164 |
165 |    The password for your container registry account.
166 |
167 | 3. Press <Keyboard shortcuts="Enter" /> to set the custom build registry.
168 | 4. Execute the following command to configure the server:
169 |
170 | ```shell
171 | daytona server configure
172 | ```
173 |
174 | 5. Press <Keyboard shortcuts="Enter" /> until the "Builder Registry" section is highlighted.
175 |
176 | ```text
177 | Builder Registry
178 | To add options, add a container registry with 'daytona cr set'
179 | > Local registry managed by Daytona
180 | ```
181 |
182 | 6. Select the custom registry configured previously using <Keyboard shortcuts="↑" /> / <Keyboard shortcuts="↓" /> arrow keys.
183 | 7. Press <Keyboard shortcuts="Enter" /> until the command exits to save the configuration.
184 |


--------------------------------------------------------------------------------
/src/content/legacy-docs/usage/prebuilds.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Prebuilds
  3 | description: Learn how to manage and reuse Prebuilds across Workspaces.
  4 | sidebar:
  5 |   label: Prebuilds
  6 | ---
  7 |
  8 | import Label from '@components/Label.astro'
  9 |
 10 | <Label>
 11 |   Distribution: **Open Source**
 12 | </Label>
 13 |
 14 | Prebuilds are designed to accelerate development by pre-building your Workspace. When you start a Workspace, the prebuilt environment is used, ensuring that the Workspace is initiated almost instantly.
 15 |
 16 | Prebuilds achieve this by setting up a [project configuration](/docs/usage/projects#project-configuration) that monitors changes in the connected Git Provider's repository.
 17 |
 18 | Prebuilds work by registering a listener for webhook events from the Git Provider. A public API endpoint is provided, which the Git Provider uses to send these requests.
 19 |
 20 | :::note
 21 | Daytona currently supports GitHub, GitLab, and GitLab Self-Managed as Git Providers for Prebuilds.
 22 | :::
 23 |
 24 | ## Add a Prebuild
 25 |
 26 | 1. Run the following command to add a new Prebuild:
 27 |
 28 | ```shell
 29 | daytona prebuilds add
 30 | ```
 31 |
 32 | Upon running the command, Daytona will prompt you to select a project configuration you plan to work on. You can then decide on a commit interval (e.g. `5`, _every 5 commits_) after which a build should be triggered, any specific trigger files whose changes should immediately start the build process, and build retention (the maximum number of builds to store at a time).
 33 |
 34 | ```text
 35 | Select a Project Config To Prebuild
 36 | 1 item
 37 | MyConfig
 38 | https://github.com/username/myproject.git
 39 | ```
 40 |
 41 | ```text
 42 | Commit interval
 43 | Leave blank to ignore push events
 44 | >
 45 | ```
 46 |
 47 | ```text
 48 | Trigger Files
 49 | Enter full paths for files whose changes you want to explicitly trigger a prebuild. Use new lines for multiple entries.
 50 | ```
 51 |
 52 | ```text
 53 | Retention
 54 | Maximum number of resulting builds stored at a time
 55 | >
 56 | ```
 57 |
 58 | Subsequent `daytona create` calls will automatically detect the most recent existing build and use it to create the project.
 59 |
 60 | ## Use a Prebuild
 61 |
 62 | Once you added a Prebuild, it becomes active immediately based on the [project configuration](/docs/usage/projects#project-configuration) you provided. The Prebuild will automatically run whenever the specified conditions are met, such as when the defined number of commits is reached.
 63 |
 64 | For instance, if you specified a commit interval of `5`, the Prebuild will run after every `5` commits to the repository. Populate the **Trigger files** field with files whose changes you want to immediately trigger a Prebuild, without having to wait for the commit interval. Use the **Retention** field to define how many successful builds you want Daytona to remember (defaults to `3`).
 65 |
 66 | As soon as you add a Prebuild, a build process will automatically start in the background unless you have configured it otherwise. The initial build process may take some time to complete, but subsequent builds will be significantly faster. You can view the initial build's progress by running `daytona builds list`.
 67 |
 68 | Once the build process is complete, run the following command to create a Workspace using the configured project configuration:
 69 |
 70 | ```shell
 71 | daytona create [PROJECT_CONFIG_NAME]
 72 | ```
 73 |
 74 | Upon running this command, Daytona will detect the most recent Prebuild associated with the selected project configuration. The Workspace will then use this Prebuild, significantly speeding up the setup process by utilizing the cached environment
 75 |
 76 | During the Workspace creation process, if the initial Prebuild has finished, the setup will be almost instantaneous. Otherwise, a new build will be triggered, potentially slowing down the Workspace creation.
 77 |
 78 | ## List Prebuilds
 79 |
 80 | Daytona provides an option to list all Prebuilds, providing you with an overview of the properties stored within each Prebuild configuration.
 81 |
 82 | 1. Run the following command to list all Prebuilds:
 83 |
 84 | ```shell
 85 | daytona prebuilds list
 86 | ```
 87 |
 88 | Upon running this command, Daytona will display a list of your Prebuilds. You will be able to view the project configuration, the branch it is linked to, the commit interval, the trigger files, and the build retention.
 89 |
 90 | ```text
 91 | Project Config   Branch  Commit Interval  Trigger files  Build Retention
 92 | ────────────────────────────────────────────────────────────────────────
 93 | MyConfig         main    5                None           3
 94 | ```
 95 |
 96 | ## Prebuilds Information
 97 |
 98 | Daytona provides an option to view detailed information of a Prebuild, providing you with an overview of the properties stored within it.
 99 |
100 | 1. Run the following command to view the details of a Prebuild:
101 |
102 | ```shell
103 | daytona prebuilds info
104 | ```
105 |
106 | 2. Select the Prebuild you want to view.
107 |
108 | ```text
109 | Select a Prebuild To View
110 | 1 item
111 | MyConfig (main)
112 | abcd1234efg (every 5 commits)
113 | ```
114 |
115 | Upon selecting the Prebuild, Daytona will display the details of the selected Prebuild. You will be able to view the Prebuild ID, the project configuration, the branch it is linked to, the commit interval, the trigger files, and the build retention.
116 |
117 | ```text
118 | Prebuild Configuration Info
119 |
120 | ID                   abcd1234efg
121 | Project config       MyConfig
122 | Branch               main
123 | Commit interval      5
124 | Build retention      3
125 | ```
126 |
127 | ## Update Prebuilds
128 |
129 | Daytona provides an option to update a Prebuild, helping you manage and modify the Prebuild configuration.
130 |
131 | 1. Run the following command to update a Prebuild:
132 |
133 | ```shell
134 | daytona prebuilds update
135 | ```
136 |
137 | 2. Select the Prebuild you want to update.
138 |
139 | ```text
140 | Select a Prebuild To Update
141 | 1 item
142 | MyConfig (main)
143 | abcd1234efg (every 5 commits)
144 | ```
145 |
146 | Upon selecting the Prebuild, Daytona will prompt you to update the Prebuild commit interval, trigger files, and build retention.
147 |
148 | ```text
149 | Commit interval
150 | >
151 | ```
152 |
153 | ```text
154 | Trigger Files
155 | Enter full paths for files whose changes you want to explicitly trigger a prebuild. Use new lines for multiple entries.
156 | ```
157 |
158 | ```text
159 | Retention
160 | Maximum number of resulting builds stored at a time
161 | >
162 | ```
163 |
164 | Upon updating the Prebuild configuration, Daytona will display a success message.
165 |
166 | ```text
167 | Prebuild updated successfully
168 | ```
169 |
170 | ## Delete Prebuilds
171 |
172 | Daytona provides an option to delete Prebuilds, helping you manage and remove those that are no longer needed.
173 |
174 | 1. Run the following command to delete a Prebuild:
175 |
176 | ```shell
177 | daytona prebuilds delete
178 | ```
179 |
180 | 2. Select the Prebuild you want to delete.
181 |
182 | ```text
183 | Select a Prebuild To Delete
184 | 1 item
185 | MyConfig (main)
186 | abcd1234efg (every 5 commits)
187 | ```
188 |
189 | ```text
190 | Prebuild deleted successfully
191 | ```
192 |


--------------------------------------------------------------------------------
/src/content/legacy-docs/usage/runners.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Runners
  3 | description: Learn how to use and manage Runners in Daytona.
  4 | ---
  5 |
  6 | import { Tabs, TabItem } from '@astrojs/starlight/components';
  7 |
  8 | A Runner is a standalone service that can be deployed anywhere. The user can deploy a Runner on a target system by executing a set of instructions and commands generated upon Runner registration.
  9 |
 10 | Once deployed, the Runner starts up and connects to the [Daytona Server](/docs/usage/server), at which point its status is marked as `Running`.
 11 |
 12 | The Runner sends all requests, while the Server only responds. The Runner sends requests such as _Heartbeat_ (to share its status) and _Job Requests_ (to ask Daytona Server for jobs assigned to it).
 13 |
 14 | A single Runner can use multiple [Providers](/docs/configuration/providers), configured during deployment or later via jobs, enabling flexibility for various environments.
 15 |
 16 | ## Create a Runner
 17 |
 18 | Daytona provides an option to create a new Runner, enabling you to deploy it on a target system and connect it to the Daytona Server.
 19 |
 20 | 1. Run the following command to create a new Runner:
 21 |
 22 | ```shell
 23 | daytona server runner create
 24 | ```
 25 |
 26 | Upon running the command, Daytona will generate a code snippet containing the server API URL and API key required to deploy the Runner on the target system.
 27 |
 28 | 2. Paste the code snippet into the target system's terminal and execute it to configure the Runner.
 29 |
 30 | ## Start / Serve a Runner
 31 |
 32 | Daytona provides options to serve a Runner in the foreground or start a Runner as a daemon/background process. Use the method that best suits your requirements.
 33 |
 34 | <Tabs>
 35 | <TabItem label="Foreground">
 36 | ```shell
 37 | daytona runner serve
 38 | ```
 39 | </TabItem>
 40 | <TabItem label="Daemon/Background">
 41 | ```shell
 42 | daytona runner start
 43 | ```
 44 | </TabItem>
 45 | </Tabs>
 46 |
 47 | The Runner will connect to the Daytona Server and its status will be marked as `Running`.
 48 |
 49 | ## Configure a Runner
 50 |
 51 | Daytona provides an option to configure a Runner, enabling you to update its configuration settings.
 52 |
 53 | 1. Run the following command to configure a Runner:
 54 |
 55 | ```shell
 56 | daytona runner configure
 57 | ```
 58 |
 59 | Upon running the command, Daytona will display the current Runner configuration settings and prompt you to update them.
 60 |
 61 | ```text
 62 | ID
 63 | Unique ID generated by the Daytona Server
 64 | >
 65 |
 66 | Name
 67 | Unique name set on the Daytona Server
 68 | >
 69 |
 70 | Runner API Port
 71 | Port used for exposing runner health-check endpoint
 72 | > 3983
 73 |
 74 | Server API URL
 75 | >
 76 |
 77 | Server API Key
 78 | >
 79 |
 80 | Providers Directory
 81 | Directory will be created if it does not exist
 82 | > /Users/<user>/Library/Application Support/daytona-runner/providers
 83 |
 84 | Telemetry Enabled
 85 | [Yes]     [No]
 86 |
 87 | Log File Path
 88 | File will be created if it does not exist
 89 | > /Users/<user>/Library/Application Support/daytona-runner/log
 90 |
 91 | Log File Max Size
 92 | In megabytes
 93 | > 100
 94 |
 95 | Log File Backups
 96 | > 7
 97 |
 98 | Log File Max Age
 99 | In days
100 | > 15
101 |
102 | Log File Local Time
103 | Used for timestamping files. Default is UTC time.
104 | [Yes]     [No]
105 |
106 | Log File Compress
107 |
108 | [Yes]     [No]
109 | ```
110 |
111 | Upon configuring the Runner, Daytona update the Runner configuration and display the following message:
112 |
113 | ```text
114 | Runner configuration updated. To start running jobs, run 'daytona runner start'.
115 | ```
116 |
117 | :::tip
118 | View the current Runner configuration by running the following command:
119 |
120 | <br />
121 |
122 | ```shell
123 | daytona runner config
124 | ```
125 |
126 | Upon running the command, Daytona will display the current Runner configuration settings.
127 | :::
128 |
129 | ## Purge a Runner
130 |
131 | Daytona provides an option to purge a Runner, enabling you to remove it from the Daytona Server.
132 |
133 | 1. Run the following command to purge a Runner:
134 |
135 | ```shell
136 | daytona runner purge
137 | ```
138 |
139 | Upon running the command, Daytona will display a list of Runners and prompt you to select the Runner you want to purge.
140 |
141 | ```text
142 | Purging will remove the entire Daytona Runner configuration from the system, are you sure you want to continue?
143 | This action is irreversible.
144 |
145 | [Yes]     [No]
146 | ```
147 |
148 | 2. Confirm the action by selecting **`Yes`**.
149 |
150 | ```text
151 | The Daytona Runner has been purged from this device.
152 | ```
153 |
154 | ## Restart a Runner
155 |
156 | Daytona provides an option to restart a Runner, enabling you to restart it on the target system.
157 |
158 | 1. Run the following command to restart a Runner:
159 |
160 | ```shell
161 | daytona runner restart
162 | ```
163 |
164 | Upon running this command, Daytona will restart the Runner on the target system.
165 |
166 | ## Stop a Runner
167 |
168 | Daytona provides an option to stop a Runner, enabling you to stop it on the target system.
169 |
170 | 1. Run the following command to stop a Runner:
171 |
172 | ```shell
173 | daytona runner stop
174 | ```
175 |
176 | Upon running this command, Daytona will stop the Runner on the target system.
177 |
178 | ## Runner Logs
179 |
180 | Daytona provides an option to view the logs of a Runner, enabling you to monitor its activities.
181 |
182 | 1. Run the following command to view the logs of a Runner:
183 |
184 | ```shell
185 | daytona runner logs
186 | ```
187 |
188 | Upon running this command, Daytona will display the logs of the Runner.
189 |


--------------------------------------------------------------------------------
/src/content/legacy-docs/usage/samples.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Samples
  3 | description: Learn how to create and manage samples in Daytona.
  4 | sidebar:
  5 |   label: Samples
  6 | ---
  7 |
  8 | import Keyboard from "../../../components/Keyboard.astro"
  9 | import Label from '@components/Label.astro'
 10 |
 11 | <Label>
 12 |   Distribution: **Open Source**, **Cloud**, **Self-Managed**
 13 | </Label>
 14 |
 15 | Samples are quick-start repositories with predefined development configurations, environments, and dependencies used to create Workspaces.
 16 |
 17 | ## Custom Samples
 18 |
 19 | Daytona provides an option to use custom Samples to create Workspaces. Creating custom Samples is a two-step process that involves:
 20 |
 21 | - [**Sample Repository**](#sample-repository)
 22 |
 23 |     A repository containing the Sample code and a `devcontainer.json` file defining the development environment.
 24 |
 25 | - [**Samples Index**](#samples-index)
 26 |
 27 |     Samples Index (`index.json`) file serving as a registry of available Samples for creating Workspaces.
 28 |
 29 | ### Sample Repository
 30 |
 31 | Custom Sample repository is a Git repository that contains the Sample code and a `devcontainer.json` file that defines the development environment. The repository serves as the core content of the Sample and is used to create a Workspace.
 32 |
 33 | 1. Create a repository representing the custom Sample.
 34 |
 35 | 2. Define the custom Sample code, development configurations and dependencies.
 36 |
 37 | 3. Create a **`devcontainer.json`** file that defines the development environment.
 38 |
 39 | - Use the [development container standard](https://containers.dev/) to define your development environment. Development containers vary based on the programming language, configurations, and tools used within the Sample.
 40 |
 41 | Example of a **`devcontainer.json`** file for development environment using Go programming language:
 42 |
 43 | ```json
 44 | {
 45 |     "name": "Go",
 46 |     "image": "mcr.microsoft.com/devcontainers/go:1-1.21-bookworm",
 47 |     "customizations": {
 48 |         "vscode": {
 49 |             "extensions": [
 50 |                 "golang.Go"
 51 |             ]
 52 |         }
 53 |     },
 54 |     "postCreateCommand": "go test -v"
 55 | }
 56 | ```
 57 |
 58 | 4. Host the Sample repository on a Git repository or another platform.
 59 |
 60 | 5. Add Sample properties to the [Samples Index](#samples-index).
 61 |
 62 | Sample will be used to create a Workspace by cloning the repository and using the `devcontainer.json` file to define the development environment.
 63 |
 64 | ### Samples Index
 65 |
 66 | Samples require a Sample Index (`index.json`) file that serves as a registry of available Samples for creating Workspaces. The Samples Index is used to display the available Samples when creating a Workspace.
 67 |
 68 | 1. Create an **`index.json`** file representing the Samples Index.
 69 |
 70 | 2. Define an array of JSON objects representing the Samples.
 71 |
 72 |     Each JSON object in the array represents a Sample:
 73 |
 74 | ```json
 75 | [
 76 |   {
 77 |     "name": "My Custom Sample",
 78 |     "description": "My custom Samples description",
 79 |     "gitUrl": "https://github.com/<username>/<repository>"
 80 |   }
 81 | ]
 82 | ```
 83 |
 84 | - **`name`**
 85 |
 86 |     Name of the Sample.
 87 |
 88 | - **`gitUrl`**
 89 |
 90 |     Link to the publicly available Sample repository.
 91 |
 92 | 3. Host the **`index.json`** file publicly on a Git repository or another platform.
 93 |
 94 | 4. Run the following command to configure the Samples Index URL:
 95 |
 96 | ```sh
 97 | daytona server configure
 98 | ```
 99 |
100 | 5. Enter the public raw URL of the **`index.json`** file in the **`Samples Index URL`** field.
101 |
102 | ```text
103 | Samples Index URL
104 | Leave empty to disable samples
105 | https://raw.githubusercontent.com/<username>/<repository>/<path>/index.json
106 | ```
107 |
108 | ```text
109 | Server configuration updated. You need to restart the server for the changes to take effect.
110 | ```
111 |
112 | 6. Restart the Daytona server to apply the changes.
113 |
114 | ```sh
115 | daytona server restart
116 | ```
117 |
118 | Custom Samples will be available available when creating a Workspace. The chosen Sample will be cloned and used to create the Workspace.
119 |
120 | ## Daytona Samples
121 |
122 | Daytona provides a collection of default Samples with predefined development configurations, environments, and dependencies. Daytona Samples are available to choose from when creating a Workspace.
123 |
124 | Daytona Samples are integrated via a Samples Index (`index.json`) file that serves as a registry of available Daytona Samples for creating Workspaces.
125 |
126 | The chosen Sample will be cloned and used to create the Workspace. The Daytona Sample repository will serve as the core content of the Sample used to create a Workspace.
127 |
128 | View the list of available Daytona Samples in the [Samples Index](https://github.com/daytonaio/daytona/blob/main/hack/samples/index.json).
129 |
130 | :::tip
131 | You can contribute to the Daytona Samples by suggesting new Samples to be added to the [Daytona Samples Index](https://github.com/daytonaio/daytona/blob/main/hack/samples/index.json).
132 | :::
133 |


--------------------------------------------------------------------------------
/src/content/legacy-docs/usage/targets.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Targets
  3 | description: Learn how to manage Target configuration across Workspaces.
  4 | sidebar:
  5 |   label: Targets
  6 | ---
  7 |
  8 | import Label from '@components/Label.astro'
  9 |
 10 | <Label>
 11 |   Distribution: **Open Source**
 12 | </Label>
 13 |
 14 | A Target is an isolated processing unit where Workspaces are executed. It can operate on various infrastructures, including cloud-based and on-premises environments. Targets provide the necessary compute resources and meet security requirements within the defined infrastructure.
 15 |
 16 | ## Create a Target
 17 |
 18 | Daytona provides an option to create a Target. Creating a Target requires creating a Target Configuration and specifying the Provider to use.
 19 |
 20 | 1. Run the following command to create a Target:
 21 |
 22 | ```shell
 23 | daytona target create
 24 | ```
 25 |
 26 | 2. Select the [Target Configuration](/docs/configuration/target-config) to use for the Target.
 27 |
 28 | 3. Select the [Provider](/docs/configuration/providers) for the environment you want to deploy to.
 29 |
 30 | 4. Enter a name for your Target.
 31 |
 32 | ```text
 33 | Target Name
 34 | >
 35 | ```
 36 |
 37 | 5. Enter the appropriate configuration options when prompted. The configuration options vary based on the selected Provider. The following example shows adding a [local Docker Target Configuration](/docs/configuration/target-config#docker-local).
 38 |
 39 | ```text
 40 | Sock Path
 41 | > /var/run/docker.sock
 42 | ```
 43 |
 44 | 6. Enter a name for your Target.
 45 |
 46 | ```text
 47 | Target Name
 48 | >
 49 | ```
 50 |
 51 | ```text
 52 | ✓ Request submitted
 53 | Creating target <target_name>
 54 | ```
 55 |
 56 | ## Start a Target
 57 |
 58 | Daytona provides an option to start a Target.
 59 |
 60 | 1. Run the following command to start a Target:
 61 |
 62 | ```shell
 63 | daytona target start
 64 | ```
 65 |
 66 | 2. Select the Target you want to start.
 67 |
 68 | ```text
 69 | Select Targets to Start
 70 | ===
 71 | local (default)
 72 | <target_id>
 73 | Docker (local)
 74 | ```
 75 |
 76 | ## Stop a Target
 77 |
 78 | Daytona provides an option to stop a Target.
 79 |
 80 | 1. Run the following command to stop a Target:
 81 |
 82 | ```shell
 83 | daytona target stop
 84 | ```
 85 |
 86 | 2. Select the Target you want to stop.
 87 |
 88 | ```text
 89 | Select Targets to Stop
 90 | ===
 91 | local (default)
 92 | <target_id>
 93 | Docker (local)
 94 | ```
 95 |
 96 | ## List Targets
 97 |
 98 | Daytona provides an option to list all Targets.
 99 |
100 | 1. Run the following command to list all Targets:
101 |
102 | ```shell
103 | daytona target list
104 | ```
105 |
106 | Upon running the command, Daytona will display a list of all Targets along with their configurations.
107 |
108 | ```text
109 | Target          Config Name     # Workspaces    Default     Status
110 | local (Docker)  local           0               Yes         /
111 | AWS             aws             0               No          Started
112 | ```
113 |
114 | ## Restart a Target
115 |
116 | Daytona provides an option to restart a Target.
117 |
118 | 1. Run the following command to restart a Target:
119 |
120 | ```shell
121 | daytona target restart
122 | ```
123 |
124 | ## Delete a Target
125 |
126 | Daytona provides an option to remove a Target.
127 |
128 | 1. Run the following command to remove a Target:
129 |
130 | ```shell
131 | daytona target delete
132 | ```
133 |
134 | 2. Select the Target you want to delete.
135 |
136 | ```text
137 | Select Targets to Delete
138 | ===
139 | local (default)
140 | <target_id>
141 | Docker (local)
142 | ```
143 |
144 | ## Targets Information
145 |
146 | Daytona provides an option to view detailed information about a Target.
147 |
148 | 1. Run the following command to view detailed information about a Target:
149 |
150 | ```shell
151 | daytona target info
152 | ```
153 |
154 | 2. Select the Target you want to view information about.
155 |
156 | ```text
157 | Select Target to View
158 | ===
159 | local (default)
160 | <target_id>
161 | Docker (local)
162 | ```
163 |
164 | Upon running the command, Daytona will display detailed information about the selected Target.
165 |
166 | ```text
167 | Name:             local
168 | ID:               <target_id>
169 | Provider:         Docker
170 | Runner:           local
171 | Default:          Yes
172 | State:            Running
173 | # Workspaces:     1
174 | ```
175 |
176 | 2. Select the Target you want to restart.
177 |
178 | ```text
179 | Select Targets to Restart
180 | ===
181 | local (default)
182 | <target_id>
183 | Docker (local)
184 | ```
185 |
186 | Upon running the command, Daytona will restart the selected Target.
187 |
188 | ## Set Default Target
189 |
190 | Daytona provides an option to set a Target as the default Target.
191 |
192 | 1. Run the following command to set a Target as the default Target:
193 |
194 | ```shell
195 | daytona target set-default
196 | ```
197 |
198 | 2. Select the Target you want to set as the default Target.
199 |
200 | ```text
201 | Select a Target To Set As Default
202 | ===
203 | local (default)
204 | <target_id>
205 | Docker (local)
206 | ```
207 |
208 | Upon running the command, Daytona will set the selected Target as the default Target.
209 |
210 | ```text
211 | Target 'local' set as default
212 | ```
213 |
214 | ## SSH into a Target
215 |
216 | Daytona provides an option to SSH into a Target.
217 |
218 | 1. Run the following command to SSH into a Target:
219 |
220 | ```shell
221 | daytona target ssh
222 | ```
223 |
224 | 2. Select the Target you want to SSH into.
225 |
226 | ```text
227 | Select a Target To SSH Into
228 | ===
229 | local (default)
230 | <target_id>
231 | Docker (local)
232 | ```
233 |
234 | Upon running the command, Daytona will SSH into the selected Target.
235 |
236 | ## Target Logs
237 |
238 | Daytona provides an option to view logs for a Target.
239 |
240 | 1. Run the following command to view logs for a Target:
241 |
242 | ```shell
243 | daytona target logs
244 | ```
245 |
246 | 2. Select the Target you want to view logs for.
247 |
248 | ```text
249 | Select a Target To View Logs
250 | ===
251 | local (default)
252 | <target_id>
253 | Docker (local)
254 | ```
255 |
256 | Upon running the command, Daytona will display logs for the selected Target.
257 |
258 | ```text
259 | local | Creating target local (<target_id>)
260 | local | ✓ Target creation complete
261 | ```
262 |


--------------------------------------------------------------------------------